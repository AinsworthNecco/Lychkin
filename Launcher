#!/usr/bin/env bash

# ==============================================================================
# ROBLOX LAUNCHER & SCANNER (BLACKBOX FIX) v10.0
#
# Cải tiến:
# - Tái cấu trúc logic kết nối thành một hàm ("hộp đen") chuyên dụng,
#   đảm bảo script chỉ xử lý dữ liệu mới và sạch sẽ, giải quyết
#   triệt để vấn đề quét lặp trang do lỗi proxy.
# ==============================================================================

# ---------------------------------------------------
# -- CẤU HÌNH --
# URL "RAW" ĐẾN FILE config CỦA BẠN TRÊN GITHUB
# ---------------------------------------------------
CONFIG_URL="https://raw.githubusercontent.com/AinsworthNecco/Lychkin/refs/heads/main/config"
# ---------------------------------------------------

REMOTE_CONFIG_FILE="./remote_config.conf"
# Biến toàn cục để theo dõi trạng thái proxy
declare -i PROXY_INDEX=0
declare -i FAILED_PROXY_COUNT=0
declare -a FORMATTED_PROXY_LIST=()

# ==============================================================================
# -- HÀM KẾT NỐI API AN TOÀN ("HỘP ĐEN") --
# ==============================================================================
function get_api_data() {
    local url="$1"
    local num_proxies=${#FORMATTED_PROXY_LIST[@]}
    
    while true; do # Vòng lặp này sẽ chạy cho đến khi có kết quả hợp lệ
        if (( num_proxies > 0 && FAILED_PROXY_COUNT >= num_proxies )); then
            echo -e "\n   [!] Tất cả ${num_proxies} proxies đều thất bại. Tạm dừng 5 giây và thử lại từ đầu..."
            sleep 5
            FAILED_PROXY_COUNT=0
            PROXY_INDEX=0
        fi

        local curl_cmd=("curl" "--silent" "--max-time" "20" "-w" "\n%{http_code}")
        local proxy_status="IP Gốc"
        if (( num_proxies > 0 )); then
            curl_cmd+=("--proxy" "${FORMATTED_PROXY_LIST[$PROXY_INDEX]}")
            proxy_status="Proxy ${PROXY_INDEX}/${num_proxies}"
        fi
        curl_cmd+=("$url")
        
        # In trạng thái TRƯỚC khi thực hiện kết nối
        printf "\r   [+] Quét trang... | Đã thu thập: %-5s | Kết nối: %-12s" "${#collected_ids[@]}" "$proxy_status"

        local response_with_code=$("${curl_cmd[@]}")
        local http_code=$(echo "$response_with_code" | tail -n1)
        local response_body=$(echo "$response_with_code" | sed '$d')

        if [[ "$http_code" == "200" ]]; then
            FAILED_PROXY_COUNT=0 # Reset bộ đếm lỗi khi thành công
            echo "$response_body" # Trả về dữ liệu thành công
            return 0 # Thoát hàm với mã thành công
        else
            local error_reason="Lỗi (Mã: ${http_code:-000})"
            if [[ "$http_code" == "429" ]]; then error_reason="Rate Limit"; fi

            if (( num_proxies > 0 )); then
                echo -e "\n   [!] Proxy #${PROXY_INDEX} thất bại (${error_reason}). Chuyển proxy tiếp theo..."
                ((FAILED_PROXY_COUNT++))
                ((PROXY_INDEX = (PROXY_INDEX + 1) % num_proxies))
                sleep 1
            else
                echo -e "\n   [!] IP Gốc thất bại (${error_reason}). Tạm dừng 60 giây và thử lại..."
                sleep 60
            fi
        fi
    done
}

# ==============================================================================
# -- LOGIC QUÉT CHÍNH --
# ==============================================================================
function run_scanner() {
    echo "SCANNER: Bắt đầu thực thi logic 'Precision Scan'..."

    # Reset và xử lý proxy
    FORMATTED_PROXY_LIST=()
    PROXY_INDEX=0
    FAILED_PROXY_COUNT=0
    if [[ ${#PROXY_LIST[@]} -gt 0 && -n "${PROXY_LIST[0]}" ]]; then
        echo "SCANNER: Đang xử lý ${#PROXY_LIST[@]} proxy từ config..."
        for proxy_string in "${PROXY_LIST[@]}"; do
            IFS=':' read -r -a parts <<< "$proxy_string"; local formatted_proxy=""
            if [[ ${#parts[@]} -eq 2 ]]; then formatted_proxy="http://${parts[0]}:${parts[1]}";
            elif [[ ${#parts[@]} -eq 4 ]]; then formatted_proxy="http://${parts[2]}:${parts[3]}@${parts[0]}:${parts[1]}"; fi
            if [[ -n "$formatted_proxy" ]]; then FORMATTED_PROXY_LIST+=("$formatted_proxy"); fi
        done
        echo "   ✅ Đã xử lý ${#FORMATTED_PROXY_LIST[@]} proxy hợp lệ. Script sẽ CHỈ dùng proxy."
    else
        echo "SCANNER: Không có proxy trong cấu hình, script sẽ dùng IP gốc."
    fi

    local OUTPUT_FILE="${OUTPUT_DIR}/${OUTPUT_FILE_NAME}"; local MIN_P=$(awk "BEGIN {print ${MIN_PLAYER_PERCENTAGE}/100}"); local MAX_P=$(awk "BEGIN {print ${MAX_PLAYER_PERCENTAGE}/100}")
    declare -g -a collected_ids=() # Khai báo mảng toàn cục để hàm con có thể thấy

    if [[ ! -d "/storage/emulated/0" ]]; then termux-setup-storage; sleep 3; fi; mkdir -p "$OUTPUT_DIR"
    echo "SCANNER: Cấu hình: Tìm server có ${MIN_PLAYER_PERCENTAGE}% - ${MAX_PLAYER_PERCENTAGE}% người chơi."; echo "-------------------------------------------------"

    local next_cursor=""
    while true; do
        local api_url="https://games.roblox.com/v1/games/${PLACE_ID}/servers/Public?sortOrder=Desc&limit=100"
        if [[ -n "$next_cursor" && "$next_cursor" != "null" ]]; then api_url="${api_url}&cursor=${next_cursor}"; fi
        
        # Gọi "hộp đen" để lấy dữ liệu. Sẽ không đi tiếp cho đến khi có dữ liệu.
        local response_body=$(get_api_data "$api_url")
        
        # Xử lý dữ liệu vừa lấy được
        next_cursor=$(echo "$response_body" | grep -o '"nextPageCursor":"[^"]*"' | sed 's/"nextPageCursor":"//; s/"$//')
        local total_percentage=0; local server_count_on_page=0
        
        while IFS= read -r server; do
            if [[ -z "$server" ]]; then continue; fi
            local playing=$(echo "$server" | grep -o '"playing":[0-9]*' | sed 's/"playing"://'); local max_players=$(echo "$server" | grep -o '"maxPlayers":[0-9]*' | sed 's/"maxPlayers"://')
            if [[ -n "$playing" && -n "$max_players" && "$max_players" -gt 0 ]]; then
                ((server_count_on_page++)); local p_percent=$(awk "BEGIN {print ${playing}/${max_players}}"); total_percentage=$(awk "BEGIN {print ${total_percentage} + ${p_percent}}")
                local is_valid=$(awk -v p="$p_percent" -v min="$MIN_P" -v max="$MAX_P" 'BEGIN {print (p >= min && p <= max)}')
                if [[ "$is_valid" -eq 1 ]]; then
                    local server_id=$(echo "$server" | grep -o '"id":"[^"]*"' | sed 's/"id":"//; s/"$//'); if [[ -n "$server_id" ]]; then collected_ids+=("$server_id"); fi
                fi
            fi
        done < <(echo "$response_body" | awk 'match($0, /"data":\[(.*)\]/, a) { print a[1] }' | sed 's/},{/}\n{/g')
        
        local avg_percent=0; if (( server_count_on_page > 0 )); then avg_percent=$(awk "BEGIN {print ${total_percentage}/${server_count_on_page}}"); fi
        printf "\r   [+] Quét trang... | Page Fill: %5.1f%% | Đã thu thập: %-5s | Kết nối: %-12s" "$(awk "BEGIN{print $avg_percent*100}")" "${#collected_ids[@]}" "Proxy ${PROXY_INDEX}/${#FORMATTED_PROXY_LIST[@]}"

        local should_stop=$(awk -v avg="$avg_percent" -v min="$MIN_P" 'BEGIN {print (avg > 0 && avg < min)}');
        if [[ "$should_stop" -eq 1 ]]; then echo -e "\n   [i] Đã đi qua khu vực server mục tiêu. Dừng quét."; break; fi
        if [[ -z "$next_cursor" || "$next_cursor" == "null" ]]; then echo -e "\n   [i] Đã đến trang cuối cùng. Dừng quét."; break; fi
    done
    
    echo ""; echo "-------------------------------------------------"; echo "SCANNER: Tóm tắt và lưu kết quả..."
    echo "   [+] Đang ghi đè ${#collected_ids[@]} Job ID vào file..."; printf "%s\n" "${collected_ids[@]}" > "$OUTPUT_FILE"
    echo "   ✅ Đã lưu thành công."; echo "   File output: ${OUTPUT_FILE}"
}

# ==============================================================================
# -- VÒNG LẶP CHÍNH CỦA LAUNCHER --
# ==============================================================================
while true; do
    clear; echo "================================================="
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] LAUNCHER: Bắt đầu chu kỳ mới..."
    echo "   [+] Đang tải về cấu hình từ: ${CONFIG_URL}"
    
    if curl -sL "$CONFIG_URL" -o "$REMOTE_CONFIG_FILE"; then
        sed -i 's/\r$//' "$REMOTE_CONFIG_FILE"; source "$REMOTE_CONFIG_FILE"
        if [[ -z "${PLACE_ID:-}" || -z "${SCAN_INTERVAL_SECONDS:-}" || -z "${OUTPUT_DIR:-}" ]]; then
            echo "   ❌ Lỗi: Cấu hình tải về không hợp lệ."; echo "      Sẽ thử lại sau 60 giây."; sleep 60; continue
        fi
        echo "   ✅ Tải và xác thực cấu hình thành công."; run_scanner; echo "================================================="
        echo "LAUNCHER: Chu kỳ quét đã hoàn tất."; echo "Sẽ tải lại cấu hình và chạy lại sau ${SCAN_INTERVAL_SECONDS} giây."; sleep "$SCAN_INTERVAL_SECONDS"
    else
        echo "   ❌ Lỗi: Không thể tải file cấu hình. Sẽ thử lại sau 30 giây."; sleep 30
    fi
done

