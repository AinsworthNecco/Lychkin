-- Các service cần thiết
local TeleportService = game:GetService("TeleportService")
local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local CoreGui = game:GetService("CoreGui")
local Lighting = game:GetService("Lighting")
local SoundService = game:GetService("SoundService")
local RunService = game:GetService("RunService")

-- --- Cấu hình Script ---
local placeId = game.PlaceId
local currentJobId = game.JobId

local DEFAULT_WAIT_MINUTES = 10
local minPlayerPercentage = 0.50
local maxPlayerPercentageLimit = 0.90
local waitTimeBetweenFullScans = 7
local waitTimeBetweenPageFetches = 0.75
local baseRetryDelay = 1
local maxRetryDelay = 16

local PLATFORM_VERTICAL_OFFSET = 0
local SERVER_HISTORY_FILENAME = "server_hop_history.txt"
local SERVER_HOP_GUI_NAME = "ServerHopStatusGUI"
local AFK_PLATFORM_NAME = "MySafeAFKPlatform"
local STATIC_HEAD_ANCHOR_PART_NAME = "AFK_HeadAnchor_StaticCam"
local STATIC_BLACK_SCREEN_PART_NAME = "AFK_BlackScreen_StaticCam"

-- --- Setting (Cài đặt Tính năng) ---
local SETTINGS = {
    enableSafePlatform = true,
    enableStaticAfkView = true,
    enableGraphicsOptimization = true,
    enableServerHopLogic = true,
    enableFileHistory = true,
    enableDonateResetCountdown = true,
    targetFps = 7,
    -- [[ MỚI: CHỌN CHẾ ĐỘ HIỂN THỊ ]] --
    -- 1 = Hiển thị số đếm ngược (Text Countdown)
    -- 2 = Hiển thị màn hình màu nhấp nháy (Color Flash)
    countdownDisplayMode = 2
}
-- --- Kết thúc Setting ---

-- --- [[ MỚI ]] Bảng màu Neon cho các trạng thái ---
local NEON_COLORS = {
    GREEN = Color3.fromRGB(10, 255, 20),
    YELLOW = Color3.fromRGB(255, 255, 0),
    BLUE = Color3.fromRGB(0, 150, 255),
    RED = Color3.fromRGB(255, 20, 20)
}

-- --- Kiểm tra và gán hàm đọc/ghi file ---
local canAccessFiles = false
local writefile_func, readfile_func
if SETTINGS.enableFileHistory then
    pcall(function()
        if writefile and readfile then canAccessFiles, writefile_func, readfile_func = true, writefile, readfile; print("[FileIO] Quyền file có sẵn.") else print("[FileIO] Quyền file KHÔNG có sẵn.") end
    end)
else
    print("[FileIO] Lịch sử file bị TẮT.")
end


-- --- [[ ĐÃ THAY ĐỔI ]] UI Chính (Hỗ trợ cả 2 chế độ) ---
local playerGui = LocalPlayer:WaitForChild("PlayerGui")
local statusScreenGui = playerGui:FindFirstChild(SERVER_HOP_GUI_NAME)
if statusScreenGui then statusScreenGui:Destroy() end
statusScreenGui = Instance.new("ScreenGui")
statusScreenGui.Name = SERVER_HOP_GUI_NAME
statusScreenGui.ResetOnSpawn, statusScreenGui.ZIndexBehavior, statusScreenGui.IgnoreGuiInset = false, Enum.ZIndexBehavior.Sibling, true
statusScreenGui.Parent = playerGui

-- Frame cho chế độ MÀU
local statusFrame = Instance.new("Frame")
statusFrame.Name = "StatusFrame"
statusFrame.Size = UDim2.new(1, 0, 1, 0)
statusFrame.BackgroundColor3, statusFrame.BorderSizePixel = NEON_COLORS.GREEN, 0
statusFrame.BackgroundTransparency = 1 -- Ban đầu trong suốt
statusFrame.Parent = statusScreenGui

-- TextLabel cho chế độ SỐ
local FIXED_TEXT_SIZE = 50
local statusTextLabel = Instance.new("TextLabel")
statusTextLabel.Name = "StatusLabel"
statusTextLabel.Size = UDim2.new(0.9, 0, 0, FIXED_TEXT_SIZE + 40)
statusTextLabel.Position = UDim2.new(0.5, 0, 0.5, 0); statusTextLabel.AnchorPoint = Vector2.new(0.5, 0.5)
statusTextLabel.BackgroundTransparency = 1; statusTextLabel.TextColor3 = Color3.new(1, 1, 1)
statusTextLabel.Font = Enum.Font.SourceSansSemibold; statusTextLabel.TextScaled = false
statusTextLabel.TextSize = FIXED_TEXT_SIZE; statusTextLabel.TextXAlignment, statusTextLabel.TextYAlignment = Enum.TextXAlignment.Center, Enum.TextYAlignment.Center
statusTextLabel.TextWrapped = true; statusTextLabel.Text = "..."
statusTextLabel.Parent = statusScreenGui


-- --- [[ ĐÃ THAY ĐỔI ]] Hàm cập nhật UI chung ---
local function updateDisplay(state, message)
    print("[UI] ("..tostring(state)..") " .. tostring(message))
    
    if SETTINGS.countdownDisplayMode == 1 then -- Chế độ VĂN BẢN
        if statusTextLabel and statusTextLabel.Parent then
            statusTextLabel.Text = tostring(message)
            if state == "ERROR" then statusTextLabel.TextColor3 = NEON_COLORS.YELLOW else statusTextLabel.TextColor3 = NEON_COLORS.GREEN end
        end
    elseif SETTINGS.countdownDisplayMode == 2 then -- Chế độ MÀU
        if statusFrame and statusFrame.Parent then
             -- Chỉ hiện màu nền cho các trạng thái quan trọng, không phải lúc đếm ngược
            if state == "ERROR" then
                statusFrame.BackgroundColor3 = NEON_COLORS.YELLOW
                statusFrame.BackgroundTransparency = 0.5
            elseif state == "SUCCESS" then
                statusFrame.BackgroundColor3 = NEON_COLORS.GREEN
                statusFrame.BackgroundTransparency = 0.5
            else -- Ẩn đi cho các trạng thái thông tin khác
                statusFrame.BackgroundTransparency = 1
            end
        end
    end
end

-- --- Hàm xử lý file cho LỊCH SỬ server ---
local serverHistoryCache = {}
local function loadServerHistory()
    if not canAccessFiles then return {} end
    local historySet = {}; local s, c = pcall(readfile_func, SERVER_HISTORY_FILENAME)
    if s and c then for line in string.gmatch(c,"[^".."\r\n".."]+") do local tL=line:match("^%s*(.-)%s*$") if tL and #tL>0 then historySet[tL]=true;end end end
    serverHistoryCache=historySet; return historySet
end
local function addJobIdToHistoryAndSave(jId)
    if not jId or not canAccessFiles then return end
    serverHistoryCache[jId]=true; local l={}; for id in pairs(serverHistoryCache)do table.insert(l,id)end
    pcall(writefile_func,SERVER_HISTORY_FILENAME,table.concat(l,"\n"))
end

-- --- Hàm Tạo Platform An Toàn ---
local function createSafePlatform()
    updateDisplay("INFO", "Đang tạo platform...")
    if game.Workspace:FindFirstChild(AFK_PLATFORM_NAME) then updateDisplay("INFO", "Platform đã có."); return end
    local p=Instance.new("Part");p.Name=AFK_PLATFORM_NAME;p.Anchored=true;p.CanCollide=true;p.Size=Vector3.new(20000,40,20000);p.Color=Color3.fromRGB(50,50,50);p.Transparency=0;
    local char=LocalPlayer.Character; local hum=char and char:FindFirstChildOfClass("Humanoid"); local hrp=char and char:FindFirstChild("HumanoidRootPart")
    if hum and hrp then local hrpP=hrp.Position;local hrpSY=hrp.Size.Y;local hipH=hum.HipHeight;local fCIY=hrpP.Y-(hrpSY/2)-hipH;local pTTY=fCIY-PLATFORM_VERTICAL_OFFSET;local pCY=pTTY-(p.Size.Y/2);p.Position=Vector3.new(hrpP.X,pCY,hrpP.Z); else p.Position=Vector3.new(0,-30-PLATFORM_VERTICAL_OFFSET,0); end
    p.Parent=game.Workspace; updateDisplay("SUCCESS", "Platform đã tạo.");
end

-- --- Hàm Thiết Lập View AFK Tĩnh ---
local function setupStaticAfkView()
    updateDisplay("INFO", "Thiết lập view AFK tĩnh...")
    local player = LocalPlayer; local character = player.Character or player.CharacterAdded:Wait()
    if not character then return end
    local head = character:WaitForChild("Head", 10); if not head then return end
    local camera = workspace.CurrentCamera; if not camera then return end
    local staticHeadAnchor = workspace:FindFirstChild(STATIC_HEAD_ANCHOR_PART_NAME) or Instance.new("Part"); staticHeadAnchor.Name=STATIC_HEAD_ANCHOR_PART_NAME; staticHeadAnchor.Size=Vector3.new(0.1,0.1,0.1); staticHeadAnchor.Transparency=1; staticHeadAnchor.CanCollide=false; staticHeadAnchor.Parent=workspace
    staticHeadAnchor.CFrame = CFrame.new(head.Position); staticHeadAnchor.Anchored = true
    local blackTarget = workspace:FindFirstChild(STATIC_BLACK_SCREEN_PART_NAME) or Instance.new("Part"); blackTarget.Name=STATIC_BLACK_SCREEN_PART_NAME; blackTarget.Size=Vector3.new(2500,2500,10); blackTarget.Color=Color3.new(0,0,0); blackTarget.CanCollide=false; blackTarget.Parent=workspace
    local eastPositionFromAnchor = staticHeadAnchor.Position + Vector3.new(150,0,0); blackTarget.CFrame=CFrame.new(eastPositionFromAnchor); blackTarget.Anchored=true
    camera.CameraType=Enum.CameraType.Scriptable; camera.CFrame=CFrame.new(staticHeadAnchor.Position,blackTarget.Position); camera.Focus=blackTarget.CFrame
    updateDisplay("SUCCESS", "View AFK tĩnh đã thiết lập.")
end

-- --- Script Tối Ưu Hóa Đồ Họa ---
local function optimizeGraphics()
    updateDisplay("INFO", "Bắt đầu tối ưu đồ họa...")
    if SETTINGS.enableSafePlatform then createSafePlatform(); end; task.wait(0.1)
    local sP, eP = pcall(function()
        local itemsToDel={}; for _,item in pairs(game.Workspace:GetChildren()) do
            local keep = (LocalPlayer.Character and item.Name==LocalPlayer.Character.Name) or (item==workspace.CurrentCamera) or (SETTINGS.enableSafePlatform and item.Name==AFK_PLATFORM_NAME) or (SETTINGS.enableStaticAfkView and (item.Name==STATIC_HEAD_ANCHOR_PART_NAME or item.Name==STATIC_BLACK_SCREEN_PART_NAME))
            if not keep then table.insert(itemsToDel,item) end
        end
        for _,item in ipairs(itemsToDel) do pcall(function() item:Destroy() end) end
        Lighting.GlobalShadows,Lighting.Brightness,Lighting.Ambient,Lighting.OutdoorAmbient,Lighting.ExposureCompensation=false,0,Color3.new(0,0,0),Color3.new(0,0,0),-2;
        pcall(function() Lighting.Atmosphere:Destroy() end); pcall(function() Lighting.Sky:Destroy() end)
        if LocalPlayer.PlayerGui then for _,gui in pairs(LocalPlayer.PlayerGui:GetChildren()) do if gui.Name~=SERVER_HOP_GUI_NAME then pcall(function() gui:Destroy() end) end end end
        local sO=settings(); if sO and sO.Rendering then sO.Rendering.QualityLevel=Enum.QualityLevel.Level01; pcall(function() if RunService:IsClient() then RunService:Set3dRenderingEnabled(false) end end) end
        SoundService.RespectFilteringEnabled,SoundService.AmbientReverb=true,Enum.ReverbType.NoReverb; for _,sound in pairs(game:GetDescendants())do if sound:IsA("Sound") then sound.Volume=0;sound:Stop() end end
        updateDisplay("SUCCESS", "Đồ họa đã được tối ưu.");
    end)
    if not sP then updateDisplay("ERROR", "Lỗi khi tối ưu đồ họa.") end
end

-- --- Logic Tìm Server (Dùng HttpGet) ---
local chosenServer = nil; local serversUrlBase = "https://games.roblox.com/v1/games/" .. placeId .. "/servers/Public?sortOrder=Asc&limit=100"
function searchForServer()
    if not SETTINGS.enableFileHistory then serverHistoryCache = {} else loadServerHistory() end
    local histC=0;for _ in pairs(serverHistoryCache)do histC=histC+1 end
    updateDisplay("INFO", string.format("Bắt đầu tìm server... (Tránh %d)",histC+1))
    
    local sLActive=true; chosenServer=nil
    while sLActive and not chosenServer do
        local nextCur=nil; updateDisplay("INFO", "Đang quét danh sách server...")
        local allScanned=false
        while not allScanned and not chosenServer do
            local pAtt=0;local maxAtt=4;local pFetched=false;local curRetry=baseRetryDelay
            while not pFetched and pAtt<maxAtt do
                pAtt=pAtt+1;if pAtt>1 then updateDisplay("INFO", string.format("Thử lại (%d/%d)...",pAtt,maxAtt));task.wait(curRetry);curRetry=math.min(curRetry*2,maxRetryDelay) end
                local s,d = pcall(game.HttpGet, game, serversUrlBase .. (nextCur and "&cursor="..nextCur or ""), true)
                if s then
                    pFetched=true;local sListD=HttpService:JSONDecode(d)
                    if sListD and sListD.data then local pSuitS={};
                        for _,sInf in ipairs(sListD.data) do if not(sInf.id==currentJobId or serverHistoryCache[sInf.id])then if sInf.playing and sInf.maxPlayers and sInf.maxPlayers>0 then local pR=sInf.playing/sInf.maxPlayers if pR>=minPlayerPercentage and pR<maxPlayerPercentageLimit and sInf.playing<sInf.maxPlayers then table.insert(pSuitS,sInf)end end end end
                        if #pSuitS>0 then chosenServer=pSuitS[math.random(1,#pSuitS)];allScanned=true;break end
                        nextCur=sListD.nextPageCursor;if not nextCur then allScanned=true; end
                    else updateDisplay("ERROR", "Dữ liệu server trả về bị lỗi.") end
                else updateDisplay("ERROR", "Lỗi API khi lấy danh sách server.");if pAtt>=maxAtt then allScanned=true end end
            end
            if chosenServer or allScanned then break end; task.wait(waitTimeBetweenPageFetches)
        end
        if chosenServer then updateDisplay("SUCCESS", string.format("ĐÃ CHỌN SERVER!"));sLActive=false
        elseif allScanned then updateDisplay("INFO", string.format("Không tìm thấy server phù hợp. Chờ %ds.", waitTimeBetweenFullScans)); task.wait(waitTimeBetweenFullScans) end
    end
    if chosenServer then
        updateDisplay("SUCCESS", "Chuẩn bị dịch chuyển..."); addJobIdToHistoryAndSave(currentJobId); task.wait(1)
        local sTP,eTP=pcall(TeleportService.TeleportToPlaceInstance, TeleportService, placeId, chosenServer.id, LocalPlayer)
        if not sTP then updateDisplay("ERROR", "Lỗi dịch chuyển! Thử lại..."); serverHistoryCache[chosenServer.id]=true;chosenServer=nil;task.wait(5);searchForServer() end
    else updateDisplay("ERROR", "Không thể tìm thấy server phù hợp. Dừng lại.") end
end

-- --- [[ ĐÃ THAY ĐỔI ]] Quản lý Countdown và Donate ---
local countdownShouldReset = false; local currentCountdownThread = nil
local function performCountdownThenSearch(minutesToWait)
    if not minutesToWait or minutesToWait <= 0 then updateDisplay("ERROR", "Thời gian chờ lỗi."); searchForServer(); return end
    
    -- Xóa các UI không liên quan trước khi bắt đầu vòng lặp
    if SETTINGS.countdownDisplayMode == 1 then statusFrame.BackgroundTransparency = 1 else statusTextLabel.Text = "" end

    local totalS = minutesToWait * 60
    for i = totalS, 0, -1 do
        if countdownShouldReset and SETTINGS.enableDonateResetCountdown then
            countdownShouldReset = false; updateDisplay("SUCCESS", "Donate! Reset thời gian.");
            startInitialCountdown(); return
        end

        -- Xử lý hiển thị mỗi giây dựa trên chế độ
        if SETTINGS.countdownDisplayMode == 1 then
            statusTextLabel.Text = string.format("%02d:%02d", math.floor(i/60), i%60)
            statusTextLabel.TextColor3 = Color3.new(1,1,1) -- Màu trắng cho dễ nhìn
        else -- Chế độ 2
            statusFrame.BackgroundColor3 = (i % 2 == 0) and NEON_COLORS.BLUE or NEON_COLORS.RED
            statusFrame.BackgroundTransparency = 0.6
        end
        
        task.wait(1)
    end
    
    updateDisplay("SUCCESS", "Hết giờ! Bắt đầu tìm server..."); searchForServer()
end

function startInitialCountdown()
    updateDisplay("INFO", "Bắt đầu chu trình...")
    if currentCountdownThread and coroutine.status(currentCountdownThread) ~= "dead" then pcall(coroutine.close, currentCountdownThread); currentCountdownThread = nil end
    currentCountdownThread = coroutine.create(function()
        local s, e = pcall(performCountdownThenSearch, DEFAULT_WAIT_MINUTES)
        if not s then updateDisplay("ERROR", "Lỗi Coroutine. Thử lại sau 5s..."); task.wait(5); if SETTINGS.enableServerHopLogic then startInitialCountdown() end end
    end)
    coroutine.resume(currentCountdownThread)
end

-- --- Khởi chạy Script ---
updateDisplay("INFO", "Đang khởi tạo ServerHop...")
task.wait(0.2)
if type(setfpscap) == "function" and SETTINGS.targetFps and SETTINGS.targetFps > 0 then task.spawn(function() while task.wait() do pcall(setfpscap, SETTINGS.targetFps) end end) end

updateDisplay("INFO", "Chờ game tải trong 30 giây...")
task.wait(30)
updateDisplay("INFO", "Hết thời gian chờ. Bắt đầu thiết lập...")

if SETTINGS.enableSafePlatform then createSafePlatform() end
if SETTINGS.enableStaticAfkView then setupStaticAfkView() end
if SETTINGS.enableGraphicsOptimization then optimizeGraphics() end

if SETTINGS.enableServerHopLogic then
    startInitialCountdown()
    if SETTINGS.enableDonateResetCountdown then
        local leaderstats = LocalPlayer:WaitForChild("leaderstats",15)
        if leaderstats then local raised = leaderstats:WaitForChild("Raised",15)
            if raised then local lastR=raised.Value; raised.Changed:Connect(function(nV) if nV>lastR then lastR=nV;countdownShouldReset=true; end end) end
        end
    end
else
    updateDisplay("INFO", "Logic Server Hop TẮT. Script đã hoàn thành.")
end
print("[MainInit] Script đã hoàn tất khởi chạy chính.")
