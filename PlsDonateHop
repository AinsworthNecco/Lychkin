-- =========================================================================================
--                                   SCRIPT AFK & SERVER HOP
--                                        PHIÊN BẢN CUỐI CÙNG
-- =========================================================================================

-- Các service cần thiết
local TeleportService = game:GetService("TeleportService")
local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local CoreGui = game:GetService("CoreGui")
local Lighting = game:GetService("Lighting")
local SoundService = game:GetService("SoundService")
local RunService = game:GetService("RunService")

-- --- Cấu hình Script ---
local placeId = game.PlaceId
local currentJobId = game.JobId

local DEFAULT_WAIT_MINUTES = 10
local minPlayerPercentage = 0.50
local maxPlayerPercentageLimit = 0.90
local waitTimeBetweenFullScans = 7
local waitTimeBetweenPageFetches = 0.75
local baseRetryDelay = 1
local maxRetryDelay = 16

local PLATFORM_VERTICAL_OFFSET = 0
local SERVER_HISTORY_FILENAME = "server_hop_history.txt"
local SERVER_HOP_GUI_NAME = "ServerHopStatusGUI"
local AFK_PLATFORM_NAME = "MySafeAFKPlatform"
local STATIC_HEAD_ANCHOR_PART_NAME = "AFK_HeadAnchor_StaticCam"
local STATIC_BLACK_SCREEN_PART_NAME = "AFK_BlackScreen_StaticCam"

local FIXED_TEXT_SIZE = 50

-- --- Setting (Cài đặt Tính năng) ---
local SETTINGS = {
    -- Cài đặt chính
    enableServerHopLogic = true,        -- true: Kích hoạt toàn bộ logic tìm và chuyển server. false: Script sẽ chỉ thực hiện các tác vụ AFK ban đầu rồi dừng.
    
    -- Cài đặt AFK & Tối ưu
    enableSafePlatform = true,          -- true: Tạo platform an toàn khi AFK. false: Không tạo.
    enableStaticAfkView = true,         -- true: Thiết lập camera tĩnh nhìn vào màn hình đen khi AFK. false: Không thay đổi camera.
    enableGraphicsOptimization = true,  -- true: Tối ưu hóa đồ họa khác (xóa vật thể, ánh sáng...). false: Không tối ưu.
    enableAutoSetLowestGraphics = true, -- [[ MỚI ]] true: Tự động đặt đồ họa xuống mức thấp nhất khi chạy script. false: Không tự động thay đổi.
    
    -- Cài đặt Giới hạn FPS
    enableFpsLimiter = true,            -- true: BẬT tính năng giới hạn FPS. false: TẮT, game sẽ chạy ở FPS mặc định.
    targetFps = 4,                      -- FPS mục tiêu NẾU `enableFpsLimiter` là true.

    -- Cài đặt Lịch sử Server
    enableFileHistory = true,           -- true: Sử dụng file để lưu và tránh các server đã vào. false: Không dùng file.
    enableJoinOldServer = false,        -- true: CHO PHÉP vào lại các server đã có trong lịch sử. false: TRÁNH các server đã có trong lịch sử.
    historyClearThreshold = 100,        -- Tự động xóa file lịch sử nếu có nhiều hơn số server này. Đặt là 0 để không bao giờ tự xóa.

    -- Cài đặt Game (Ví dụ: Pls Donate)
    enableDonateResetCountdown = true,  -- true: Reset thời gian đếm ngược khi có donate. false: Không reset.
}
-- --- Kết thúc Setting ---

-- --- Kiểm tra và gán hàm đọc/ghi file ---
local canAccessFiles = false
local writefile_func, readfile_func

if SETTINGS.enableFileHistory then
    pcall(function()
        if writefile and readfile then
            canAccessFiles = true
            writefile_func = writefile
            readfile_func = readfile
        end
    end)
end

-- --- UI Chính (Thông báo trạng thái) ---
local playerGui = LocalPlayer:WaitForChild("PlayerGui")
local statusScreenGui = playerGui:FindFirstChild(SERVER_HOP_GUI_NAME)
if statusScreenGui then statusScreenGui:Destroy() end
statusScreenGui = Instance.new("ScreenGui", playerGui)
statusScreenGui.Name = SERVER_HOP_GUI_NAME
statusScreenGui.ResetOnSpawn = false
statusScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
statusScreenGui.IgnoreGuiInset = true

local statusTextLabel = Instance.new("TextLabel", statusScreenGui)
statusTextLabel.Name = "StatusLabel"
statusTextLabel.Size = UDim2.new(0.9, 0, 0, FIXED_TEXT_SIZE + 20)
statusTextLabel.Position = UDim2.new(0.5, 0, 0.5, 0)
statusTextLabel.AnchorPoint = Vector2.new(0.5, 0.5)
statusTextLabel.BackgroundTransparency = 1
statusTextLabel.TextColor3 = Color3.fromRGB(255, 87, 51)
statusTextLabel.Font = Enum.Font.SourceSansSemibold
statusTextLabel.TextSize = FIXED_TEXT_SIZE
statusTextLabel.Text = "..."

local function updateStatus(message)
    print("[UI] " .. tostring(message))
    if statusTextLabel and statusTextLabel.Parent then
        statusTextLabel.Text = tostring(message)
    end
end

-- --- Hàm xử lý file cho LỊCH SỬ server ---
local serverHistoryCache = {}
local function loadServerHistory()
    if not canAccessFiles then return {} end
    
    local historySet = {}
    local success, content = pcall(readfile_func, SERVER_HISTORY_FILENAME)
    
    if success and content then 
        local lineCount = 0
        for line in content:gmatch("[^".."\r\n".."]+") do 
            local trimmedLine = line:match("^%s*(.-)%s*$") 
            if trimmedLine and #trimmedLine > 0 then 
                historySet[trimmedLine] = true
                lineCount = lineCount + 1
            end 
        end 

        if SETTINGS.historyClearThreshold > 0 and lineCount >= SETTINGS.historyClearThreshold then
            updateStatus("Xóa lịch sử server do đạt ngưỡng...")
            historySet = {}
            pcall(writefile_func, SERVER_HISTORY_FILENAME, "")
        end
    end
    
    serverHistoryCache = historySet
    return historySet
end

local function addJobIdToHistoryAndSave(jobId)
    if not jobId or not canAccessFiles then return end
    
    serverHistoryCache[jobId] = true
    local lines = {}
    for id in pairs(serverHistoryCache) do table.insert(lines, id) end
    pcall(writefile_func, SERVER_HISTORY_FILENAME, table.concat(lines, "\n"))
end

-- --- Các hàm AFK & Tối ưu ---
local function createSafePlatform()
    if workspace:FindFirstChild(AFK_PLATFORM_NAME) then return end
    updateStatus("Đang tạo platform an toàn...")
    local platform = Instance.new("Part", workspace)
    platform.Name = AFK_PLATFORM_NAME
    platform.Anchored = true
    platform.Size = Vector3.new(20000, 40, 20000)
    platform.Color = Color3.fromRGB(50, 50, 50)
    platform.Position = Vector3.new(0, -100, 0)
    if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
        local hrp = LocalPlayer.Character.HumanoidRootPart
        platform.Position = hrp.Position - Vector3.new(0, hrp.Size.Y / 2 + LocalPlayer.Character.Humanoid.HipHeight + 20, 0)
    end
end

local function setupStaticAfkView()
    local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    local head = character:WaitForChild("Head", 10)
    if not head then return end

    updateStatus("Thiết lập view AFK tĩnh...")
    local camera = workspace.CurrentCamera
    camera.CameraType = Enum.CameraType.Scriptable
    
    local blackScreen = workspace:FindFirstChild(STATIC_BLACK_SCREEN_PART_NAME) or Instance.new("Part")
    blackScreen.Name = STATIC_BLACK_SCREEN_PART_NAME
    blackScreen.Parent = workspace
    blackScreen.Anchored = true
    blackScreen.Size = Vector3.new(10, 10, 1)
    blackScreen.Color = Color3.new(0, 0, 0)
    blackScreen.CFrame = head.CFrame * CFrame.new(0, 0, -5)
    
    camera.CFrame = CFrame.new(head.Position, blackScreen.Position)
end

local function optimizeGraphics()
    updateStatus("Bắt đầu tối ưu đồ họa phụ...")
    -- Tối ưu Lighting
    Lighting.GlobalShadows = false
    Lighting.Brightness = 0
    Lighting.Ambient = Color3.new(0,0,0)
    Lighting.OutdoorAmbient = Color3.new(0,0,0)
    pcall(function() if Lighting:FindFirstChild("Atmosphere") then Lighting.Atmosphere:Destroy() end end)
    pcall(function() if Lighting:FindFirstChild("Sky") then Lighting.Sky:Destroy() end end)

    -- Tắt âm thanh
    SoundService.AmbientReverb = Enum.ReverbType.NoReverb
    for _, sound in pairs(workspace:GetDescendants()) do
        if sound:IsA("Sound") then
            sound.Volume = 0
        end
    end
    -- Tắt 3D rendering nếu có thể (tùy executor)
    pcall(function() if RunService:IsClient() then RunService:Set3dRenderingEnabled(false) end end)
    updateStatus("Đã tối ưu đồ họa phụ.")
end

-- --- Hàm Tự Động Đặt Đồ Họa Thấp Nhất ---
local function autoSetLowestGraphics()
    updateStatus("Kiểm tra cài đặt đồ họa...")
    local success, settingsSvc = pcall(settings) -- settings() là hàm global, dùng pcall cho an toàn

    if success and settingsSvc and settingsSvc.Rendering then
        local currentLevel = settingsSvc.Rendering.QualityLevel
        print("[Graphics] Mức đồ họa hiện tại: " .. tostring(currentLevel))

        if currentLevel ~= Enum.QualityLevel.Level01 then
            print("[Graphics] Đồ họa chưa ở mức thấp nhất. Đang đặt thành Level 1...")
            updateStatus("Tự động hạ đồ họa...")
            settingsSvc.Rendering.QualityLevel = Enum.QualityLevel.Level01
            task.wait(0.1) -- Chờ một chút để setting áp dụng
            print("[Graphics] Đồ họa đã được đặt thành Level 1.")
        else
            print("[Graphics] Đồ họa đã ở mức thấp nhất. Bỏ qua.")
        end
    else
        warn("[Graphics] Không thể truy cập dịch vụ settings().Rendering để thay đổi đồ họa.")
    end
end


-- --- Hàm Thiết Lập Giới Hạn FPS ---
local function applyFpsCap()
    if SETTINGS.enableFpsLimiter and SETTINGS.targetFps and type(SETTINGS.targetFps) == "number" and SETTINGS.targetFps > 0 then
        
        updateStatus("Khóa FPS ở mức: " .. SETTINGS.targetFps)

        task.spawn(function()
            local TargetFPS = SETTINGS.targetFps
            local desiredFrameTime = 1 / TargetFPS

            while true do
                local t0 = tick()
                RunService.Heartbeat:Wait()
                -- Vòng lặp bận rộn này sẽ "đóng băng" luồng chính, được executor quản lý để giảm CPU
                repeat until (t0 + desiredFrameTime) < tick()
            end
        end)
    else
        updateStatus("FPS không giới hạn.")
    end
end

-- --- Logic Tìm Server ---
local function searchForServer()
    if not SETTINGS.enableFileHistory then serverHistoryCache = {}
    elseif not next(serverHistoryCache) then loadServerHistory() end

    local historyCount = 0; for _ in pairs(serverHistoryCache) do historyCount = historyCount + 1 end
    
    if not SETTINGS.enableJoinOldServer and SETTINGS.enableFileHistory then
        updateStatus(string.format("Tìm server (%.0f%%-%.0f%%). Tránh %d.", minPlayerPercentage*100, maxPlayerPercentageLimit*100, historyCount+1))
    else
        updateStatus(string.format("Tìm server (%.0f%%-%.0f%%).", minPlayerPercentage*100, maxPlayerPercentageLimit*100))
    end

    local chosenServer = nil
    while not chosenServer do
        local nextCursor
        local hasNextPage = true
        while hasNextPage and not chosenServer do
            local requestUrl = "https://games.roblox.com/v1/games/" .. placeId .. "/servers/Public?sortOrder=Asc&limit=100" .. (nextCursor and "&cursor="..nextCursor or "")
            local success, response = pcall(function() return HttpService:JSONDecode(game:HttpGet(requestUrl, true)) end)

            if success and response.data then
                local suitableServers = {}
                for _, serverInfo in ipairs(response.data) do
                    local isVisited = serverHistoryCache[serverInfo.id]
                    local shouldAvoid = serverInfo.id == currentJobId or (isVisited and not SETTINGS.enableJoinOldServer)
                    if not shouldAvoid and serverInfo.playing and serverInfo.maxPlayers and serverInfo.maxPlayers > 0 then
                        local playerRatio = serverInfo.playing / serverInfo.maxPlayers
                        if playerRatio >= minPlayerPercentage and playerRatio < maxPlayerPercentageLimit and serverInfo.playing < serverInfo.maxPlayers then
                            table.insert(suitableServers, serverInfo)
                        end
                    end
                end

                if #suitableServers > 0 then
                    chosenServer = suitableServers[math.random(1, #suitableServers)]
                    break
                end
                
                nextCursor = response.nextPageCursor
                hasNextPage = nextCursor ~= nil
                task.wait(waitTimeBetweenPageFetches)
            else
                task.wait(baseRetryDelay)
                hasNextPage = false -- Dừng quét nếu có lỗi API
            end
        end

        if not chosenServer then
            updateStatus("Không tìm thấy server phù hợp, chờ quét lại...")
            task.wait(waitTimeBetweenFullScans)
        end
    end

    updateStatus("Đang dịch chuyển đến server mới...")
    addJobIdToHistoryAndSave(currentJobId)
    task.wait(1)
    pcall(TeleportService.TeleportToPlaceInstance, TeleportService, placeId, chosenServer.id, LocalPlayer)
end

-- --- Quản lý Countdown ---
local currentCountdownThread = nil
local function performCountdownThenSearch(minutesToWait)
    if not minutesToWait or minutesToWait <= 0 then searchForServer(); return end
    local countdownShouldReset = false
    
    local connection 
    if SETTINGS.enableDonateResetCountdown then
        pcall(function()
            local leaderstats = LocalPlayer:WaitForChild("leaderstats", 15)
            local raised = leaderstats:WaitForChild("Raised", 15)
            local lastRaised = raised.Value
            connection = raised.Changed:Connect(function(newRaised)
                if newRaised > lastRaised then
                    lastRaised = newRaised
                    countdownShouldReset = true
                end
            end)
        end)
    end

    for i = minutesToWait * 60, 0, -1 do
        if countdownShouldReset then
            if connection then connection:Disconnect() end
            updateStatus("Donate! Reset đếm ngược...")
            task.wait(2)
            startInitialCountdown()
            return
        end
        updateStatus(string.format("Tìm server sau: %02d:%02d", math.floor(i/60), i%60))
        task.wait(1)
    end

    if connection then connection:Disconnect() end
    searchForServer()
end

local function startInitialCountdown()
    if currentCountdownThread and coroutine.status(currentCountdownThread) ~= "dead" then
        coroutine.close(currentCountdownThread)
    end
    currentCountdownThread = coroutine.create(function() 
        pcall(performCountdownThenSearch, DEFAULT_WAIT_MINUTES)
    end)
    coroutine.resume(currentCountdownThread)
end

-- --- Khởi chạy Script ---
updateStatus("Khởi tạo...")

-- Áp dụng giới hạn FPS NGAY LẬP TỨC để giảm tải CPU trong lúc chờ
if SETTINGS.enableFpsLimiter then
    applyFpsCap()
end

-- Tự động đặt đồ họa về mức thấp nhất nếu được bật
if SETTINGS.enableAutoSetLowestGraphics then
    autoSetLowestGraphics()
end

updateStatus("Chờ 10 giây cho game tải...")
task.wait(10)
updateStatus("Hết thời gian chờ, bắt đầu các thiết lập...")

if SETTINGS.enableSafePlatform then
    createSafePlatform()
end

if SETTINGS.enableStaticAfkView then
    setupStaticAfkView()
end

if SETTINGS.enableGraphicsOptimization then
    optimizeGraphics()
end

if SETTINGS.enableServerHopLogic then
    updateStatus("Chuẩn bị tìm server...")
    startInitialCountdown()
else
    updateStatus("Treo máy tại server hiện tại. Logic tìm server TẮT.")
end

print("[MainInit] Script đã hoàn tất khởi chạy chính.")
