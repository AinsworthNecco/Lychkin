local SETTINGS = {
    -- =================================================================
    -- CÀI ĐẶT NÉ NGƯỜI CHƠI
    -- =================================================================
    ["EnableAvoidPlayers"] = true, -- Bật/tắt tính năng né tài khoản
    ["AVOID_PLAYERS"] = {
        "HelloPlayer1st",
        "Lychkin01", 
        "Lychkin02",
        "Lychkin03",
        "Lychkin04",
        "Lychkin05",
        "YattaNeco1",
        "YattaNeco2",
        "YattaNeco3",
        "YattaNeco4",
        "YattaNeco5"
    },

    -- =================================================================
    -- CÀI ĐẶT CHỐNG BOT
    -- =================================================================
    ["EnableAntiBotScan"] = true,
    ["BOT_KEYWORDS"] = { "spin", "afk", "restaurant", "jump", "gift", "speed", "develop", "streaming", "live", "game", "#", "dream", "first", "mom", "big" },
    ["DETECTION_THRESHOLD"] = 4, -- Đặt là 1 để kiểm tra. Thay đổi lại sau khi test xong.

    -- =================================================================
    -- CÀI ĐẶT SERVER HOP & AFK
    -- =================================================================
    ["WaitMinutes"] = 10,
    ["MinPlayerPercentage"] = 0.50,
    ["MaxPlayerPercentage"] = 0.99,
    ["MaxServerHistorySize"] = 500, -- Xóa lịch sử server sau khi đã lưu X server. Đặt là 0 để tắt.

    -- Kiểm tra số người chơi định kỳ
    ["EnablePlayerCountCheck"] = true, -- Bật/tắt kiểm tra số người chơi mỗi phút.
    ["MinPlayerThreshold"] = 15,       -- Nếu người chơi trong server ít hơn số này, sẽ tự động chuyển.

    -- Bật/Tắt các tính năng chính
    ["EnableServerHop"] = true,
    ["EnableSafePlatform"] = true,
    ["EnableStaticAfkView"] = true,
    ["EnableDonateReset"] = true,
    ["EnableAutoReconnect"] = true,
    
    -- Cài đặt Thông Báo Donate qua Discord
    ["EnableDiscordWebhook"] = true,
    ["WebhookURL"] = "https://discord.com/api/webhooks/1397368466947969147/HbncMuT0ETe6_5q_kKGzkdd7guLfiGqvewr3WuBFfHAxKBJo3TA7R6ad2ex31YkBHo75",
    ["WebhookColor"] = 16738740,
    ["EnablePingOnDonate"] = true,
    ["PingAmount"] = 1000,
    ["PingUserID"] = "",

    -- Cài đặt Tự Động Trả Lời (Auto Reply)
    ["EnableAutoReply"] = false,
    ["ReplyRadius"] = 25,
    ["ReplyCooldown"] = 10,
    ["ReplyRules"] = {
        { keywords = { "hi", "hello", "hey", "sup", "yo", "wsg", "howdy", "greetings", "wassup", "heya" }, replies = { "Hello!", "Hi there", "Hey!", "Yo", "What's up?", "Heya", "Sup", "Heyo!", "What's good?", "Well hello there." } },
        { keywords = { "only","donate", "pls", "give me", "robux pls", "can i have", "spare", "some robux", "can u donate", "plz donate", "can you give", "i need robux" }, replies = { "Sorry, I'm saving up right now.", "I can't donate at the moment, sorry.", "My robux is pending, can't help sorry.", "Sry, saving for something specific.", "Maybe later, I'm trying to reach my own goal.", "Can't right now, good luck though!", "All my robux is tied up, sorry.", "Sorry, my wallet is on a diet.", "I wish I could, but I'm broke lol." } },
        { keywords = { "bot", "auto", "script", "scripter", "macro", "afk farm", "autoclicker", "you a bot?" }, replies = { "I'm not a bot :)", "lol no, I'm a real player.", "Just vibing, not a bot.", "Beep boop? Nah, just kidding.", "I'm a human, I promise!", "Not a script, just dedicated lol.", "Do I look like a bot to you? :P", "Last time I checked, I still need to sleep. So, not a bot.", "01001110 01101111. (That means 'No' in binary)." } },
        { keywords = { "scam", "fake", "report", "scammer", "this is a scam", "don't trust", "he's a scammer", "is this fake" }, replies = { "This is not a scam.", "I'm not a scammer.", "It's legit, no worries.", "100% legit, my friend.", "No scams here, just good vibes.", "I'm just here to play the game like you.", "Why would you think it's a scam?", "The only thing I'm scamming is time, by playing this game.", "You've got the wrong person, I'm just here to chill." } },
        { keywords = { "why are you", "how are you", "spinning", "jumping", "afk" }, replies = { "Just farming for my goal.", "It's part of the grind.", "Doing this for donations." } },
    },

    -- Cài đặt hiệu năng
    ["EnableGraphicsOptimization"] = true,
    ["EnableCpuOptimization"] = true,
    ["SetSimulationRadiusToZero"] = true,
    ["TargetFps"] = 7,

    -- Cài đặt khác
    ["EnableFileHistory"] = true,
    ["InitialWaitTime"] = 1,

    -- Cài đặt giao diện
    ["EnableCountdownText"] = true,
    ["EnableCountdownColor"] = true,
    ["CountdownFixedColorHex"] = "#000000",
}
-- --- KẾT THÚC CÀI ĐẶT ---

-- Nền tảng an toàn (Anti-Cheat Bypass)
local identifyexecutor = identifyexecutor or function() return 'Unknown' end
local cloneref = (identifyexecutor() ~= "Synapse Z" and not identifyexecutor():find("Codex") and cloneref) or function(o) return o end

-- Các service cần thiết
local TeleportService = cloneref(game:GetService("TeleportService"))
local HttpService = cloneref(game:GetService("HttpService"))
local Players = cloneref(game:GetService("Players"))
local TextChatService = cloneref(game:GetService("TextChatService"))
local Workspace = cloneref(game:GetService("Workspace"))
local Lighting = cloneref(game:GetService("Lighting"))
local SoundService = cloneref(game:GetService("SoundService"))
local RunService = cloneref(game:GetService("RunService"))
local CoreGui = cloneref(game:GetService("CoreGui"))
local LocalPlayer = Players.LocalPlayer

-- --- Cấu hình Script (Không nên thay đổi) ---
local placeId = game.PlaceId; local currentJobId = game.JobId; local waitTimeBetweenFullScans = 7; local waitTimeBetweenPageFetches = 0.75; local baseRetryDelay = 1; local maxRetryDelay = 16; local PLATFORM_VERTICAL_OFFSET = 0; local SERVER_HISTORY_FILENAME = "server_hop_history.txt"; local SERVER_HOP_GUI_NAME = "ServerHopStatusGUI"; local AFK_PLATFORM_NAME = "MySafeAFKPlatform"; local STATIC_HEAD_ANCHOR_PART_NAME = "AFK_HeadAnchor_StaticCam"; local STATIC_BLACK_SCREEN_PART_NAME = "AFK_BlackScreen_StaticCam"; local NEON_COLORS = { GREEN = Color3.fromRGB(10, 255, 20), YELLOW = Color3.fromRGB(255, 255, 0), BLUE = Color3.fromRGB(0, 150, 255), RED = Color3.fromRGB(255, 20, 20) }

-- --- Biến toàn cục ---
local playerGui = LocalPlayer and LocalPlayer:WaitForChild("PlayerGui")
local statusScreenGui, statusTextLabel, statusFrame
local countdownShouldReset = false; local currentCountdownThread = nil; local playerMonitorThread = nil

-- --- Kiểm tra và gán hàm đọc/ghi file ---
local canAccessFiles = false; local writefile_func, readfile_func; if SETTINGS.EnableFileHistory then pcall(function() if writefile and readfile then canAccessFiles, writefile_func, readfile_func = true, writefile, readfile; print("[FileIO] Quyền file có sẵn.") else print("[FileIO] Quyền file KHÔNG có sẵn.") end end) else print("[FileIO] Lịch sử file bị TẮT.") end

-- =================================================================
-- HỆ THỐNG GIAO DIỆN
-- =================================================================

local function createStatusGui() if playerGui:FindFirstChild(SERVER_HOP_GUI_NAME) then playerGui[SERVER_HOP_GUI_NAME]:Destroy() end; statusScreenGui = Instance.new("ScreenGui"); statusScreenGui.Name = SERVER_HOP_GUI_NAME; statusScreenGui.ResetOnSpawn, statusScreenGui.ZIndexBehavior, statusScreenGui.IgnoreGuiInset = false, Enum.ZIndexBehavior.Sibling, true; statusScreenGui.Parent = playerGui; statusFrame = Instance.new("Frame"); statusFrame.Name = "StatusFrame"; statusFrame.Size = UDim2.new(1, 0, 1, 0); statusFrame.BackgroundColor3, statusFrame.BorderSizePixel = NEON_COLORS.GREEN, 0; statusFrame.BackgroundTransparency = 1; statusFrame.ZIndex = 1; statusFrame.Parent = statusScreenGui; local FIXED_TEXT_SIZE = 50; statusTextLabel = Instance.new("TextLabel"); statusTextLabel.Name = "StatusLabel"; statusTextLabel.Size = UDim2.new(0.9, 0, 0, FIXED_TEXT_SIZE + 80); statusTextLabel.Position = UDim2.new(0.5, 0, 0.5, 0); statusTextLabel.AnchorPoint = Vector2.new(0.5, 0.5); statusTextLabel.BackgroundTransparency = 1; statusTextLabel.TextColor3 = Color3.new(1, 1, 1); statusTextLabel.Font = Enum.Font.SourceSansSemibold; statusTextLabel.TextScaled = false; statusTextLabel.TextSize = FIXED_TEXT_SIZE; statusTextLabel.TextXAlignment, statusTextLabel.TextYAlignment = Enum.TextXAlignment.Center, Enum.TextYAlignment.Center; statusTextLabel.TextWrapped = true; statusTextLabel.Text = "..."; statusTextLabel.ZIndex = 2; statusTextLabel.Parent = statusScreenGui end
local function updateDisplay(state, message) task.spawn(function() print("[UI] " .. tostring(message)); if not statusTextLabel or not statusTextLabel.Parent then return end; local stateColor = NEON_COLORS.GREEN; if state == "ERROR" then stateColor = NEON_COLORS.YELLOW elseif state == "BOT_DETECTED" then stateColor = NEON_COLORS.RED end; statusTextLabel.Text = tostring(message); statusTextLabel.TextColor3 = stateColor; if SETTINGS.EnableCountdownColor then if statusFrame and statusFrame.Parent then if state == "SUCCESS" or state == "ERROR" or state == "BOT_DETECTED" then statusFrame.BackgroundColor3 = stateColor; statusFrame.BackgroundTransparency = 0.5 else statusFrame.BackgroundTransparency = 1 end end else if statusFrame then statusFrame.BackgroundTransparency = 1 end end end) end

-- --- Các hàm tiện ích (File, Platform, View, CPU, Graphics) ---
local serverHistoryCache = {}; local function loadServerHistory() if not canAccessFiles then return {} end; local historySet = {}; local s, c = pcall(readfile_func, SERVER_HISTORY_FILENAME); if s and c then for line in string.gmatch(c,"[^".."\r\n".."]+") do local tL=line:match("^%s*(.-)%s*$") if tL and #tL>0 then historySet[tL]=true;end end end; local hS=0;for _ in pairs(historySet)do hS=hS+1 end; local mS=SETTINGS.MaxServerHistorySize; if mS and mS>0 and hS>=mS then print(string.format("[FileIO] Lịch sử server đạt giới hạn (%d/%d). Đang xóa...",hS,mS));if updateDisplay then updateDisplay("INFO","Lịch sử server đầy, đang reset...")end;historySet={};pcall(writefile_func,SERVER_HISTORY_FILENAME,"");print("[FileIO] Lịch sử server đã được xóa.");task.wait(2)end; serverHistoryCache=historySet;return historySet end
local function addJobIdToHistoryAndSave(jId) if not jId or not canAccessFiles then return end; serverHistoryCache[jId]=true; local l={}; for id in pairs(serverHistoryCache)do table.insert(l,id)end; pcall(writefile_func,SERVER_HISTORY_FILENAME,table.concat(l,"\n")) end
local function createSafePlatform() updateDisplay("INFO", "Đang tạo platform..."); if game.Workspace:FindFirstChild(AFK_PLATFORM_NAME) then updateDisplay("INFO", "Platform đã có."); return end; local p=Instance.new("Part");p.Name=AFK_PLATFORM_NAME;p.Anchored=true;p.CanCollide=true;p.Size=Vector3.new(20000,40,20000);p.Color=Color3.fromRGB(50,50,50);p.Transparency=0; local char=LocalPlayer.Character; local hum=char and char:FindFirstChildOfClass("Humanoid"); local hrp=char and char:FindFirstChild("HumanoidRootPart"); if hum and hrp then local hrpP=hrp.Position;local hrpSY=hrp.Size.Y;local hipH=hum.HipHeight;local fCIY=hrpP.Y-(hrpSY/2)-hipH;local pTTY=fCIY-PLATFORM_VERTICAL_OFFSET;local pCY=pTTY-(p.Size.Y/2);p.Position=Vector3.new(hrpP.X,pCY,hrpP.Z); else p.Position=Vector3.new(0,-30-PLATFORM_VERTICAL_OFFSET,0); end; p.Parent=game.Workspace; updateDisplay("SUCCESS", "Platform đã tạo."); end
local function setupStaticAfkView() updateDisplay("INFO", "Thiết lập view AFK tĩnh..."); local player = LocalPlayer; local character = player.Character or player.CharacterAdded:Wait(); if not character then return end; local head = character:WaitForChild("Head", 10); if not head then return end; local camera = workspace.CurrentCamera; if not camera then return end; local staticHeadAnchor = workspace:FindFirstChild(STATIC_HEAD_ANCHOR_PART_NAME) or Instance.new("Part"); staticHeadAnchor.Name=STATIC_HEAD_ANCHOR_PART_NAME; staticHeadAnchor.Size=Vector3.new(0.1,0.1,0.1); staticHeadAnchor.Transparency=1; staticHeadAnchor.CanCollide=false; staticHeadAnchor.Parent=workspace; staticHeadAnchor.CFrame = CFrame.new(head.Position); staticHeadAnchor.Anchored = true; local blackTarget = workspace:FindFirstChild(STATIC_BLACK_SCREEN_PART_NAME) or Instance.new("Part"); blackTarget.Name=STATIC_BLACK_SCREEN_PART_NAME; blackTarget.Size=Vector3.new(2500,2500,10); blackTarget.Color=Color3.new(0,0,0); blackTarget.CanCollide=false; blackTarget.Parent=workspace; local eastPositionFromAnchor = staticHeadAnchor.Position + Vector3.new(150,0,0); blackTarget.CFrame=CFrame.new(eastPositionFromAnchor); blackTarget.Anchored=true; camera.CameraType=Enum.CameraType.Scriptable; camera.CFrame=CFrame.new(staticHeadAnchor.Position,blackTarget.Position); camera.Focus=blackTarget.CFrame; updateDisplay("SUCCESS", "View AFK tĩnh đã thiết lập.") end
local function optimizeForCpu() if not SETTINGS.EnableCpuOptimization then return end; updateDisplay("INFO", "Bắt đầu tối ưu hóa CPU..."); pcall(function() if type(setfpscap) == "function" and SETTINGS.TargetFps and SETTINGS.TargetFps > 0 then print("[CPU-Opt] Giới hạn FPS đang hoạt động ở mức: " .. tostring(SETTINGS.TargetFps)) end; if SETTINGS.SetSimulationRadiusToZero then if LocalPlayer then LocalPlayer.SimulationRadius = 0; print("[CPU-Opt] SimulationRadius đã được đặt về 0.") end end end); updateDisplay("SUCCESS", "Tối ưu hóa CPU hoàn tất.") end
local function optimizeGraphics() updateDisplay("INFO", "Bắt đầu tối ưu đồ họa..."); if SETTINGS.EnableSafePlatform then createSafePlatform(); end; task.wait(0.1); pcall(function() local itemsToDel={}; for _,item in pairs(game.Workspace:GetChildren()) do local keep=(LocalPlayer.Character and item.Name==LocalPlayer.Character.Name)or(item==workspace.CurrentCamera)or(SETTINGS.EnableSafePlatform and item.Name==AFK_PLATFORM_NAME)or(SETTINGS.EnableStaticAfkView and(item.Name==STATIC_HEAD_ANCHOR_PART_NAME or item.Name==STATIC_BLACK_SCREEN_PART_NAME));if not keep then table.insert(itemsToDel,item)end end; for _,item in ipairs(itemsToDel)do pcall(function()item:Destroy()end)end;Lighting.GlobalShadows,Lighting.Brightness,Lighting.Ambient,Lighting.OutdoorAmbient,Lighting.ExposureCompensation=false,0,Color3.new(0,0,0),Color3.new(0,0,0),-2;pcall(function()Lighting.Atmosphere:Destroy()end);pcall(function()Lighting.Sky:Destroy()end); if LocalPlayer.PlayerGui then for _,gui in pairs(LocalPlayer.PlayerGui:GetChildren())do if gui.Name~=SERVER_HOP_GUI_NAME then pcall(function()gui:Destroy()end)end end end;local sO=settings();if sO and sO.Rendering then sO.Rendering.QualityLevel=Enum.QualityLevel.Level01;pcall(function()if RunService:IsClient()then RunService:Set3dRenderingEnabled(false)end end)end;SoundService.RespectFilteringEnabled,SoundService.AmbientReverb=true,Enum.ReverbType.NoReverb;for _,sound in pairs(game:GetDescendants())do if sound:IsA("Sound")then sound.Volume=0;sound:Stop()end end; end); updateDisplay("SUCCESS", "Đồ họa đã được tối ưu."); end

-- --- Logic Tìm Server ---
local chosenServer = nil; local serversUrlBase = "https://games.roblox.com/v1/games/" .. placeId .. "/servers/Public?sortOrder=Asc&limit=100"
function searchForServer() 
    if not SETTINGS.EnableFileHistory then serverHistoryCache = {} else loadServerHistory() end
    local histC=0; for _ in pairs(serverHistoryCache) do histC=histC+1 end
    updateDisplay("INFO", string.format("Bắt đầu tìm server... (Tránh %d)", histC+1))
    local sLActive=true
    chosenServer=nil
    while sLActive and not chosenServer do 
        local nextCur=nil
        updateDisplay("INFO", "Đang quét server...")
        local allScanned=false
        while not allScanned and not chosenServer do 
            local pAtt=0
            local maxAtt=4
            local pFetched=false
            local curRetry=baseRetryDelay
            while not pFetched and pAtt<maxAtt do 
                pAtt=pAtt+1
                if pAtt>1 then 
                    updateDisplay("INFO", string.format("Thử lại (%d/%d)...", pAtt, maxAtt))
                    task.wait(curRetry)
                    curRetry=math.min(curRetry*2, maxRetryDelay) 
                end
                
                -- ================== BẮT ĐẦU NÂNG CẤP V2 ==================
                local success, responseData = pcall(function()
                    local currentUrl = serversUrlBase .. (nextCur and "&cursor=" .. nextCur or "")
                    -- SỬA LỖI: Gọi HttpGet theo cách chuẩn, không truyền 'game' làm tham số
                    local rawData = game:HttpGet(currentUrl, true)
                    return HttpService:JSONDecode(rawData)
                end)

                if success and responseData and responseData.data then
                    pFetched = true
                    local sListD = responseData
                    local pSuitS = {}
                    for _, sInf in ipairs(sListD.data) do
                        if not(sInf.id == currentJobId or serverHistoryCache[sInf.id]) then
                            if sInf.playing and sInf.maxPlayers and sInf.maxPlayers > 0 then
                                local pR = sInf.playing / sInf.maxPlayers
                                if pR >= SETTINGS.MinPlayerPercentage and pR < SETTINGS.MaxPlayerPercentage and sInf.playing < sInf.maxPlayers then
                                    table.insert(pSuitS, sInf)
                                end
                            end
                        end
                    end
                    if #pSuitS > 0 then
                        chosenServer = pSuitS[math.random(1, #pSuitS)]
                        allScanned = true
                        break
                    end
                    nextCur = sListD.nextPageCursor
                    if not nextCur then
                        allScanned = true
                    end
                else
                    updateDisplay("ERROR", "Lỗi API hoặc dữ liệu không hợp lệ.")
                    if pAtt >= maxAtt then
                        allScanned = true
                    end
                end
                -- =================== KẾT THÚC NÂNG CẤP V2 ===================

            end
            if chosenServer or allScanned then break end
            task.wait(waitTimeBetweenPageFetches) 
        end
        if chosenServer then 
            updateDisplay("SUCCESS", "ĐÃ CHỌN SERVER!")
            sLActive=false 
        elseif allScanned then 
            updateDisplay("INFO", string.format("Không tìm thấy. Chờ %ds.", waitTimeBetweenFullScans))
            task.wait(waitTimeBetweenFullScans)
        end 
    end
    if chosenServer then 
        updateDisplay("SUCCESS", "Chuẩn bị dịch chuyển...")
        addJobIdToHistoryAndSave(currentJobId)
        task.wait(1)
        local sTP,eTP=pcall(TeleportService.TeleportToPlaceInstance, TeleportService, placeId, chosenServer.id, LocalPlayer)
        if not sTP then 
            updateDisplay("ERROR", "Lỗi dịch chuyển! Thử lại...")
            serverHistoryCache[chosenServer.id]=true
            chosenServer=nil
            task.wait(5)
            searchForServer() 
        end 
    else 
        updateDisplay("ERROR", "Không thể tìm thấy server. Dừng lại.") 
    end 
end

-- --- Quản lý AFK (Countdown, Donate, Player Count) ---
function startInitialCountdown() 
    updateDisplay("INFO", "Bắt đầu chu trình..."); 
    if currentCountdownThread and coroutine.status(currentCountdownThread) ~= "dead" then pcall(coroutine.close, currentCountdownThread); currentCountdownThread = nil end
    
    local function performCountdownThenSearch(minutesToWait) 
        if not minutesToWait or minutesToWait <= 0 then 
            updateDisplay("ERROR", "Thời gian chờ lỗi.");
            searchForServer();
            return 
        end
        
        if not SETTINGS.EnableCountdownText then 
            if statusTextLabel then statusTextLabel.Text = "" end 
        end
        if not SETTINGS.EnableCountdownColor then 
            if statusFrame then statusFrame.BackgroundTransparency = 1 end 
        end
        
        local totalS = minutesToWait * 60
        for i = totalS, 0, -1 do 
            if countdownShouldReset and SETTINGS.EnableDonateReset then 
                countdownShouldReset = false
                if statusTextLabel then statusTextLabel.Text = "" end
                if statusFrame then statusFrame.BackgroundTransparency = 1 end
                updateDisplay("SUCCESS", "Donate! Reset thời gian.")
                startInitialCountdown()
                return 
            end
            
            if SETTINGS.EnableCountdownText then 
                if statusTextLabel and statusTextLabel.Parent then
                    local currentPlayers = #Players:GetPlayers()
                    local maxPlayers = Players.MaxPlayers
                    
                    local playerCountText = string.format("%d/%d", currentPlayers, maxPlayers)
                    local timerText = string.format("%02d:%02d", math.floor(i/60), i%60)
                    statusTextLabel.Text = string.format("%s\n%s", timerText, playerCountText)
                    statusTextLabel.TextColor3 = Color3.new(1,1,1) 
                end 
            end
            
            if SETTINGS.EnableCountdownColor then 
                if statusFrame and statusFrame.Parent then 
                    local success, color = pcall(Color3.fromHex, SETTINGS.CountdownFixedColorHex or "#FFFFFF")
                    if success then
                        statusFrame.BackgroundColor3 = color
                    else
                        print("[UI] Lỗi mã hex không hợp lệ, sử dụng màu mặc định.")
                        statusFrame.BackgroundColor3 = NEON_COLORS.BLUE 
                    end
                    statusFrame.BackgroundTransparency = 0.6 
                end 
            end
            
            task.wait(1) 
        end
        
        if statusTextLabel then statusTextLabel.Text = "" end
        if statusFrame then statusFrame.BackgroundTransparency = 1 end
        updateDisplay("SUCCESS", "Hết giờ! Bắt đầu tìm server...")
        searchForServer() 
    end
    
    currentCountdownThread = coroutine.create(function() 
        local s,e = pcall(performCountdownThenSearch, SETTINGS.WaitMinutes)
        if not s then 
            updateDisplay("ERROR", "Lỗi Coroutine. Thử lại sau 5s...")
            task.wait(5)
            if SETTINGS.EnableServerHop then startInitialCountdown() end 
        end 
    end)
    coroutine.resume(currentCountdownThread) 
end

-- Hàm kiểm tra số người chơi định kỳ
local function startPlayerCountMonitor()
    if not SETTINGS.EnablePlayerCountCheck or (SETTINGS.MinPlayerThreshold or 0) <= 0 then return end
    if playerMonitorThread and coroutine.status(playerMonitorThread) ~= "dead" then pcall(coroutine.close, playerMonitorThread); playerMonitorThread = nil end

    playerMonitorThread = coroutine.create(function()
        while true do
            task.wait(20) -- Kiểm tra mỗi 60 giây
            if not SETTINGS.EnablePlayerCountCheck or not SETTINGS.EnableServerHop then break end

            local currentPlayers = #Players:GetPlayers()
            if currentPlayers < SETTINGS.MinPlayerThreshold then
                updateDisplay("ERROR", string.format("Server vắng! (%d/%d người)\nĐang tìm server mới...", currentPlayers, SETTINGS.MinPlayerThreshold))
                
                if currentCountdownThread and coroutine.status(currentCountdownThread) ~= "dead" then pcall(coroutine.close, currentCountdownThread); currentCountdownThread = nil end
                if playerMonitorThread and coroutine.status(playerMonitorThread) ~= "dead" then pcall(coroutine.close, playerMonitorThread); playerMonitorThread = nil end
                
                task.wait(3)
                searchForServer()
                break
            else
                print(string.format("[PlayerMonitor] Check OK: %d/%d players.", currentPlayers, SETTINGS.MinPlayerThreshold))
            end
        end
    end)
    coroutine.resume(playerMonitorThread)
end

-- =================================================================
-- HÀM MỚI: KIỂM TRA TÀI KHOẢN CẦN NÉ (CHỈ 1 LẦN)
-- =================================================================
local function checkAvoidPlayersOnce()
    if not SETTINGS.EnableAvoidPlayers or not SETTINGS.AVOID_PLAYERS or #SETTINGS.AVOID_PLAYERS == 0 then
        return false -- Trả về false nếu tính năng bị tắt hoặc danh sách trống
    end

    -- Tạo một set để tra cứu tên người chơi nhanh hơn
    local avoidNamesSet = {}
    for _, name in ipairs(SETTINGS.AVOID_PLAYERS) do
        avoidNamesSet[name] = true
    end

    local playersInServer = Players:GetPlayers()
    for _, player in ipairs(playersInServer) do
        -- Quan trọng: Không kiểm tra chính mình
        if player.Name ~= LocalPlayer.Name and avoidNamesSet[player.Name] then
            updateDisplay("ERROR", string.format("Phát hiện tài khoản '%s'!\nĐang tìm server mới...", player.Name))
            
            task.wait(3)
            searchForServer()
            return true -- Trả về true để báo hiệu rằng đã bắt đầu hop
        end
    end

    print("[AvoidPlayerCheck] Quét 1 lần OK, không phát hiện tài khoản cần né.")
    return false -- Trả về false nếu không tìm thấy ai
end


-- --- Các hàm thiết lập (Reconnect, AutoReply, Webhook) ---
local function setupAutoReconnect() pcall(function() local promptOverlay = game.CoreGui:WaitForChild('RobloxPromptGui'):WaitForChild('promptOverlay'); promptOverlay.ChildAdded:Connect(function(child) if child.Name == 'ErrorPrompt' and child:IsA('Frame') then updateDisplay("ERROR", "Phát hiện lỗi! Đang thử kết nối lại..."); local success, err = pcall(function() TeleportService:Teleport(placeId, LocalPlayer) end); if not success then task.wait(2); repeat TeleportService:Teleport(placeId, LocalPlayer); task.wait(5) until false end end end); updateDisplay("SUCCESS", "Tính năng tự động kết nối lại đã được kích hoạt.") end) end
local function setupAutoReply() if not SETTINGS.EnableAutoReply then return end; local ChatChannel = TextChatService.TextChannels.RBXGeneral; local Cooldowns = {}; local function safeChat(msg) pcall(function() ChatChannel:SendAsync(msg) end) end; Players.PlayerChatted:Connect(function(_, player, message) if not SETTINGS.EnableAutoReply then return end; if player == LocalPlayer then return end; if not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") then return end; if not LocalPlayer.Character or not LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then return end; local distance = (player.Character.HumanoidRootPart.Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude; if distance > SETTINGS.ReplyRadius then return end; if Cooldowns[player] and tick() - Cooldowns[player] < SETTINGS.ReplyCooldown then return end; local lowerMsg = string.lower(message); local replied = false; for _, rule in ipairs(SETTINGS.ReplyRules) do for _, keyword in ipairs(rule.keywords) do if string.find(lowerMsg, keyword) then local reply = rule.replies[math.random(1, #rule.replies)]; task.wait(math.random(1,3)); safeChat(reply); Cooldowns[player] = tick(); replied = true; break end end; if replied then break end end end); updateDisplay("SUCCESS", "Tính năng tự động trả lời đã được kích hoạt.") end
local function setupDiscordWebhook() if not SETTINGS.EnableDiscordWebhook or not SETTINGS.WebhookURL or SETTINGS.WebhookURL == "" then print("[Webhook] Tính năng webhook bị tắt hoặc URL không hợp lệ."); return end; local leaderstats = LocalPlayer:WaitForChild("leaderstats", 30); if not leaderstats then updateDisplay("ERROR", "[Webhook] Không tìm thấy leaderstats sau 30 giây."); return end; local raised = leaderstats:WaitForChild("Raised", 30); if not raised then updateDisplay("ERROR", "[Webhook] Không tìm thấy 'Raised' trong leaderstats."); return end; local lastRaised = raised.Value; local function sendWebhook(amount, total) local pingContent = nil; if SETTINGS.EnablePingOnDonate then if amount >= (SETTINGS.PingAmount or 0) then if SETTINGS.PingUserID and SETTINGS.PingUserID ~= "" then pingContent = string.format("<@%s>", SETTINGS.PingUserID) else pingContent = "@everyone" end end end; local embed = { description = string.format("**%s**\n# +%d\nTOTAL : %d", LocalPlayer.Name, amount, total), color = SETTINGS.WebhookColor }; local payloadData = { embeds = { embed } }; if pingContent then payloadData.content = pingContent end; local payload = HttpService:JSONEncode(payloadData); local req = (syn and syn.request) or (http and http.request) or (fluxus and fluxus.request) or request; if req then pcall(function() req({ Url = SETTINGS.WebhookURL, Method = "POST", Headers = { ["Content-Type"] = "application/json" }, Body = payload }) end) else updateDisplay("ERROR", "[Webhook] Không tìm thấy hàm request để gửi webhook.") end end; raised.Changed:Connect(function(newRaisedValue) local difference = newRaisedValue - lastRaised; if difference > 0 then if SETTINGS.EnableDonateReset then countdownShouldReset = true end; sendWebhook(difference, newRaisedValue) end; lastRaised = newRaisedValue end); updateDisplay("SUCCESS", "Tính năng thông báo donate qua Discord đã được kích hoạt.") end

-- =================================================================
-- HÀM QUÉT BOT
-- =================================================================
local function scanForBots() updateDisplay("INFO", "Bắt đầu quét bot..."); task.wait(2); local _boothlocation; local suc, _shuffled = pcall(function() return Workspace:WaitForChild('MapUI', 5) end); if not suc or not _shuffled then local playerGuiMap = LocalPlayer:WaitForChild("PlayerGui"); if playerGuiMap then local mapUiContainer = playerGuiMap:WaitForChild('MapUIContainer', 5); if mapUiContainer then _boothlocation = mapUiContainer:WaitForChild('MapUI', 5) end end else _boothlocation = _shuffled end; if not _boothlocation then updateDisplay("ERROR", "LỖI: Không tìm thấy MapUI để quét bot."); return 0 end; local boothUI = _boothlocation:WaitForChild("BoothUI"); if not boothUI then updateDisplay("ERROR", "LỖI: Không tìm thấy BoothUI bên trong MapUI."); return 0 end; local currentBotCount = 0; for _, uiFrame in ipairs(boothUI:GetChildren()) do local success, err = pcall(function() 
        local ownerName = uiFrame.Details.Owner.Text; 
        if ownerName ~= "unclaimed" then 
            local boothTextOriginal = uiFrame.Sign.TextLabel.Text
            
            -- NÂNG CẤP: Hiển thị nội dung quét lên UI
            local scanMessage = string.format("Đang quét '%s'\n\"%s\"", ownerName, boothTextOriginal)
            updateDisplay("INFO", scanMessage)
            task.wait(1.5) -- Chờ một chút để có thể đọc
            
            local boothText = string.lower(boothTextOriginal) -- Chuyển sang chữ thường để kiểm tra
            for _, keyword in ipairs(SETTINGS.BOT_KEYWORDS) do 
                if string.find(boothText, keyword) then 
                    currentBotCount = currentBotCount + 1; 
                    local alertMessage = string.format("PHÁT HIỆN BOT #%d\n'%s'", currentBotCount, ownerName); 
                    updateDisplay("BOT_DETECTED", alertMessage); 
                    task.wait(2.5); 
                    break 
                end 
            end 
        end 
    end); if not success then print("[Anti-Bot] Lỗi khi quét gian hàng: " .. tostring(err)) end end; updateDisplay("INFO", "Quét xong. Phát hiện: " .. currentBotCount .. " bot."); task.wait(3); return currentBotCount end

-- =================================================================
-- LOGIC KHỞI CHẠY CHÍNH
-- =================================================================
task.spawn(function()
    pcall(createStatusGui)
    updateDisplay("INFO", "Đang khởi tạo...")
    task.wait(0.5)

    if type(setfpscap) == "function" and SETTINGS.TargetFps and SETTINGS.TargetFps > 0 then task.spawn(function() while task.wait() do pcall(setfpscap, SETTINGS.TargetFps) end end) end
    if SETTINGS.EnableAutoReconnect then task.spawn(setupAutoReconnect) end
    if SETTINGS.EnableAutoReply then task.spawn(setupAutoReply) end

    updateDisplay("INFO", string.format("Chờ game tải trong %d giây...", SETTINGS.InitialWaitTime))
    task.wait(SETTINGS.InitialWaitTime)
    
    updateDisplay("INFO", "Bắt đầu luồng quyết định...")

    if SETTINGS.EnableServerHop then
        -- Bước 1: Quét bot
        local botCount = 0
        if SETTINGS.EnableAntiBotScan then botCount = scanForBots() end

        if SETTINGS.EnableAntiBotScan and botCount >= SETTINGS.DETECTION_THRESHOLD then
            updateDisplay("ERROR", string.format("Phát hiện %d/%d bot!\nĐang tìm server mới...", botCount, SETTINGS.DETECTION_THRESHOLD))
            task.wait(3)
            searchForServer()
        else
            -- Bước 2: Quét tài khoản cần né (chỉ 1 lần)
            local willHopForAvoid = checkAvoidPlayersOnce()

            -- Bước 3: Nếu không hop vì lý do nào ở trên, bắt đầu AFK
            if not willHopForAvoid then
                if SETTINGS.EnableAntiBotScan then updateDisplay("SUCCESS", "Server sạch.\nBắt đầu AFK.") else updateDisplay("INFO", "Bỏ qua quét bot.\nBắt đầu AFK.") end
                task.wait(2)
                
                if SETTINGS.EnableSafePlatform then createSafePlatform() end
                if SETTINGS.EnableStaticAfkView then setupStaticAfkView() end
                if SETTINGS.EnableCpuOptimization then optimizeForCpu() end
                if SETTINGS.EnableGraphicsOptimization then optimizeGraphics() end
                task.spawn(setupDiscordWebhook)
                
                startInitialCountdown()
                startPlayerCountMonitor()
            end
        end
    else
        if SETTINGS.EnableSafePlatform then createSafePlatform() end
        if SETTINGS.EnableStaticAfkView then setupStaticAfkView() end
        if SETTINGS.EnableCpuOptimization then optimizeForCpu() end
        if SETTINGS.EnableGraphicsOptimization then optimizeGraphics() end
        task.spawn(setupDiscordWebhook)
        updateDisplay("INFO", "Server Hop TẮT.\nHoàn thành thiết lập.")
    end
    print("[MainInit] Script đã hoàn tất.")
end)



