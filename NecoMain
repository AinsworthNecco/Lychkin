-- =================================================================
-- Phần 1: CÀI ĐẶT (Chỉ cần chỉnh sửa các giá trị trong phần này)
-- =================================================================
local SETTINGS = {
    -- Cài đặt Server Hop
    ["WaitMinutes"] = 0.2,
    ["MinPlayerPercentage"] = 0.50, -- Tỉ lệ người chơi tối thiểu để vào (VD: 0.5 = 50%)
    ["MaxPlayerPercentage"] = 0.90, -- Tỉ lệ người chơi tối đa để vào (VD: 0.9 = 90%)

    -- Bật/Tắt các tính năng chính
    ["EnableServerHop"] = true,
    ["EnableSafePlatform"] = true,
    ["EnableStaticAfkView"] = true,
    ["EnableDonateReset"] = true,
    ["EnableAutoReconnect"] = true,

    -- Cài đặt hiệu năng
    ["EnableGraphicsOptimization"] = true,
    ["EnableFileHistory"] = true,
    ["TargetFps"] = 15,
    ["InitialWaitTime"] = 10,

    -- Cài đặt giao diện
    ["EnableCountdownText"] = true,
    ["EnableCountdownColor"] = true,
    ["EnableLogGUI"] = true, -- Hiển thị console log trên màn hình cho mobile
}

-- =================================================================
-- Phần 2: LOGIC CHÍNH (Không cần sửa phần bên dưới)
-- =================================================================

-- Bọc toàn bộ script trong pcall để tăng độ ổn định
local success, err = pcall(function()
    -- Các service cần thiết
    local HttpService = game:GetService("HttpService")
    local Players = game:GetService("Players")
    local LocalPlayer = Players.LocalPlayer
    local CoreGui = game:GetService("CoreGui")
    local Lighting = game:GetService("Lighting")
    local SoundService = game:GetService("SoundService")
    local RunService = game:GetService("RunService")
    local TeleportService = game:GetService("TeleportService")

    -- Hàm tiện ích để tạo Instance
    local function CreateInstance(className, properties)
        local instance = Instance.new(className)
        local children = properties["Children"]
        properties["Children"] = nil
        local parent = properties["Parent"]
        properties["Parent"] = nil
        for property, value in pairs(properties) do
            instance[property] = value
        end
        if children then
            for _, child in ipairs(children) do
                child.Parent = instance
            end
        end
        if parent then
            instance.Parent = parent
        end
        return instance
    end
    
    -- Các biến và hàm cho Log GUI
    local logContainer = nil
    local function setupLogGui()
        if not SETTINGS["EnableLogGUI"] then return end
        local logGui = CreateInstance("ScreenGui", {
            ["Name"] = "LogConsoleGUI",
            ["Parent"] = CoreGui,
            ["ResetOnSpawn"] = false,
            ["ZIndexBehavior"] = Enum.ZIndexBehavior.Sibling,
            ["DisplayOrder"] = 999
        })
        local logFrame = CreateInstance("Frame", {
            ["Name"] = "LogFrame",
            ["Parent"] = logGui,
            ["BackgroundColor3"] = Color3.new(0.1, 0.1, 0.1),
            ["BackgroundTransparency"] = 0.3,
            ["BorderSizePixel"] = 1,
            ["BorderColor3"] = Color3.new(1, 1, 1),
            ["Position"] = UDim2.new(0, 10, 1, -210),
            ["AnchorPoint"] = Vector2.new(0, 1),
            ["Size"] = UDim2.new(0, 450, 0, 200)
        })
        logContainer = CreateInstance("ScrollingFrame", {
            ["Name"] = "LogContainer",
            ["Parent"] = logFrame,
            ["Size"] = UDim2.new(1, 0, 1, 0),
            ["BackgroundColor3"] = Color3.new(1, 1, 1),
            ["BackgroundTransparency"] = 1,
            ["BorderSizePixel"] = 0,
            ["CanvasSize"] = UDim2.new(0, 0, 0, 0),
            ["ScrollBarImageColor3"] = Color3.new(0.8, 0.8, 0.8),
            ["ScrollBarThickness"] = 6
        })
        CreateInstance("UIListLayout", {
            ["Parent"] = logContainer,
            ["SortOrder"] = Enum.SortOrder.LayoutOrder,
            ["Padding"] = UDim.new(0, 2)
        })
        CreateInstance("UIPadding", {
            ["Parent"] = logContainer,
            ["PaddingTop"] = UDim.new(0, 5),
            ["PaddingLeft"] = UDim.new(0, 5)
        })
    end

    local function logToGui(message)
        if not SETTINGS["EnableLogGUI"] or not logContainer then return end
        if #logContainer:GetChildren() > 60 then
            logContainer:GetChildren()[1]:Destroy()
        end
        local logLabel = CreateInstance("TextLabel", {
            ["Name"] = "LogMessage",
            ["Parent"] = logContainer,
            ["Text"] = tostring(os.date("[%H:%M:%S] ") .. message),
            ["Font"] = Enum.Font.SourceSans,
            ["TextSize"] = 14,
            ["TextColor3"] = Color3.new(1, 1, 1),
            ["TextXAlignment"] = Enum.TextXAlignment.Left,
            ["TextWrapped"] = true,
            ["BackgroundTransparency"] = 1,
            ["Size"] = UDim2.new(1, -10, 0, 15)
        })
        task.wait()
        logContainer.CanvasPosition = Vector2.new(0, logContainer.CanvasSize.Y.Offset)
    end

    local NEON_COLORS = {
        ["GREEN"] = Color3.fromRGB(10, 255, 20),
        ["YELLOW"] = Color3.fromRGB(255, 255, 0),
        ["BLUE"] = Color3.fromRGB(0, 150, 255),
        ["RED"] = Color3.fromRGB(255, 20, 20)
    }
    
    local playerGui = LocalPlayer:WaitForChild("PlayerGui")
    local SERVER_HOP_GUI_NAME = "ServerHopStatusGUI"
    if playerGui:FindFirstChild(SERVER_HOP_GUI_NAME) then
        playerGui:FindFirstChild(SERVER_HOP_GUI_NAME):Destroy()
    end

    local statusScreenGui = CreateInstance("ScreenGui", {
        ["Name"] = SERVER_HOP_GUI_NAME,
        ["Parent"] = playerGui,
        ["ResetOnSpawn"] = false,
        ["ZIndexBehavior"] = Enum.ZIndexBehavior.Sibling,
        ["IgnoreGuiInset"] = true
    })

    local statusFrame = CreateInstance("Frame", {
        ["Name"] = "StatusFrame",
        ["Parent"] = statusScreenGui,
        ["Size"] = UDim2.new(1, 0, 1, 0),
        ["BackgroundColor3"] = NEON_COLORS["GREEN"],
        ["BorderSizePixel"] = 0,
        ["BackgroundTransparency"] = 1,
        ["ZIndex"] = 1
    })

    local FIXED_TEXT_SIZE = 50
    local statusTextLabel = CreateInstance("TextLabel", {
        ["Name"] = "StatusLabel",
        ["Parent"] = statusScreenGui,
        ["Size"] = UDim2.new(0.9, 0, 0, FIXED_TEXT_SIZE + 40),
        ["Position"] = UDim2.new(0.5, 0, 0.5, 0),
        ["AnchorPoint"] = Vector2.new(0.5, 0.5),
        ["BackgroundTransparency"] = 1,
        ["TextColor3"] = Color3.new(1, 1, 1),
        ["Font"] = Enum.Font.SourceSansSemibold,
        ["TextScaled"] = false,
        ["TextSize"] = FIXED_TEXT_SIZE,
        ["TextXAlignment"] = Enum.TextXAlignment.Center,
        ["TextYAlignment"] = Enum.TextYAlignment.Center,
        ["TextWrapped"] = true,
        ["Text"] = "...",
        ["ZIndex"] = 2
    })

    local function updateDisplay(state, message)
        print("[UI] ("..tostring(state)..") " .. tostring(message))
        logToGui(string.format("[%s] %s", state, message))
        
        local stateColor = NEON_COLORS["GREEN"]
        if state == "ERROR" then stateColor = NEON_COLORS["YELLOW"] end
        if statusTextLabel and statusTextLabel.Parent then
            statusTextLabel.Text = tostring(message)
            statusTextLabel.TextColor3 = stateColor
        end
        if SETTINGS["EnableCountdownColor"] then
            if statusFrame and statusFrame.Parent then
                 if state == "SUCCESS" or state == "ERROR" then
                    statusFrame.BackgroundColor3 = stateColor
                    statusFrame.BackgroundTransparency = 0.5
                 else
                    statusFrame.BackgroundTransparency = 1
                 end
            end
        else
            if statusFrame then statusFrame.BackgroundTransparency = 1 end
        end
    end

    local canAccessFiles = false
    local writefile_func, readfile_func
    local SERVER_HISTORY_FILENAME = "server_hop_history.txt"
    if SETTINGS["EnableFileHistory"] then
        pcall(function()
            if writefile and readfile then
                canAccessFiles, writefile_func, readfile_func = true, writefile, readfile
            else
                logToGui("[FileIO] Quyền file KHÔNG có sẵn.")
            end
        end)
    else
        logToGui("[FileIO] Lịch sử file bị TẮT.")
    end
    
    local serverHistoryCache = {}
    local function loadServerHistory()
        if not canAccessFiles then return {} end
        local historySet = {}
        local success, content = pcall(readfile_func, SERVER_HISTORY_FILENAME)
        if success and content then
            for line in string.gmatch(content, "[^" .. "\r\n" .. "]+") do
                local trimmedLine = line:match("^%s*(.-)%s*$")
                if trimmedLine and #trimmedLine > 0 then
                    historySet[trimmedLine] = true
                end
            end
        end
        serverHistoryCache = historySet
        return historySet
    end

    local function addJobIdToHistoryAndSave(jobId)
        if not jobId or not canAccessFiles then return end
        serverHistoryCache[jobId] = true
        local lines = {}
        for id in pairs(serverHistoryCache) do table.insert(lines, id) end
        pcall(writefile_func, SERVER_HISTORY_FILENAME, table.concat(lines, "\n"))
    end
    
    local AFK_PLATFORM_NAME = "MySafeAFKPlatform"
    local STATIC_HEAD_ANCHOR_PART_NAME = "AFK_HeadAnchor_StaticCam"
    local STATIC_BLACK_SCREEN_PART_NAME = "AFK_BlackScreen_StaticCam"
    local PLATFORM_VERTICAL_OFFSET = 0
    
    local function createSafePlatform()
        updateDisplay("INFO", "Đang tạo platform...")
        if workspace:FindFirstChild(AFK_PLATFORM_NAME) then
            updateDisplay("INFO", "Platform đã có.")
            return
        end
        local platformPart = CreateInstance("Part", {
            ["Name"] = AFK_PLATFORM_NAME,
            ["Parent"] = workspace,
            ["Anchored"] = true,
            ["CanCollide"] = true,
            ["Size"] = Vector3.new(20000, 40, 20000),
            ["Color"] = Color3.fromRGB(50, 50, 50),
            ["Transparency"] = 0
        })
        local char = LocalPlayer.Character
        local hum = char and char:FindFirstChildOfClass("Humanoid")
        local hrp = char and char:FindFirstChild("HumanoidRootPart")
        if hum and hrp then
            local hrpPos = hrp.Position
            local hrpSizeY = hrp.Size.Y
            local hipHeight = hum.HipHeight
            local floorCenterY = hrpPos.Y - (hrpSizeY / 2) - hipHeight
            local platformTopY = floorCenterY - PLATFORM_VERTICAL_OFFSET
            local platformCenterY = platformTopY - (platformPart.Size.Y / 2)
            platformPart.Position = Vector3.new(hrpPos.X, platformCenterY, hrpPos.Z)
        else
            platformPart.Position = Vector3.new(0, -30 - PLATFORM_VERTICAL_OFFSET, 0)
        end
        updateDisplay("SUCCESS", "Platform đã tạo.")
    end

    local function setupStaticAfkView()
        updateDisplay("INFO", "Thiết lập view AFK tĩnh...")
        local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
        if not character then return end
        local head = character:WaitForChild("Head", 10)
        if not head then return end
        local camera = workspace.CurrentCamera
        if not camera then return end
        local staticHeadAnchor = workspace:FindFirstChild(STATIC_HEAD_ANCHOR_PART_NAME) or CreateInstance("Part", {
            ["Name"] = STATIC_HEAD_ANCHOR_PART_NAME,
            ["Parent"] = workspace,
            ["Size"] = Vector3.new(0.1, 0.1, 0.1),
            ["Transparency"] = 1,
            ["CanCollide"] = false,
            ["Anchored"] = true
        })
        staticHeadAnchor.CFrame = CFrame.new(head.Position)
        local blackTarget = workspace:FindFirstChild(STATIC_BLACK_SCREEN_PART_NAME) or CreateInstance("Part", {
            ["Name"] = STATIC_BLACK_SCREEN_PART_NAME,
            ["Parent"] = workspace,
            ["Size"] = Vector3.new(2500, 2500, 10),
            ["Color"] = Color3.new(0, 0, 0),
            ["CanCollide"] = false,
            ["Anchored"] = true
        })
        local eastPositionFromAnchor = staticHeadAnchor.Position + Vector3.new(150, 0, 0)
        blackTarget.CFrame = CFrame.new(eastPositionFromAnchor)
        camera.CameraType = Enum.CameraType.Scriptable
        camera.CFrame = CFrame.new(staticHeadAnchor.Position, blackTarget.Position)
        camera.Focus = blackTarget.CFrame
        updateDisplay("SUCCESS", "View AFK tĩnh đã thiết lập.")
    end

    local function optimizeGraphics()
        updateDisplay("INFO", "Bắt đầu tối ưu đồ họa...")
        if SETTINGS["EnableSafePlatform"] then createSafePlatform() end
        task.wait(0.1)
        local success, err = pcall(function()
            local itemsToDelete = {}
            for _, item in ipairs(workspace:GetChildren()) do
                local keep = (LocalPlayer.Character and item.Name == LocalPlayer.Character.Name) or (item == workspace.CurrentCamera) or (SETTINGS["EnableSafePlatform"] and item.Name == AFK_PLATFORM_NAME) or (SETTINGS["EnableStaticAfkView"] and (item.Name == STATIC_HEAD_ANCHOR_PART_NAME or item.Name == STATIC_BLACK_SCREEN_PART_NAME))
                if not keep then table.insert(itemsToDelete, item) end
            end
            for _, item in ipairs(itemsToDelete) do pcall(function() item:Destroy() end) end
            Lighting.GlobalShadows = false
            Lighting.Brightness = 0
            Lighting.Ambient = Color3.new(0, 0, 0)
            Lighting.OutdoorAmbient = Color3.new(0, 0, 0)
            Lighting.ExposureCompensation = -2
            pcall(function() if Lighting.Atmosphere then Lighting.Atmosphere:Destroy() end end)
            pcall(function() if Lighting.Sky then Lighting.Sky:Destroy() end end)
            if LocalPlayer.PlayerGui then
                for _, gui in ipairs(LocalPlayer.PlayerGui:GetChildren()) do
                    if gui.Name ~= SERVER_HOP_GUI_NAME and gui.Name ~= "LogConsoleGUI" then pcall(function() gui:Destroy() end) end
                end
            end
            local settingsObj = settings()
            if settingsObj and settingsObj.Rendering then
                settingsObj.Rendering.QualityLevel = Enum.QualityLevel.Level01
                pcall(function() if RunService:IsClient() then RunService:Set3dRenderingEnabled(false) end end)
            end
            SoundService.RespectFilteringEnabled = true
            SoundService.AmbientReverb = Enum.ReverbType.NoReverb
            for _, sound in ipairs(game:GetDescendants()) do
                if sound:IsA("Sound") then
                    sound.Volume = 0
                    sound:Stop()
                end
            end
            updateDisplay("SUCCESS", "Đồ họa đã được tối ưu.")
        end)
        if not success then updateDisplay("ERROR", "Lỗi khi tối ưu đồ họa: " .. tostring(err)) end
    end
    
    -- =================================================================
    -- (LOGIC GỐC) HÀM TÌM KIẾM SERVER
    -- =================================================================
    local chosenServer = nil
    local serversUrlBase = "https://games.roblox.com/v1/games/" .. game.PlaceId .. "/servers/Public?sortOrder=Asc&limit=100"
    local waitTimeBetweenFullScans = 7
    local waitTimeBetweenPageFetches = 0.75
    local baseRetryDelay = 1
    local maxRetryDelay = 16

    function searchForServer()
        if not SETTINGS["EnableFileHistory"] then serverHistoryCache = {} else loadServerHistory() end; local histC=0;for _ in pairs(serverHistoryCache)do histC=histC+1 end
        updateDisplay("INFO", string.format("Bắt đầu tìm server... (Tránh %d)",histC+1))
        
        local sLActive=true; chosenServer=nil
        while sLActive and not chosenServer do
            local nextCur=nil; updateDisplay("INFO", "Đang quét server..."); local allScanned=false
            while not allScanned and not chosenServer do
                local pAtt=0;local maxAtt=4;local pFetched=false;local curRetry=baseRetryDelay
                while not pFetched and pAtt<maxAtt do
                    pAtt=pAtt+1;if pAtt>1 then updateDisplay("INFO", string.format("Thử lại (%d/%d)...",pAtt,maxAtt));task.wait(curRetry);curRetry=math.min(curRetry*2,maxRetryDelay) end
                    
                    -- (KHÔI PHỤC LOGIC GỐC) Sử dụng lại logic gốc với pcall và HttpGet (thông qua HttpService:GetAsync)
                    local s,d=pcall(function() return game:HttpGet(serversUrlBase..(nextCur and "&cursor="..nextCur or ""), true) end)
                    
                    if s then
                        pFetched=true;
                        local successDecode, sListD = pcall(HttpService.JSONDecode, HttpService, d)
                        if successDecode and sListD and sListD.data then local pSuitS={};
                            for _,sInf in ipairs(sListD.data)do if not(sInf.id==game.JobId or serverHistoryCache[sInf.id])then if sInf.playing and sInf.maxPlayers and sInf.maxPlayers>0 then local pR=sInf.playing/sInf.maxPlayers if pR>=SETTINGS["MinPlayerPercentage"] and pR<SETTINGS["MaxPlayerPercentage"] and sInf.playing<sInf.maxPlayers then table.insert(pSuitS,sInf)end end end end
                            if #pSuitS>0 then chosenServer=pSuitS[math.random(1,#pSuitS)];allScanned=true;break end
                            nextCur=sListD.nextPageCursor;if not nextCur then allScanned=true;end
                        else updateDisplay("ERROR","Dữ liệu server lỗi.")end
                    else updateDisplay("ERROR","Lỗi API: " .. tostring(d));if pAtt>=maxAtt then allScanned=true end end
                end;if chosenServer or allScanned then break end;task.wait(waitTimeBetweenPageFetches)
            end
            if chosenServer then updateDisplay("SUCCESS", "ĐÃ CHỌN SERVER!");sLActive=false
            elseif allScanned then updateDisplay("INFO", string.format("Không tìm thấy. Chờ %ds.",waitTimeBetweenFullScans));task.wait(waitTimeBetweenFullScans)end
        end
        if chosenServer then
            updateDisplay("SUCCESS", "Chuẩn bị dịch chuyển..."); addJobIdToHistoryAndSave(game.JobId); task.wait(1)
            local sTP,eTP=pcall(TeleportService.TeleportToPlaceInstance,TeleportService,placeId,chosenServer.id,LocalPlayer)
            if not sTP then updateDisplay("ERROR", "Lỗi dịch chuyển! Thử lại..."); serverHistoryCache[chosenServer.id]=true;chosenServer=nil;task.wait(5);searchForServer() end
        else updateDisplay("ERROR", "Không thể tìm thấy server. Dừng lại.") end
    end

    local countdownShouldReset = false
    local currentCountdownThread = nil
    local function performCountdownThenSearch(minutesToWait)
        if not minutesToWait or minutesToWait <= 0 then
            updateDisplay("ERROR", "Thời gian chờ lỗi.")
            searchForServer()
            return
        end
        if not SETTINGS["EnableCountdownText"] and statusTextLabel then statusTextLabel.Text = "" end
        if not SETTINGS["EnableCountdownColor"] and statusFrame then statusFrame.BackgroundTransparency = 1 end
        local totalSeconds = minutesToWait * 60
        for i = totalSeconds, 0, -1 do
            if countdownShouldReset and SETTINGS["EnableDonateReset"] then
                countdownShouldReset = false
                if statusTextLabel then statusTextLabel.Text = "" end
                if statusFrame then statusFrame.BackgroundTransparency = 1 end
                updateDisplay("SUCCESS", "Donate! Reset thời gian.")
                startInitialCountdown()
                return
            end
            if SETTINGS["EnableCountdownText"] and statusTextLabel and statusTextLabel.Parent then
                statusTextLabel.Text = string.format("%02d:%02d", math.floor(i / 60), i % 60)
                statusTextLabel.TextColor3 = Color3.new(1, 1, 1)
            end
            if SETTINGS["EnableCountdownColor"] and statusFrame and statusFrame.Parent then
                statusFrame.BackgroundColor3 = (i % 2 == 0) and NEON_COLORS["BLUE"] or NEON_COLORS["RED"]
                statusFrame.BackgroundTransparency = 0.6
            end
            task.wait(1)
        end
        if statusTextLabel then statusTextLabel.Text = "" end
        if statusFrame then statusFrame.BackgroundTransparency = 1 end
        updateDisplay("SUCCESS", "Hết giờ! Bắt đầu tìm server...")
        searchForServer()
    end

    local function startInitialCountdown()
        updateDisplay("INFO", "Bắt đầu chu trình...")
        if currentCountdownThread and coroutine.status(currentCountdownThread) ~= "dead" then
            pcall(coroutine.close, currentCountdownThread)
            currentCountdownThread = nil
        end
        currentCountdownThread = coroutine.create(function()
            local success, err = pcall(performCountdownThenSearch, SETTINGS["WaitMinutes"])
            if not success then
                updateDisplay("ERROR", "Lỗi Coroutine: " .. tostring(err) .. ". Thử lại sau 5s...")
                task.wait(5)
                if SETTINGS["EnableServerHop"] then startInitialCountdown() end
            end
        end)
        coroutine.resume(currentCountdownThread)
    end

    local function initializeAutoReconnect()
        if not SETTINGS["EnableAutoReconnect"] then return end
        local promptGui = CoreGui:WaitForChild("RobloxPromptGui", 30)
        if not promptGui then
            logToGui("[AutoReconnect] Không tìm thấy RobloxPromptGui.")
            return
        end
        local promptOverlay = promptGui:WaitForChild("promptOverlay", 10)
        if not promptOverlay then
             logToGui("[AutoReconnect] Không tìm thấy promptOverlay.")
            return
        end
        logToGui("[AutoReconnect] Tính năng tự động kết nối lại đã được kích hoạt.")
        promptOverlay.ChildAdded:Connect(function(child)
            if child.Name == "ErrorPrompt" then
                updateDisplay("ERROR", "Mất kết nối! Đang thử kết nối lại...")
                repeat
                    pcall(TeleportService.Teleport, TeleportService, game.PlaceId)
                    task.wait(3)
                until false
            end
        end)
    end

    -- --- Khởi chạy Script ---
    setupLogGui()
    updateDisplay("INFO", "Script đang khởi chạy...")
    task.wait(0.2)
    if type(setfpscap) == "function" and SETTINGS["TargetFps"] and SETTINGS["TargetFps"] > 0 then
        task.spawn(function()
            while task.wait() do pcall(setfpscap, SETTINGS["TargetFps"]) end
        end)
    end

    updateDisplay("INFO", string.format("Chờ game tải trong %d giây...", SETTINGS["InitialWaitTime"]))
    task.wait(SETTINGS["InitialWaitTime"])
    updateDisplay("INFO", "Hết thời gian chờ. Bắt đầu thiết lập...")

    if SETTINGS["EnableSafePlatform"] then createSafePlatform() end
    if SETTINGS["EnableStaticAfkView"] then setupStaticAfkView() end
    if SETTINGS["EnableGraphicsOptimization"] then optimizeGraphics() end
    
    initializeAutoReconnect()

    if SETTINGS["EnableServerHop"] then
        startInitialCountdown()
        if SETTINGS["EnableDonateReset"] then
            local leaderstats = LocalPlayer:WaitForChild("leaderstats", 15)
            if leaderstats then
                local raised = leaderstats:WaitForChild("Raised", 15)
                if raised then
                    local lastRaised = raised.Value
                    raised.Changed:Connect(function(newValue)
                        if newValue > lastRaised then
                            lastRaised = newValue
                            countdownShouldReset = true
                        end
                    end)
                end
            end
        end
    else
        updateDisplay("INFO", "Logic Server Hop TẮT. Script đã hoàn thành.")
    end

    print("[MainLogic] Script đã hoàn tất khởi chạy chính.")
end)

if not success then
    warn("[Loader] Lỗi nghiêm trọng khi thực thi script: " .. tostring(err))
    if logToGui then
        logToGui("Lỗi nghiêm trọng khi thực thi script: " .. tostring(err))
    end
end
