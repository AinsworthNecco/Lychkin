-- ===================================================================
-- SCRIPT GỘP: LYCHKIN'S PLSDONATE HELPER V1
-- Tác giả: Lychkin (với sự trợ giúp của AI)
-- Chức năng: Giao diện người dùng với tính năng tự động nhận booth.
-- Cấu trúc: Sắp xếp lại theo yêu cầu.
-- ===================================================================

-- Chờ game tải xong hoàn toàn
repeat task.wait() until game:IsLoaded()

-- Chỉ chạy trong game PLS DONATE để tránh lỗi
if game.PlaceId ~= 8737602449 and game.PlaceId ~= 8943844393 then return end

-- Services
-- Khai báo các dịch vụ của game (phiên bản đã dọn dẹp)
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local TeleportService = game:GetService("TeleportService")
local HttpService = game:GetService("HttpService")
local CoreGui = game:GetService("CoreGui")
local Lighting = game:GetService("Lighting")
local SoundService = game:GetService("SoundService")
local RunService = game:GetService("RunService")
local VirtualUser = game:GetService("VirtualUser")

-- Khai báo các biến liên quan đến người chơi
local LocalPlayer = Players.LocalPlayer
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")

-- Biến cho Remotes (sẽ được gán giá trị sau)
local Remotes

-- Lib
local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()

-- Window
local Window = Fluent:CreateWindow({
    Title = "Lychkin's Plsdonate",
    SubTitle = "Lychkin",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
})

-- option
local Options = Fluent.Options

-- tab
local Tabs = {
    AutoFarm = Window:AddTab({ Title = "AutoFarm", Icon = "rbxassetid://13109236233" }),
    Hop = Window:AddTab({ Title = "Hop", Icon = "rbxassetid://13109234859" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "rbxassetid://13109235553" })
}

-- settings
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)
InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)

-- logicTab
-- ===================================================================
-- PHẦN LOGIC CHÍNH
-- ===================================================================

-- Tìm Remotes của game một cách tự động
task.spawn(function()
    for i, v in next, ReplicatedStorage:GetChildren() do
        if v.Name:find('Remote') and v:IsA('ModuleScript') then
            local suc = pcall(function() require(v).Event('PromotionBlimpGiftbux'):FireServer() end)
            if suc then
                Remotes = require(v)
                Fluent:Notify({ Title = "Thành công", Content = "Đã tìm thấy Remotes của game!" })
                return -- Thoát khỏi vòng lặp khi đã tìm thấy
            end
        end
        task.wait()
    end
    if not Remotes then
        Fluent:Notify({ Title = "Lỗi", Content = "Không thể tìm thấy Remotes. Script có thể không hoạt động." })
    end
end)

-- Chức năng chống AFK (treo máy)
task.spawn(function()
    Players.LocalPlayer.Idled:Connect(function()
        VirtualUser:CaptureController()
        VirtualUser:ClickButton2(Vector2.new())
    end)
end)

--- HÀM TỰ ĐỘNG CHIẾM BOOTH ---
local function runAutoClaimCycle()
    -- Kiểm tra xem đã tìm thấy Remotes chưa
    if not Remotes then
        Fluent:Notify({ Title = "Lỗi", Content = "Chưa tìm thấy Remotes, không thể nhận booth." })
        return -- Dừng hàm nếu không có Remotes
    end

    -- 1. Tìm MapUI
    Fluent:Notify({ Title = "Auto Booth", Content = "Bắt đầu tìm MapUI..." })
    local _boothlocation
    local suc, _shuffled = pcall(function() return Workspace:WaitForChild('MapUI', 3) end)
    if not suc or not _shuffled then
        Fluent:Notify({ Title = "Auto Booth", Content = "Không thấy MapUI trong Workspace, đang tìm trong PlayerGui..." })
        local suc2, res2 = pcall(function() return PlayerGui:WaitForChild('MapUIContainer', 5):WaitForChild('MapUI', 5) end)
        if suc2 then _boothlocation = res2 end
    else
        _boothlocation = _shuffled
    end

    if not _boothlocation then
        Fluent:Notify({ Title = "Lỗi", Content = "Không tìm thấy MapUI. Game có thể đã cập nhật." })
        return
    end

    -- 2. Quét booth trống
    Fluent:Notify({ Title = "Auto Booth", Content = "Đã tìm thấy MapUI. Bắt đầu quét booth trống..." })
    local unclaimed = {}
    local mainCheckPosition = Vector3.new(165.161, 0, 311.636)
    local boothUI = _boothlocation:WaitForChild("BoothUI")
    local interactions = Workspace:WaitForChild("BoothInteractions")

    for _, uiFrame in ipairs(boothUI:GetChildren()) do
        if uiFrame.Details.Owner.Text == "unclaimed" then
            local boothNum = tonumber(uiFrame.Name:match("%d+"))
            if boothNum then
                for _, interact in ipairs(interactions:GetChildren()) do
                    if interact:GetAttribute("BoothSlot") == boothNum and (Vector3.new(interact.Position.X, 0, interact.Position.Z) - mainCheckPosition).Magnitude < 92 then
                        table.insert(unclaimed, boothNum)
                        break
                    end
                end
            end
        end
    end

    if #unclaimed == 0 then
        Fluent:Notify({ Title = "Auto Booth", Content = "Không có booth trống. Vui lòng chuyển server." })
        return
    end

    -- 3. Chiếm booth
    Fluent:Notify({ Title = "Auto Booth", Content = "Đã tìm thấy " .. #unclaimed .. " gian hàng. Bắt đầu chiếm..." })
    task.wait(1)
    local chosenBoothNumber = unclaimed[1]
    local claimSuccess = false
    
    -- Thử chiếm booth và kiểm tra lại sau 1.5 giây
    if pcall(function() Remotes.Event("ClaimBooth"):InvokeServer(chosenBoothNumber) task.wait(1.5) if not string.find(boothUI:FindFirstChild("BoothUI" .. chosenBoothNumber).Details.Owner.Text, LocalPlayer.DisplayName) then error() end end) then
        claimSuccess = true
        Fluent:Notify({ Title = "Thành Công!", Content = "Đã chiếm được gian hàng số " .. chosenBoothNumber })
    else
        Fluent:Notify({ Title = "Thất Bại", Content = "Không thể chiếm gian hàng. Có thể người khác đã nhanh hơn." })
        return
    end

    task.wait(1)

    -- 4. Di chuyển đến booth nếu chiếm thành công
    if claimSuccess then
        Fluent:Notify({ Title = "Auto Booth", Content = "Đang di chuyển đến gian hàng..." })
        local boothPos, mainPosX
        for i, v in ipairs(Workspace.BoothInteractions:GetChildren()) do
            if v:GetAttribute("BoothSlot") == chosenBoothNumber then
                mainPosX = v.CFrame
                boothPos = v.CFrame * CFrame.new(0, 0, 3) -- Đứng cách booth 3 đơn vị
                break
            end
        end

        local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
        local humanoid = character:WaitForChild("Humanoid")
        local rootPart = character:WaitForChild("HumanoidRootPart")
        rootPart.CFrame = mainPosX -- Dịch chuyển tức thời đến trước booth
        humanoid:MoveTo(boothPos.Position) -- Đi bộ vào vị trí đứng
        local successMove = humanoid.MoveToFinished:Wait(8)
        
        if successMove then
            -- Quay mặt vào trung tâm
            rootPart.CFrame = CFrame.new(boothPos.Position, Vector3.new(mainCheckPosition.X, rootPart.Position.Y, mainCheckPosition.Z))
            Fluent:Notify({ Title = "Hoàn tất!", Content = "Đã đến nơi. Script hoàn tất!" })
        else
            Fluent:Notify({ Title = "Lỗi di chuyển", Content = "Không thể tự đi đến booth. Vui lòng tự di chuyển." })
        end
    end
end

--- KẾT NỐI GIAO DIỆN VÀ LOGIC ---

-- Lấy giá trị đã lưu từ SaveManager để khởi tạo biến trạng thái.
local autoClaimEnabled = SaveManager.Save.AutoClaimBooth or false

-- Thêm công tắc vào tab AutoFarm
Tabs.AutoFarm:AddToggle("AutoClaimBooth", {
    Title = "Tự động nhận Booth",
    Default = autoClaimEnabled, -- Đặt trạng thái ban đầu của giao diện dựa trên giá trị đã lưu
    Callback = function(value)
        -- Khi người dùng nhấn, cập nhật biến trạng thái
        autoClaimEnabled = value
    end
})

-- Vòng lặp chính để xử lý logic, chạy trong một luồng riêng biệt
task.spawn(function()
    while task.wait(1) do -- Lặp lại mỗi giây để kiểm tra
        
        -- Nếu người dùng đã bật công tắc
        if autoClaimEnabled then
            
            -- Chạy hàm chiếm booth
            runAutoClaimCycle()
            
            -- Tự động tắt logic và giao diện sau khi chạy xong
            autoClaimEnabled = false
            Options.AutoClaimBooth:SetValue(false)
        end
    end
end)
