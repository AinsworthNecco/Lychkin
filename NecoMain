--================================================================
-- PHẦN 1: KHAI BÁO DỊCH VỤ VÀ BIẾN
--================================================================

-- Dịch vụ Roblox
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local TeleportService = game:GetService("TeleportService")
local HttpService = game:GetService("HttpService")
local RunService = game:GetService("RunService")
local VirtualUser = game:GetService("VirtualUser")

-- Biến người chơi
local LocalPlayer = Players.LocalPlayer
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")

-- Anti-AFK
task.spawn(function()
    if not VirtualUser then return end
    LocalPlayer.Idled:Connect(function()
        VirtualUser:CaptureController()
        VirtualUser:ClickButton2(Vector2.new())
    end)
end)

--================================================================
-- PHẦN 2: GIAO DIỆN FLUENT UI
--================================================================

-- Tải thư viện Fluent
local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()

-- Tạo cửa sổ chính
local Window = Fluent:CreateWindow({
    Title = "Lychkin's Plsdonate",
    SubTitle = "Lưu và Tải Cài Đặt",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true,
})

-- Tùy chọn (lưu giá trị UI)
local Options = Fluent.Options

-- Tabs giao diện
local Tabs = {
    AutoFarm = Window:AddTab({ Title = "AutoFarm", Icon = "" }),
    Hop      = Window:AddTab({ Title = "Hop",      Icon = "" }),
	Booth      = Window:AddTab({ Title = "Booth",      Icon = "" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "" }),
}

--================================================================
-- PHẦN 3: SAVE MANAGER 
--================================================================

local SaveManager = {}
local FOLDER_NAME = "Lychkin"
local FILE_NAME = "LychkinPlsdonate.txt"
local FILE_PATH = FOLDER_NAME .. "/" .. FILE_NAME

-- Đảm bảo thư mục tồn tại
if not isfolder(FOLDER_NAME) then
    makefolder(FOLDER_NAME)
end

-- Hàm này chỉ đọc file và trả về dữ liệu dưới dạng bảng
function SaveManager:LoadData()
    if not isfile(FILE_PATH) then return {} end

    local success, fileContent = pcall(readfile, FILE_PATH)
    if not success or fileContent == "" then return {} end

    local success, decodedData = pcall(function()
        return HttpService:JSONDecode(fileContent)
    end)

    if success and type(decodedData) == "table" then
        Fluent:Notify({
            Title = "Tải thành công",
            Content = "Đã áp dụng cài đặt đã lưu.",
            Duration = 3
        })
        return decodedData
    else
        warn("Lỗi file cài đặt, sử dụng cài đặt mặc định.")
        return {}
    end
end

-- Hàm lưu không thay đổi nhiều
function SaveManager:Save()
    local dataToSave = {}
    for name, option in pairs(Options) do
        dataToSave[name] = option.Value
    end

    local success, encodedData = pcall(function()
        return HttpService:JSONEncode(dataToSave)
    end)

    if success then
        writefile(FILE_PATH, encodedData)
        Fluent:Notify({ Title = "Đã lưu!", Content = "Cài đặt của bạn đã được lưu.", Duration = 2 })
    else
        warn("Lỗi khi lưu cài đặt:", encodedData)
    end
end

--SaveData
local savedData = SaveManager:LoadData()

--================================================================
-- PHẦN 4: LOGIC AND TABS 
--================================================================

------------------------------------------------------------------
--- AUTO CLAIM BOOTH (Phiên bản cải tiến)
------------------------------------------------------------------

-- Biến quản lý vòng lặp và trạng thái
local claimBoothConnection = nil
local isProcessingClaim = false -- Cờ để tránh chạy nhiều lần cùng lúc

-- Hàm di chuyển đến booth sau khi chiếm thành công
local function walkToBooth(boothNumber)
    local boothPos, mainPosX
    for i, v in ipairs(Workspace.BoothInteractions:GetChildren()) do
        if v:GetAttribute("BoothSlot") == boothNumber then
            mainPosX = v.CFrame
            -- Vị trí đứng mặc định, bạn có thể thay đổi số 3
            boothPos = v.CFrame * CFrame.new(0, 0, 3) 
            break
        end
    end

    if not boothPos then return end

    local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    local humanoid = character:WaitForChild("Humanoid")
    local rootPart = character:WaitForChild("HumanoidRootPart")
    
    Fluent:Notify({ Title = "Auto Claim", Content = "Đang di chuyển đến gian hàng...", Duration = 3 })
    rootPart.CFrame = mainPosX
    humanoid:MoveTo(boothPos.Position)
    local successMove = humanoid.MoveToFinished:Wait(8)
    
    if successMove then
        -- Xoay người về phía trước
        rootPart.CFrame = CFrame.new(boothPos.Position, mainPosX.Position - Vector3.new(0,0,5))
        Fluent:Notify({ Title = "Auto Claim", Content = "Đã đến nơi. Hoàn tất!", Duration = 5 })
    else
        Fluent:Notify({ Title = "Auto Claim", Content = "Không thể tự di chuyển, vui lòng tự đi đến.", Duration = 5 })
    end
end

-- Hàm chuyển server khi không có booth
local function simpleServerHop()
    Fluent:Notify({ Title = "Hết booth", Content = "Không có booth trống. Chuyển server sau 5s...", Duration = 5 })
    task.wait(5)
    local servers = {}
    pcall(function()
        local req = HttpService:JSONDecode(game:HttpGet("https://games.roblox.com/v1/games/8737602449/servers/Public?sortOrder=Desc&limit=100"))
        if req and req.data then
            for i, v in next, req.data do
                if type(v) == "table" and tonumber(v.playing) and v.playing > 19 and v.playing < v.maxPlayers then
                    table.insert(servers, 1, v.id)
                end
            end
        end
        if #servers > 0 then
            TeleportService:TeleportToPlaceInstance(8737602449, servers[math.random(1, #servers)], LocalPlayer)
        end
    end)
end

-- Hàm chính để thực hiện việc chiếm booth
local function executeAutoClaim()
    if isProcessingClaim then return end -- Nếu đang xử lý thì không chạy lại
    isProcessingClaim = true

    local Remotes
    for i, v in next, ReplicatedStorage:GetChildren() do
        if v.Name:find('Remote') and v:IsA('ModuleScript') then
            if pcall(function() require(v).Event('PromotionBlimpGiftbux'):FireServer() end) then
                Remotes = require(v); break
            end
        end
        task.wait()
    end

    if not Remotes then
        Fluent:Notify({ Title = "Lỗi", Content = "Không tìm thấy Remotes của game.", Duration = 5 })
        Options.AutoClaimBooth:set(false); isProcessingClaim = false
        return
    end

    -- Vòng lặp tìm kiếm, chỉ chạy khi được bật
    claimBoothConnection = RunService.Heartbeat:Connect(function()
        -- Ngừng ngay nếu người dùng đã tắt
        if not Options.AutoClaimBooth.Value then
            isProcessingClaim = false
            claimBoothConnection:Disconnect()
            claimBoothConnection = nil
            return
        end

        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("MyBooth") and LocalPlayer.Character.MyBooth.Value then
            Fluent:Notify({ Title = "Auto Claim", Content = "Đã có booth. Chức năng tự tắt.", Duration = 5 })
            Options.AutoClaimBooth:set(false) -- Tự động tắt nút
            return
        end

        local boothLocation
        local suc, res = pcall(function() return Workspace:WaitForChild('MapUI', 0) end)
        if suc and res then boothLocation = res else
            local suc2, res2 = pcall(function() return PlayerGui:WaitForChild('MapUIContainer', 0):WaitForChild('MapUI', 0) end)
            if suc2 and res2 then boothLocation = res2 end
        end
        if not boothLocation then return end

        local boothUI = boothLocation:FindFirstChild("BoothUI")
        local interactions = Workspace:FindFirstChild("BoothInteractions")
        if not (boothUI and interactions) then return end

        local unclaimed = {}
        for _, uiFrame in ipairs(boothUI:GetChildren()) do
            if uiFrame:IsA("Frame") and uiFrame:FindFirstChild("Details") and uiFrame.Details.Owner.Text == "unclaimed" then
                table.insert(unclaimed, tonumber(uiFrame.Name:match("%d+")))
            end
        end

        if #unclaimed == 0 then
            -- Nếu không có booth nào, ngắt vòng lặp và chuyển server
            claimBoothConnection:Disconnect(); claimBoothConnection = nil
            simpleServerHop()
            isProcessingClaim = false
            return
        end
        
        -- Nếu có booth, ngắt vòng lặp để bắt đầu chiếm
        claimBoothConnection:Disconnect(); claimBoothConnection = nil
        
        local chosenBooth = unclaimed[1]
        Fluent:Notify({ Title = "Auto Claim", Content = "Tìm thấy booth trống! Đang chiếm số " .. chosenBooth, Duration = 3 })
        
        -- Thử chiếm và xác nhận
        local claimSuccess = pcall(function()
            Remotes.Event("ClaimBooth"):InvokeServer(chosenBooth)
            task.wait(0.5) -- Đợi game xử lý
            if not string.find(boothUI:FindFirstChild("BoothUI" .. chosenBooth).Details.Owner.Text, LocalPlayer.DisplayName) then
                error("Claim failed")
            end
        end)

        if claimSuccess then
            walkToBooth(chosenBooth)
        else
            Fluent:Notify({ Title = "Auto Claim", Content = "Chiếm thất bại, có thể người khác đã nhanh hơn. Tìm lại...", Duration = 4 })
        end
        
        -- Cho phép chạy lại chức năng
        isProcessingClaim = false
        -- Tự động bật lại để tìm tiếp nếu chiếm thất bại
        if Options.AutoClaimBooth.Value then
            executeAutoClaim()
        end
    end)
end

-- Tạo nút Toggle trong tab Booth
Tabs.Booth:AddToggle("AutoClaimBooth", {
    Title = "Tự động chiếm Booth",
    Description = "Luôn tự động tìm và chiếm gian hàng trống. Sẽ tự chuyển server nếu hết.",
    Default = savedData.AutoClaimBooth or false,
}):OnChanged(function(newValue)
    if newValue == true then
        executeAutoClaim()
    else
        if claimBoothConnection then
            claimBoothConnection:Disconnect()
            claimBoothConnection = nil
        end
        isProcessingClaim = false
        Fluent:Notify({ Title = "Auto Claim", Content = "Đã tắt.", Duration = 5 })
    end
    task.wait(); SaveManager:Save()
end)

-- Kích hoạt ban đầu nếu cài đặt được tải là true
if Options.AutoClaimBooth.Value == true then
    executeAutoClaim()
end
