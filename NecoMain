-- Các service cần thiết
local TeleportService = game:GetService("TeleportService")
local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local CoreGui = game:GetService("CoreGui")

-- --- Cấu hình Script ---
local placeId = game.PlaceId
local currentJobId = game.JobId

local DEFAULT_WAIT_MINUTES = 10 -- [[ THAY ĐỔI THÀNH 10 PHÚT ]]
local minPlayerPercentage = 0.50
local maxPlayerPercentageLimit = 0.90
local waitTimeBetweenFullScans = 7
local waitTimeBetweenPageFetches = 0.75
local baseRetryDelay = 1
local maxRetryDelay = 16

local SERVER_HISTORY_FILENAME = "server_hop_history.txt"

-- --- Kiểm tra và gán hàm đọc/ghi file (NẾU CÓ) ---
local canAccessFiles = false
local writefile_func, readfile_func
if writefile and readfile then
    canAccessFiles = true
    writefile_func = writefile
    readfile_func = readfile
    print("[ServerHop] Phát hiện writefile/readfile. Tính năng lưu lịch sử server được kích hoạt.")
else
    print("[ServerHop] Không phát hiện writefile/readfile. Sẽ chỉ tránh server hiện tại.")
end

-- --- UI Chính (Thông báo trạng thái) ---
local playerGui = LocalPlayer:WaitForChild("PlayerGui")
local statusScreenGui = playerGui:FindFirstChild("ServerHopStatusGUI")
if statusScreenGui then statusScreenGui:Destroy() end -- Xóa GUI cũ nếu có

statusScreenGui = Instance.new("ScreenGui")
statusScreenGui.Name = "ServerHopStatusGUI"
statusScreenGui.ResetOnSpawn = false
statusScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
statusScreenGui.Parent = playerGui

local statusTextLabel = Instance.new("TextLabel")
statusTextLabel.Name = "StatusLabel"
statusTextLabel.Size = UDim2.new(0.8, 0, 0.15, 0)
statusTextLabel.Position = UDim2.new(0.1, 0, 0.05, 0)
statusTextLabel.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
statusTextLabel.BackgroundTransparency = 0.3
statusTextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
statusTextLabel.Font = Enum.Font.SourceSansSemibold
statusTextLabel.TextSize = 18
statusTextLabel.TextWrapped = true
statusTextLabel.TextXAlignment = Enum.TextXAlignment.Left
statusTextLabel.Text = "Đang khởi tạo..."
statusTextLabel.Parent = statusScreenGui

local function updateStatus(message)
    print("[ServerHop] " .. message)
    if statusTextLabel and statusTextLabel.Parent then
        statusTextLabel.Text = message
    end
end

-- --- Hàm xử lý file cho LỊCH SỬ server ---
local serverHistoryCache = {}

local function loadServerHistory()
    local historySet = {}
    if canAccessFiles then
        local success, content = pcall(readfile_func, SERVER_HISTORY_FILENAME)
        if success and content then
            local count = 0
            for line in string.gmatch(content, "[^" .. "\r\n" .. "]+") do
                local trimmedLine = line:match("^%s*(.-)%s*$")
                if trimmedLine and #trimmedLine > 0 then
                    historySet[trimmedLine] = true
                    count = count + 1
                end
            end
            if count > 0 then print("[ServerHop] Đã tải lịch sử " .. count .. " server.")
            else print("[ServerHop] File lịch sử rỗng hoặc không có ID hợp lệ.") end
        else
            if not success then print("[ServerHop] Lỗi đọc " .. SERVER_HISTORY_FILENAME .. ": " .. tostring(content))
            else print("[ServerHop] File lịch sử " .. SERVER_HISTORY_FILENAME .. " không tồn tại/rỗng.") end
        end
    end
    serverHistoryCache = historySet
    return historySet
end

local function addJobIdToHistoryAndSave(jobIdToAdd)
    if not jobIdToAdd or not canAccessFiles then return end
    serverHistoryCache[jobIdToAdd] = true
    local historyLines = {}
    for id in pairs(serverHistoryCache) do table.insert(historyLines, id) end
    local contentToWrite = table.concat(historyLines, "\n")
    local success, err = pcall(writefile_func, SERVER_HISTORY_FILENAME, contentToWrite)
    if success then print("[ServerHop] Đã cập nhật lịch sử server, thêm ID: " .. jobIdToAdd)
    else print("[ServerHop] Lỗi lưu lịch sử: " .. tostring(err)) end
end

-- --- Logic Tìm Server ---
local chosenServer = nil
local serversUrlBase = "https://games.roblox.com/v1/games/" .. placeId .. "/servers/Public?sortOrder=Asc&limit=100"
local serverHistoryToAvoid = loadServerHistory()

local function listServers(cursor)
    local requestUrl = serversUrlBase
    if cursor then requestUrl = requestUrl .. "&cursor=" .. cursor end
    local successCall, result = pcall(function() return game:HttpGet(requestUrl, true) end)
    if not successCall then return false, "HttpGet thất bại: " .. tostring(result) end
    local successDecode, decodedResult = pcall(function() return HttpService:JSONDecode(result) end)
    if not successDecode then return false, "JSONDecode thất bại: " .. tostring(decodedResult) end
    return true, decodedResult
end

function searchForServer()
    local historyCount = 0
    for _ in pairs(serverHistoryToAvoid) do historyCount = historyCount + 1 end
    updateStatus(string.format("Bắt đầu tìm server (%.0f%% - <%.0f%%). Tránh server hiện tại và %d server trong lịch sử.",
        minPlayerPercentage * 100, maxPlayerPercentageLimit * 100, historyCount))

    local searchLoopActive = true
    chosenServer = nil -- Reset chosenServer trước mỗi lần tìm kiếm mới
    while searchLoopActive and not chosenServer do
        local currentNextCursorForFullScan = nil
        local currentRetryDelaySearch = baseRetryDelay -- Đổi tên biến để không trùng với biến retry trong page fetch
        updateStatus("Bắt đầu lượt quét mới...")
        
        local allPagesScannedForThisRound = false
        while not allPagesScannedForThisRound and not chosenServer do
            local pageScanAttempts = 0
            local maxPageScanAttempts = 4
            local pageSuccessfullyFetched = false
            local currentRetryDelayPage = baseRetryDelay -- Biến retry cho việc fetch page

            while not pageSuccessfullyFetched and pageScanAttempts < maxPageScanAttempts do
                pageScanAttempts = pageScanAttempts + 1
                if pageScanAttempts > 1 then
                    updateStatus(string.format("Thử lại lấy trang (lần %d/%d). Chờ %.1fs...", pageScanAttempts, maxPageScanAttempts, currentRetryDelayPage))
                    task.wait(currentRetryDelayPage) -- Sửa: dùng wait thay vì task.wait
                    currentRetryDelayPage = math.min(currentRetryDelayPage * 2, maxRetryDelay)
                else
                    updateStatus("Đang lấy trang server (cursor: " .. (currentNextCursorForFullScan or "đầu tiên") .. ")...")
                end

                local success, dataOrError = listServers(currentNextCursorForFullScan)

                if success then
                    pageSuccessfullyFetched = true
                    currentRetryDelayPage = baseRetryDelay 
                    local serverListData = dataOrError

                    if serverListData and serverListData.data then
                        local pageSuitableServers = {}
                        if #serverListData.data > 0 then
                             updateStatus("Đã nhận " .. #serverListData.data .. " server. Đang lọc...")
                            
                            for _, serverInfo in ipairs(serverListData.data) do
                                local serverId = serverInfo.id
                                local isCurrentServer = (serverId == currentJobId)
                                local isInHistory = (serverHistoryToAvoid[serverId] == true)

                                if not isCurrentServer and not isInHistory then
                                    if serverInfo.playing and serverInfo.maxPlayers and serverInfo.maxPlayers > 0 then
                                        local playerRatio = serverInfo.playing / serverInfo.maxPlayers
                                        if playerRatio >= minPlayerPercentage and playerRatio < maxPlayerPercentageLimit and serverInfo.playing < serverInfo.maxPlayers then
                                            table.insert(pageSuitableServers, serverInfo)
                                        end
                                    end
                                end
                            end

                            if #pageSuitableServers > 0 then
                                updateStatus("Đã tìm thấy " .. #pageSuitableServers .. " server phù hợp trên trang này. Chọn ngẫu nhiên...")
                                chosenServer = pageSuitableServers[math.random(1, #pageSuitableServers)]
                                allPagesScannedForThisRound = true 
                                break 
                            else
                                updateStatus("Không có server nào phù hợp trên trang này (sau khi loại trừ).")
                            end
                        else
                            updateStatus("Trang này không có server nào.")
                        end
                        
                        if not chosenServer then
                            currentNextCursorForFullScan = serverListData.nextPageCursor
                            if not currentNextCursorForFullScan then
                                allPagesScannedForThisRound = true 
                                updateStatus("Đã quét hết các trang trong lượt này (không tìm thấy server phù hợp).")
                            end
                        end
                    else
                        updateStatus("Dữ liệu server không hợp lệ dù API gọi thành công.")
                        currentNextCursorForFullScan = serverListData and serverListData.nextPageCursor
                         if not currentNextCursorForFullScan then allPagesScannedForThisRound = true end
                    end
                else 
                    local errorMessage = dataOrError
                    updateStatus("Lỗi API: " .. errorMessage)
                    if pageScanAttempts >= maxPageScanAttempts then
                        updateStatus("Không thể lấy dữ liệu trang này sau " .. maxPageScanAttempts .. " lần thử. Bỏ qua lượt quét này.")
                        allPagesScannedForThisRound = true 
                    end
                end
            end 

            if chosenServer or allPagesScannedForThisRound then break end
            if pageSuccessfullyFetched and not allPagesScannedForThisRound and not chosenServer then
                 updateStatus("Chờ " .. waitTimeBetweenPageFetches .. "s trước khi lấy trang tiếp theo...")
                 task.wait(waitTimeBetweenPageFetches) -- Sửa: dùng wait thay vì task.wait
            end
        end

        if chosenServer then
            updateStatus(string.format("ĐÃ CHỌN SERVER! ID: %s. Người chơi: %d/%d (%.1f%%)",
                chosenServer.id, chosenServer.playing, chosenServer.maxPlayers, (chosenServer.playing / chosenServer.maxPlayers) * 100))
            searchLoopActive = false
        elseif allPagesScannedForThisRound then
             updateStatus(string.format("Không tìm thấy server phù hợp sau khi quét toàn bộ. Chờ %d giây rồi quét lại...", waitTimeBetweenFullScans))
            task.wait(waitTimeBetweenFullScans) -- Sửa: dùng wait thay vì task.wait
        end
         if not searchLoopActive then break end
    end

    if chosenServer then
        updateStatus("Chuẩn bị dịch chuyển đến server ID: " .. chosenServer.id .. "...")
        addJobIdToHistoryAndSave(currentJobId)
        task.wait(2) -- Sửa: dùng wait thay vì task.wait
        
        local success, err = pcall(function()
            TeleportService:TeleportToPlaceInstance(placeId, chosenServer.id, LocalPlayer)
        end)
        
        if not success then
            updateStatus("Dịch chuyển thất bại: " .. tostring(err) .. ". Script sẽ thử tìm lại server khác sau 5 giây...")
            chosenServer = nil 
            task.wait(5) -- Sửa: dùng wait thay vì task.wait
            searchForServer() 
        end
    else
        updateStatus("Không thể tìm thấy server phù hợp sau nhiều lần thử. Script sẽ dừng hoặc thử lại sau một khoảng thời gian.")
        -- Có thể thêm logic để thử lại performCountdownThenSearch sau một thời gian dài ở đây nếu muốn
    end
end

-- [[ THAY ĐỔI TỪ ĐÂY ]] --
local countdownShouldReset = false -- Biến cờ để báo hiệu reset
local currentCountdownThread = nil -- Lưu trữ coroutine đếm ngược hiện tại

local function performCountdownThenSearch(minutesToWait)
    if not minutesToWait or minutesToWait <= 0 then
        updateStatus("Thời gian chờ không hợp lệ. Bắt đầu tìm server ngay...")
        searchForServer()
        return
    end

    local totalWaitSeconds = minutesToWait * 60
    updateStatus(string.format("Đã đặt giờ! Bắt đầu tìm server sau: %d phút %d giây...", math.floor(totalWaitSeconds / 60), totalWaitSeconds % 60))
    
    for i = totalWaitSeconds, 0, -1 do
        if countdownShouldReset then -- Kiểm tra cờ reset
            countdownShouldReset = false -- Đặt lại cờ
            updateStatus("Đã có donate! Reset bộ đếm giờ...")
            performCountdownThenSearch(DEFAULT_WAIT_MINUTES) -- Gọi lại chính hàm này để bắt đầu đếm lại
            return -- Kết thúc vòng lặp hiện tại
        end
        local minutesLeft = math.floor(i / 60)
        local secondsLeft = i % 60
        updateStatus(string.format("Tìm server sau: %d phút %d giây...", minutesLeft, secondsLeft))
        task.wait(1) -- Sử dụng task.wait() trong coroutine là ổn
    end

    -- Nếu không bị reset, thì thực hiện tìm server
    searchForServer()
end

local function startInitialCountdown()
    -- Hủy coroutine đếm ngược cũ nếu có
    if currentCountdownThread and coroutine.status(currentCountdownThread) ~= "dead" then
        coroutine.close(currentCountdownThread) -- Sử dụng coroutine.close để hủy (cần executor hỗ trợ)
                                               -- Hoặc dùng một biến cờ khác để báo coroutine tự dừng.
                                               -- Trong trường hợp này, việc gọi lại performCountdownThenSearch đã xử lý việc "reset" logic.
    end
    -- Tạo coroutine mới cho việc đếm ngược
    currentCountdownThread = coroutine.create(function()
        performCountdownThenSearch(DEFAULT_WAIT_MINUTES)
    end)
    coroutine.resume(currentCountdownThread)
end

-- --- Xử lý sự kiện Donate ---
local leaderstats = LocalPlayer:WaitForChild("leaderstats")
local raisedValueObject = leaderstats:WaitForChild("Raised") -- Giả sử tên là "Raised"
local lastRaisedValue = raisedValueObject.Value

raisedValueObject.Changed:Connect(function(newRaisedAmount)
    if newRaisedAmount > lastRaisedValue then
        updateStatus(string.format("Phát hiện donate! Số tiền Raised tăng từ %d lên %d.", lastRaisedValue, newRaisedAmount))
        lastRaisedValue = newRaisedAmount
        
        -- Đặt cờ để reset countdown
        countdownShouldReset = true 
        
        -- Nếu coroutine đếm ngược đang chạy, chúng ta cần một cách để nó nhận biết và tự reset.
        -- Việc kiểm tra `countdownShouldReset` trong vòng lặp của `performCountdownThenSearch` sẽ xử lý điều này.
        -- Nếu `performCountdownThenSearch` không chạy trong coroutine, bạn có thể cần trực tiếp gọi lại hàm đếm ngược từ đây.
        -- Tuy nhiên, với cấu trúc hiện tại, cờ là đủ nếu `performCountdownThenSearch` đang hoạt động.
        -- Nếu `performCountdownThenSearch` đã kết thúc và `searchForServer` đang chạy, thì việc reset sẽ có hiệu lực cho LẦN ĐẾM NGƯỢC TIẾP THEO.
        -- Để reset ngay cả khi đang tìm server, logic sẽ phức tạp hơn (cần ngắt `searchForServer`).
        -- Hiện tại, nó sẽ reset lần đếm ngược *tiếp theo* hoặc lần đếm ngược *hiện tại* nếu nó chưa kết thúc.

        -- Để đảm bảo bộ đếm được reset ngay và bắt đầu lại:
        if currentCountdownThread and coroutine.status(currentCountdownThread) ~= "dead" then
             -- Cách đơn giản nhất là để vòng lặp trong performCountdownThenSearch tự xử lý thông qua cờ.
             -- Nếu muốn "cưỡng ép" hơn, bạn có thể thử hủy và tạo lại coroutine,
             -- nhưng cần cẩn thận để tránh race condition.
             print("[ServerHop] Cờ reset đã được đặt do có donate.")
        else
            -- Nếu không có countdown nào đang chạy (ví dụ: đang trong quá trình searchForServer)
            -- thì lần performCountdownThenSearch tiếp theo (sau khi search xong) sẽ được reset.
            -- Hoặc, chúng ta có thể chủ động bắt đầu lại một countdown mới ngay nếu không có cái nào đang hoạt động.
            -- Tuy nhiên, logic hiện tại là searchForServer xong sẽ không tự động chạy lại countdown.
            -- Bạn cần quyết định luồng mong muốn: sau khi hop server, có tự động bắt đầu countdown mới không?
            -- Giả sử sau khi hop server, script sẽ chạy lại từ đầu hoặc bạn có logic để gọi lại startInitialCountdown.
            print("[ServerHop] Donate được phát hiện, cờ reset được đặt. Lần đếm ngược tiếp theo sẽ được reset.")
        end
    end
end)
-- [[ KẾT THÚC THAY ĐỔI ]] --


-- --- Khởi chạy Script ---
updateStatus("Script đã khởi động. Chuẩn bị bắt đầu sau 5 giây để ổn định...") -- Giảm thời gian chờ ban đầu
task.wait(5) 
updateStatus("Thời gian chờ mặc định trước khi tìm server: " .. DEFAULT_WAIT_MINUTES .. " phút.")
startInitialCountdown() -- Bắt đầu đếm ngược ban đầu
