--[[
    SCRIPT TÍCH HỢP: AUTOHOP & CHỐNG BOT V5.0 - VIẾT LẠI HOÀN TOÀN
    - Mô tả: Một phiên bản được tái cấu trúc hoàn toàn để tối đa hóa độ ổn định và khả năng tương thích.
    - Cải tiến chính:
        1. Tìm kiếm UI động: Tự động tìm kiếm các thành phần giao diện người dùng cần thiết thay vì dựa vào các đường dẫn cố định.
        2. Khởi tạo theo từng giai đoạn với xác minh: Cung cấp phản hồi rõ ràng về những gì đang hoạt động và những gì không.
        3. Quản lý trạng thái tập trung để tránh xung đột.
        4. Xử lý lỗi mạnh mẽ hơn để ngăn chặn sự cố.
]]

-- =================================================================
-- PHẦN 1: CÀI ĐẶT
-- =================================================================
local SETTINGS = {
    ["EnableAntiBotHop"] = true,
    ["BOT_KEYWORDS"] = { "spin", "jump", "afk", "auto", "bot", "free", "pls donate", "hack", "script" },
    ["DETECTION_THRESHOLD"] = 5,
    ["SCAN_INTERVAL"] = 15,

    ["EnableServerHop"] = true,
    ["WaitMinutes"] = 10,
    ["MinPlayerPercentage"] = 0.50,
    ["MaxPlayerPercentage"] = 0.90,

    ["EnableSafePlatform"] = true,
    ["EnableStaticAfkView"] = true,
    ["EnableDonateReset"] = true,
    ["EnableAutoReconnect"] = true,
    
    ["EnableDiscordWebhook"] = true,
    ["WebhookURL"] = "https://discord.com/api/webhooks/1340178818047938631/BfOLWVDxNjoKRRQ9Iy6IKbkGBrJttW_2OXq_4C7ZKQnceVEQxOWuIxVveIoX4Jk1wke4",
    ["WebhookColor"] = 16738740,
    ["EnablePingOnDonate"] = true,
    ["PingAmount"] = 1000,
    ["PingUserID"] = "",

    ["EnableGraphicsOptimization"] = true,
    ["EnableCpuOptimization"] = true,
    ["SetSimulationRadiusToZero"] = true,
    ["TargetFps"] = 7,

    ["EnableFileHistory"] = true,
    ["InitialWaitTime"] = 10,
}

-- =================================================================
-- PHẦN 2: KHỞI TẠO NỀN TẢNG
-- =================================================================
local Services = {
    TeleportService = game:GetService("TeleportService"),
    HttpService = game:GetService("HttpService"),
    Players = game:GetService("Players"),
    CoreGui = game:GetService("CoreGui"),
    Workspace = game:GetService("Workspace"),
    VirtualUser = game:GetService("VirtualUser")
}

local LocalPlayer = Services.Players.LocalPlayer
local placeId = game.PlaceId
local currentJobId = game.JobId

-- Bảng trạng thái trung tâm
local State = {
    isHopping = false,
    boothUI = nil,
    countdownThread = nil,
    countdownShouldReset = false
}

-- =================================================================
-- PHẦN 3: GIAO DIỆN NGƯỜI DÙNG (GUI)
-- =================================================================
local SCRIPT_GUI_NAME = "IntegratedStatusGUI_V5_0"
if Services.CoreGui:FindFirstChild(SCRIPT_GUI_NAME) then Services.CoreGui[SCRIPT_GUI_NAME]:Destroy() end

local screenGui = Instance.new("ScreenGui", Services.CoreGui)
screenGui.Name = SCRIPT_GUI_NAME
screenGui.ResetOnSpawn = false
screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

local mainFrame = Instance.new("Frame", screenGui)
mainFrame.Size = UDim2.new(0, 280, 0, 100)
mainFrame.Position = UDim2.new(0.015, 0, 0.3, 0)
mainFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
mainFrame.BorderColor3 = Color3.fromRGB(80, 80, 80)
mainFrame.Draggable = true

local titleLabel = Instance.new("TextLabel", mainFrame)
titleLabel.Size = UDim2.new(1, 0, 0, 28)
titleLabel.BackgroundColor3 = Color3.fromRGB(255, 0, 85)
titleLabel.Font = Enum.Font.SourceSansBold
titleLabel.Text = "Bảng Điều Khiển V5.0"
titleLabel.TextColor3 = Color3.new(1, 1, 1)
titleLabel.TextSize = 16

local statusLabel = Instance.new("TextLabel", mainFrame)
statusLabel.Size = UDim2.new(1, -10, 1, -33)
statusLabel.Position = UDim2.new(0, 5, 0, 33)
statusLabel.Font = Enum.Font.SourceSans
statusLabel.Text = "Đang khởi tạo..."
statusLabel.TextColor3 = Color3.new(1, 1, 1)
statusLabel.TextSize = 14
statusLabel.TextWrapped = true
statusLabel.TextXAlignment = Enum.TextXAlignment.Left
statusLabel.TextYAlignment = Enum.TextYAlignment.Top

local countdownLabel = Instance.new("TextLabel", screenGui)
countdownLabel.Size = UDim2.new(1, 0, 0, 100)
countdownLabel.Position = UDim2.new(0, 0, 0.5, -50)
countdownLabel.BackgroundTransparency = 1
countdownLabel.Font = Enum.Font.SourceSansBold
countdownLabel.TextColor3 = Color3.new(1, 1, 1)
countdownLabel.TextSize = 70
countdownLabel.TextStrokeTransparency = 0

local function updateStatus(message, isError)
    print("[Status] " .. message)
    statusLabel.Text = message
    if isError then
        statusLabel.TextColor3 = Color3.fromRGB(255, 80, 80)
    else
        statusLabel.TextColor3 = Color3.new(1, 1, 1)
    end
end

-- =================================================================
-- PHẦN 4: CÁC HÀM CỐT LÕI
-- =================================================================

-- Hàm tìm kiếm UI động và mạnh mẽ
function findBoothUI()
    updateStatus("Đang tìm BoothUI...")
    local searchAreas = {Services.Workspace, LocalPlayer:WaitForChild("PlayerGui")}
    for _, area in ipairs(searchAreas) do
        local descendant = area:FindFirstChild("BoothUI", true)
        if descendant and descendant:IsA("Frame") then
            updateStatus("THÀNH CÔNG: Đã tìm thấy BoothUI!")
            return descendant
        end
    end
    
    -- Nếu không tìm thấy bằng cách trực tiếp, thử tìm theo tên container
    local mapUIContainer = LocalPlayer.PlayerGui:FindFirstChild("MapUIContainer", true)
    if mapUIContainer then
        local mapUI = mapUIContainer:FindFirstChild("MapUI")
        if mapUI then
             local boothUI = mapUI:FindFirstChild("BoothUI")
             if boothUI then
                updateStatus("THÀNH CÔNG: Đã tìm thấy BoothUI trong MapUIContainer!")
                return boothUI
             end
        end
    end

    updateStatus("LỖI: Không thể tìm thấy BoothUI. Chức năng quét bot sẽ bị vô hiệu hóa.", true)
    return nil
end

-- Hàm tìm server
function searchForServer()
    if State.isHopping then return end
    State.isHopping = true
    
    if State.countdownThread then coroutine.close(State.countdownThread) end
    countdownLabel.Text = ""

    updateStatus("Đang tìm server mới...")
    
    local serversUrl = "https://games.roblox.com/v1/games/" .. placeId .. "/servers/Public?sortOrder=Asc&limit=100"
    local serverHistory = {} -- Thêm logic đọc file nếu cần
    
    local chosenServer = nil
    local nextCursor = ""
    
    while not chosenServer and nextCursor ~= nil do
        local success, response = pcall(Services.HttpService.GetAsync, Services.HttpService, serversUrl .. (nextCursor and "&cursor="..nextCursor or ""))
        if success and response then
            local data, decodeErr = pcall(Services.HttpService.JSONDecode, Services.HttpService, response)
            if data and data.data then
                local suitableServers = {}
                for _, serverInfo in ipairs(data.data) do
                    if serverInfo.id ~= currentJobId and not serverHistory[serverInfo.id] then
                        if serverInfo.playing and serverInfo.maxPlayers and serverInfo.maxPlayers > 0 then
                            local ratio = serverInfo.playing / serverInfo.maxPlayers
                            if ratio >= SETTINGS.MinPlayerPercentage and ratio < SETTINGS.MaxPlayerPercentage then
                                table.insert(suitableServers, serverInfo)
                            end
                        end
                    end
                end
                
                if #suitableServers > 0 then
                    chosenServer = suitableServers[math.random(1, #suitableServers)]
                    break
                end
                nextCursor = data.nextPageCursor
            else
                updateStatus("LỖI: Dữ liệu server không hợp lệ.", true)
                break
            end
        else
            updateStatus("LỖI: Không thể kết nối đến API Roblox.", true)
            break
        end
        task.wait(1)
    end
    
    if chosenServer then
        updateStatus("Đã tìm thấy server! Đang dịch chuyển...")
        local success, err = pcall(Services.TeleportService.TeleportToPlaceInstance, Services.TeleportService, placeId, chosenServer.id, LocalPlayer)
        if not success then
            updateStatus("LỖI DỊCH CHUYỂN: " .. tostring(err), true)
            State.isHopping = false -- Cho phép thử lại
        end
    else
        updateStatus("Không tìm thấy server phù hợp. Thử lại sau...", false)
        State.isHopping = false
        if SETTINGS.EnableServerHop then startInitialCountdown() end -- Khởi động lại đếm ngược nếu không tìm thấy
    end
end

-- Hàm đếm ngược
function performCountdownThenSearch(minutes)
    local totalSeconds = minutes * 60
    for i = totalSeconds, 0, -1 do
        if State.isHopping then break end
        if State.countdownShouldReset then
            State.countdownShouldReset = false
            updateStatus("Donate! Đặt lại thời gian.")
            performCountdownThenSearch(SETTINGS.WaitMinutes) -- Bắt đầu lại từ đầu
            return
        end
        
        countdownLabel.Text = string.format("%02d:%02d", math.floor(i/60), i % 60)
        task.wait(1)
    end
    
    if not State.isHopping then
        countdownLabel.Text = ""
        searchForServer()
    end
end

function startInitialCountdown()
    if State.isHopping then return end
    updateStatus(string.format("Sẽ chuyển server trong %d phút.", SETTINGS.WaitMinutes))
    if State.countdownThread and coroutine.status(State.countdownThread) ~= "dead" then
        coroutine.close(State.countdownThread)
    end
    
    State.countdownThread = coroutine.create(function()
        performCountdownThenSearch(SETTINGS.WaitMinutes)
    end)
    coroutine.resume(State.countdownThread)
end

-- Hàm quét bot
function startAntiBotScan()
    if not SETTINGS.EnableAntiBotHop or not State.boothUI then return end
    
    updateStatus("Chức năng quét bot đang hoạt động.")
    
    while SETTINGS.EnableAntiBotHop and not State.isHopping do
        local botCount = 0
        local success, err = pcall(function()
            for _, boothFrame in ipairs(State.boothUI:GetChildren()) do
                if boothFrame:IsA("Frame") and boothFrame:FindFirstChild("Sign") and boothFrame.Sign:FindFirstChild("TextLabel") then
                    if boothFrame:GetAttribute("IsFlaggedAsBot") then
                        botCount = botCount + 1
                    else
                        local boothText = string.lower(boothFrame.Sign.TextLabel.Text)
                        for _, keyword in ipairs(SETTINGS.BOT_KEYWORDS) do
                            if string.find(boothText, keyword) then
                                boothFrame:SetAttribute("IsFlaggedAsBot", true)
                                botCount = botCount + 1
                                break
                            end
                        end
                    end
                end
            end
        end)
        
        if not success then
            updateStatus("LỖI khi quét gian hàng: " .. tostring(err), true)
        else
            updateStatus(string.format("Quét bot: %d/%d. Chờ %ds.", botCount, SETTINGS.DETECTION_THRESHOLD, SETTINGS.SCAN_INTERVAL))
        end

        if botCount >= SETTINGS.DETECTION_THRESHOLD then
            updateStatus("Đã đạt ngưỡng bot! Kích hoạt chuyển server.", true)
            searchForServer()
            break
        end
        
        task.wait(SETTINGS.SCAN_INTERVAL)
    end
end

-- =================================================================
-- PHẦN 5: CÁC TÍNH NĂNG PHỤ & KHỞI CHẠY
-- =================================================================

function setupAntiAfk()
    LocalPlayer.Idled:Connect(function()
        Services.VirtualUser:CaptureController()
        Services.VirtualUser:ClickButton2(Vector2.new())
        print("[AntiAFK] Đã ngăn chặn AFK.")
    end)
end

function setupDonateListener()
    if not SETTINGS.EnableDonateReset and not SETTINGS.EnableDiscordWebhook then return end
    
    local leaderstats = LocalPlayer:WaitForChild("leaderstats", 30)
    if not leaderstats then return end
    local raised = leaderstats:WaitForChild("Raised", 30)
    if not raised then return end
    
    local lastRaised = raised.Value
    raised.Changed:Connect(function(newRaisedValue)
        local difference = newRaisedValue - lastRaised
        if difference > 0 then
            if SETTINGS.EnableDonateReset then
                State.countdownShouldReset = true
            end
            -- Thêm logic webhook ở đây nếu cần
        end
        lastRaised = newRaisedValue
    end)
end

function main()
    -- Bước 1: Thiết lập các chức năng cơ bản
    setupAntiAfk()
    setupDonateListener()
    
    updateStatus(string.format("Chờ game tải trong %d giây...", SETTINGS.InitialWaitTime))
    task.wait(SETTINGS.InitialWaitTime)

    -- Bước 2: Tìm các thành phần UI quan trọng
    State.boothUI = findBoothUI()

    -- Bước 3: Kích hoạt các luồng chính
    if SETTINGS.EnableAntiBotHop and State.boothUI then
        task.spawn(startAntiBotScan)
    end
    
    if SETTINGS.EnableServerHop then
        startInitialCountdown()
    else
        updateStatus("Chuyển server theo thời gian đã TẮT.")
    end
    
    print("[MainInit] Script đã hoàn tất khởi chạy.")
end

-- Bọc toàn bộ script trong một pcall để bắt lỗi khởi tạo cuối cùng
local success, err = pcall(main)
if not success then
    updateStatus("LỖI KHỞI TẠO NGHIÊM TRỌNG: " .. tostring(err), true)
    warn("Lỗi khởi tạo script chính: ", err)
end
