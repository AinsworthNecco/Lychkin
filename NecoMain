--================================================================
-- PHẦN 1: KHAI BÁO DỊCH VỤ VÀ BIẾN
--================================================================

-- Dịch vụ Roblox
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local TeleportService = game:GetService("TeleportService")
local HttpService = game:GetService("HttpService")
local RunService = game:GetService("RunService")
local VirtualUser = game:GetService("VirtualUser")

-- Biến người chơi
local LocalPlayer = Players.LocalPlayer
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")

-- Anti-AFK
task.spawn(function()
    if not VirtualUser then return end
    LocalPlayer.Idled:Connect(function()
        VirtualUser:CaptureController()
        VirtualUser:ClickButton2(Vector2.new())
    end)
end)

--================================================================
-- PHẦN 2: GIAO DIỆN FLUENT UI
--================================================================

-- Tải thư viện Fluent
local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()

-- Tạo cửa sổ chính
local Window = Fluent:CreateWindow({
    Title = "Lychkin's Plsdonate",
    SubTitle = "Lưu và Tải Cài Đặt",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true,
})

-- Tùy chọn (lưu giá trị UI)
local Options = Fluent.Options

-- Tabs giao diện
local Tabs = {
    AutoFarm = Window:AddTab({ Title = "AutoFarm", Icon = "" }),
    Hop      = Window:AddTab({ Title = "Hop",      Icon = "" }),
	Booth      = Window:AddTab({ Title = "Booth",      Icon = "" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "" }),
}

--================================================================
-- PHẦN 3: SAVE MANAGER (KIẾN TRÚC MỚI)
--================================================================

local SaveManager = {}
local FOLDER_NAME = "Lychkin"
local FILE_NAME = "LychkinPlsdonate.txt"
local FILE_PATH = FOLDER_NAME .. "/" .. FILE_NAME

-- Đảm bảo thư mục tồn tại
if not isfolder(FOLDER_NAME) then
    makefolder(FOLDER_NAME)
end

-- Hàm này chỉ đọc file và trả về dữ liệu dưới dạng bảng
function SaveManager:LoadData()
    if not isfile(FILE_PATH) then return {} end

    local success, fileContent = pcall(readfile, FILE_PATH)
    if not success or fileContent == "" then return {} end

    local success, decodedData = pcall(function()
        return HttpService:JSONDecode(fileContent)
    end)

    if success and type(decodedData) == "table" then
        Fluent:Notify({
            Title = "Tải thành công",
            Content = "Đã áp dụng cài đặt đã lưu.",
            Duration = 3
        })
        return decodedData
    else
        warn("Lỗi file cài đặt, sử dụng cài đặt mặc định.")
        return {}
    end
end

-- Hàm lưu không thay đổi nhiều
function SaveManager:Save()
    local dataToSave = {}
    for name, option in pairs(Options) do
        dataToSave[name] = option.Value
    end

    local success, encodedData = pcall(function()
        return HttpService:JSONEncode(dataToSave)
    end)

    if success then
        writefile(FILE_PATH, encodedData)
        Fluent:Notify({ Title = "Đã lưu!", Content = "Cài đặt của bạn đã được lưu.", Duration = 2 })
    else
        warn("Lỗi khi lưu cài đặt:", encodedData)
    end
end

--SaveData
local savedData = SaveManager:LoadData()

--================================================================
-- PHẦN 4: LOGIC AND TABS (KIẾN TRÚC MỚI)
--================================================================

------------------------------------------------------------------
--- BoothSettings
------------------------------------------------------------------

-- AutoClaimBooth

-- Biến quản lý vòng lặp cho chức năng này
local claimBoothConnection = nil

-- Hàm chính để thực hiện việc chiếm booth
local function executeAutoClaim()
    -- Tìm Remotes một lần và lưu lại để dùng sau
    local Remotes
    for i, v in next, ReplicatedStorage:GetChildren() do
        if v.Name:find('Remote') and v:IsA('ModuleScript') then
            if pcall(function() require(v).Event('PromotionBlimpGiftbux'):FireServer() end) then
                Remotes = require(v)
                break
            end
        end
        task.wait()
    end

    if not Remotes then
        Fluent:Notify({ Title = "Lỗi", Content = "Không tìm thấy Remotes của game.", Duration = 5 })
        Options.AutoClaimBooth:set(false) -- Tự động tắt nút nếu lỗi
        return
    end

    -- Vòng lặp chính của chức năng, chạy mỗi Heartbeat
    claimBoothConnection = RunService.Heartbeat:Connect(function()
        -- Kiểm tra xem mình đã có booth chưa
        local myBooth = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("MyBooth")
        if myBooth and myBooth.Value then
            Fluent:Notify({ Title = "Auto Claim", Content = "Đã có booth. Chức năng tự tắt.", Duration = 5 })
            Options.AutoClaimBooth:set(false) -- Tự động tắt nút (sẽ ngắt kết nối trong OnChanged)
            return
        end

        -- Tìm MapUI
        local boothLocation
        local suc, res = pcall(function() return Workspace:WaitForChild('MapUI', 0) end)
        if suc and res then
            boothLocation = res
        else
            local suc2, res2 = pcall(function() return PlayerGui:WaitForChild('MapUIContainer', 0):WaitForChild('MapUI', 0) end)
            if suc2 and res2 then boothLocation = res2 end
        end

        if not boothLocation then return end -- Đợi frame sau nếu chưa có

        -- Quét các booth trống
        local boothUI = boothLocation:FindFirstChild("BoothUI")
        local interactions = Workspace:FindFirstChild("BoothInteractions")
        if not (boothUI and interactions) then return end

        for _, uiFrame in ipairs(boothUI:GetChildren()) do
            if uiFrame:IsA("Frame") and uiFrame:FindFirstChild("Details") and uiFrame.Details.Owner.Text == "unclaimed" then
                local boothNum = tonumber(uiFrame.Name:match("%d+"))
                if boothNum then
                    Fluent:Notify({ Title = "Auto Claim", Content = "Tìm thấy booth trống! Đang chiếm số " .. boothNum, Duration = 3 })
                    Remotes.Event("ClaimBooth"):InvokeServer(boothNum)
                    task.wait(1.5) -- Đợi game xử lý
                    -- Sau khi chiếm, vòng lặp sẽ tự dừng ở lần kiểm tra tiếp theo
                    return -- Thoát khỏi vòng lặp for, đợi Heartbeat tiếp theo kiểm tra lại
                end
            end
        end
    end)
end

-- Tạo nút Toggle trong tab Booth
Tabs.Booth:AddToggle("AutoClaimBooth", {
    Title = "Tự động chiếm Booth",
    Description = "Luôn tự động tìm và chiếm gian hàng trống khi bạn chưa có.",
    Default = savedData.AutoClaimBooth or false,
}):OnChanged(function(newValue)
    if newValue == true then
        Fluent:Notify({ Title = "Auto Claim", Content = "Đã bật! Bắt đầu tìm booth.", Duration = 5 })
        executeAutoClaim()
    else
        -- Ngắt kết nối để dừng vòng lặp
        if claimBoothConnection then
            claimBoothConnection:Disconnect()
            claimBoothConnection = nil
            Fluent:Notify({ Title = "Auto Claim", Content = "Đã tắt.", Duration = 5 })
        end
    end
    task.wait(); SaveManager:Save()
end)

-- Kích hoạt ban đầu nếu cài đặt được tải là true
if Options.AutoClaimBooth.Value == true then
    executeAutoClaim()
end
