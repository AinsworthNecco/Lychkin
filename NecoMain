--[[
    SCRIPT AFK, SERVER HOP & CHỐNG BOT TÍCH HỢP V4.3 (Sửa lỗi treo)
    - Mô tả: Tự động quét bot khi vào server. Nếu server "sạch", script sẽ bắt đầu
      chu trình AFK. Nếu server có quá nhiều bot, script sẽ tự động chuyển server.
    - Cập nhật:
        - Viết lại hoàn toàn logic khởi động để chống treo/đứng hình.
        - Sửa lỗi console gỡ lỗi không hiển thị tin nhắn.
        - Console gỡ lỗi giờ sẽ hiển thị màu khác nhau cho các loại thông báo.
    - Hướng dẫn: Chỉ chỉnh sửa các giá trị trong bảng "SETTINGS".
]]

local SETTINGS = {
    -- =================================================================
    -- CÀI ĐẶT CHỐNG BOT
    -- =================================================================
    ["EnableAntiBotScan"] = true,
    ["BOT_KEYWORDS"] = { "spin", "jump", "afk", "auto", "bot", "free", "pls donate", "hack", "script" },
    ["DETECTION_THRESHOLD"] = 1, -- Đặt là 1 để kiểm tra. Thay đổi lại sau khi test xong.

    -- =================================================================
    -- CÀI ĐẶT SERVER HOP & AFK
    -- =================================================================
    ["WaitMinutes"] = 10,
    ["MinPlayerPercentage"] = 0.50,
    ["MaxPlayerPercentage"] = 0.90,

    -- Bật/Tắt các tính năng chính
    ["EnableServerHop"] = true,
    ["EnableSafePlatform"] = true,
    ["EnableStaticAfkView"] = true,
    ["EnableDonateReset"] = true,
    ["EnableAutoReconnect"] = true,
    
    -- Cài đặt Thông Báo Donate qua Discord
    ["EnableDiscordWebhook"] = true,
    ["WebhookURL"] = "https://discord.com/api/webhooks/1340178818047938631/BfOLWVDxNjoKRRQ9Iy6IKbkGBrJttW_2OXq_4C7ZKQnceVEQxOWuIxVveIoX4Jk1wke4",
    ["WebhookColor"] = 16738740,
    ["EnablePingOnDonate"] = true,
    ["PingAmount"] = 1000,
    ["PingUserID"] = "",

    -- Cài đặt Tự Động Trả Lời (Auto Reply)
    ["EnableAutoReply"] = false,
    ["ReplyRadius"] = 25,
    ["ReplyCooldown"] = 7,
    ["ReplyRules"] = {
        { keywords = { "hi", "hello", "hey", "sup", "yo", "wsg", "howdy", "greetings", "wassup", "heya" }, replies = { "Hello!", "Hi there", "Hey!", "Yo", "What's up?", "Heya", "Sup", "Heyo!", "What's good?", "Well hello there." } },
        { keywords = { "only","donate", "pls", "give me", "robux pls", "can i have", "spare", "some robux", "can u donate", "plz donate", "can you give", "i need robux" }, replies = { "Sorry, I'm saving up right now.", "I can't donate at the moment, sorry.", "My robux is pending, can't help sorry.", "Sry, saving for something specific.", "Maybe later, I'm trying to reach my own goal.", "Can't right now, good luck though!", "All my robux is tied up, sorry.", "Sorry, my wallet is on a diet.", "I wish I could, but I'm broke lol." } },
        { keywords = { "bot", "auto", "script", "scripter", "macro", "afk farm", "autoclicker", "you a bot?" }, replies = { "I'm not a bot :)", "lol no, I'm a real player.", "Just vibing, not a bot.", "Beep boop? Nah, just kidding.", "I'm a human, I promise!", "Not a script, just dedicated lol.", "Do I look like a bot to you? :P", "Last time I checked, I still need to sleep. So, not a bot.", "01001110 01101111. (That means 'No' in binary)." } },
        { keywords = { "scam", "fake", "report", "scammer", "this is a scam", "don't trust", "he's a scammer", "is this fake" }, replies = { "This is not a scam.", "I'm not a scammer.", "It's legit, no worries.", "100% legit, my friend.", "No scams here, just good vibes.", "I'm just here to play the game like you.", "Why would you think it's a scam?", "The only thing I'm scamming is time, by playing this game.", "You've got the wrong person, I'm just here to chill." } },
        { keywords = { "why are you", "how are you", "spinning", "jumping", "afk" }, replies = { "Just farming for my goal.", "It's part of the grind.", "Doing this for donations." } },
    },

    -- Cài đặt hiệu năng
    ["EnableGraphicsOptimization"] = true,
    ["EnableCpuOptimization"] = true,
    ["SetSimulationRadiusToZero"] = true,
    ["TargetFps"] = 7,

    -- Cài đặt khác
    ["EnableFileHistory"] = true,
    ["InitialWaitTime"] = 10,

    -- Cài đặt giao diện
    ["EnableCountdownText"] = true,
    ["EnableCountdownColor"] = true,
}
-- --- KẾT THÚC CÀI ĐẶT ---

-- Nền tảng an toàn (Anti-Cheat Bypass)
local identifyexecutor = identifyexecutor or function() return 'Unknown' end
local cloneref = (identifyexecutor() ~= "Synapse Z" and not identifyexecutor():find("Codex") and cloneref) or function(o) return o end

-- Các service cần thiết
local TeleportService = cloneref(game:GetService("TeleportService"))
local HttpService = cloneref(game:GetService("HttpService"))
local Players = cloneref(game:GetService("Players"))
local TextChatService = cloneref(game:GetService("TextChatService"))
local Workspace = cloneref(game:GetService("Workspace"))
local Lighting = cloneref(game:GetService("Lighting"))
local SoundService = cloneref(game:GetService("SoundService"))
local RunService = cloneref(game:GetService("RunService"))
local CoreGui = cloneref(game:GetService("CoreGui"))
local LocalPlayer = Players.LocalPlayer

-- --- Cấu hình Script (Không nên thay đổi) ---
local placeId = game.PlaceId; local currentJobId = game.JobId; local waitTimeBetweenFullScans = 7; local waitTimeBetweenPageFetches = 0.75; local baseRetryDelay = 1; local maxRetryDelay = 16; local PLATFORM_VERTICAL_OFFSET = 0; local SERVER_HISTORY_FILENAME = "server_hop_history.txt"; local SERVER_HOP_GUI_NAME = "ServerHopStatusGUI"; local AFK_PLATFORM_NAME = "MySafeAFKPlatform"; local STATIC_HEAD_ANCHOR_PART_NAME = "AFK_HeadAnchor_StaticCam"; local STATIC_BLACK_SCREEN_PART_NAME = "AFK_BlackScreen_StaticCam"; local NEON_COLORS = { GREEN = Color3.fromRGB(10, 255, 20), YELLOW = Color3.fromRGB(255, 255, 0), BLUE = Color3.fromRGB(0, 150, 255), RED = Color3.fromRGB(255, 20, 20) }

-- --- Biến toàn cục cho GUI ---
local statusScreenGui, statusTextLabel, statusFrame, debugConsoleGui

-- --- Kiểm tra và gán hàm đọc/ghi file ---
local canAccessFiles = false; local writefile_func, readfile_func; if SETTINGS.EnableFileHistory then pcall(function() if writefile and readfile then canAccessFiles, writefile_func, readfile_func = true, writefile, readfile; print("[FileIO] Quyền file có sẵn.") else print("[FileIO] Quyền file KHÔNG có sẵn.") end end) else print("[FileIO] Lịch sử file bị TẮT.") end

-- =================================================================
-- CONSOLE GỠ LỖI TRÊN MÀN HÌNH (ĐÃ CẢI TIẾN)
-- =================================================================
local MAX_CONSOLE_LINES = 50

local function createDebugConsole()
    if CoreGui:FindFirstChild("DebugConsoleGUI") then debugConsoleGui = CoreGui.DebugConsoleGUI; return end
    local screenGui = Instance.new("ScreenGui"); screenGui.Name = "DebugConsoleGUI"; screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling; screenGui.Parent = CoreGui
    local mainFrame = Instance.new("Frame"); mainFrame.Name = "MainFrame"; mainFrame.Parent = screenGui; mainFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 20); mainFrame.BorderColor3 = Color3.fromRGB(80, 80, 80); mainFrame.BorderSizePixel = 1; mainFrame.Position = UDim2.new(0.01, 0, 0.5, 0); mainFrame.Size = UDim2.new(0, 300, 0, 150); mainFrame.Draggable = true; mainFrame.Active = true; mainFrame.Selectable = true; mainFrame.ClipsDescendants = true
    local titleLabel = Instance.new("TextLabel"); titleLabel.Name = "Title"; titleLabel.Parent = mainFrame; titleLabel.BackgroundColor3 = Color3.fromRGB(45, 45, 45); titleLabel.Size = UDim2.new(1, 0, 0, 20); titleLabel.Font = Enum.Font.SourceSansBold; titleLabel.Text = "Anti-Bot Debug Console"; titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255); titleLabel.TextSize = 14
    local scrollingFrame = Instance.new("ScrollingFrame"); scrollingFrame.Name = "LogContainer"; scrollingFrame.Parent = mainFrame; scrollingFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 20); scrollingFrame.BorderSizePixel = 0; scrollingFrame.Position = UDim2.new(0, 0, 0, 20); scrollingFrame.Size = UDim2.new(1, 0, 1, -20); scrollingFrame.CanvasSize = UDim2.new(0, 0, 0, 0); scrollingFrame.ScrollBarImageColor3 = Color3.fromRGB(100, 100, 100); scrollingFrame.ScrollBarThickness = 5
    local uiListLayout = Instance.new("UIListLayout"); uiListLayout.Parent = scrollingFrame; uiListLayout.SortOrder = Enum.SortOrder.LayoutOrder; uiListLayout.Padding = UDim.new(0, 2)
    debugConsoleGui = screenGui
end

local function debugPrint(message)
    print(message)
    if not debugConsoleGui or not debugConsoleGui.Parent then return end
    local scrollingFrame = debugConsoleGui:FindFirstChild("MainFrame") and debugConsoleGui.MainFrame:FindFirstChild("LogContainer")
    if not scrollingFrame then return end
    if #scrollingFrame:GetChildren() >= MAX_CONSOLE_LINES then scrollingFrame:GetChildren()[1]:Destroy() end
    local textLabel = Instance.new("TextLabel"); textLabel.Name = "LogLine"; textLabel.Parent = scrollingFrame; textLabel.BackgroundTransparency = 1; textLabel.Size = UDim2.new(1, -5, 0, 14); textLabel.Font = Enum.Font.Code; textLabel.Text = tostring(message); textLabel.TextSize = 12; textLabel.TextWrapped = true; textLabel.TextXAlignment = Enum.TextXAlignment.Left
    local msgLower = message:lower()
    if msgLower:find("error") or msgLower:find("lỗi") or msgLower:find("không thể") then textLabel.TextColor3 = Color3.fromRGB(255, 80, 80)
    elseif msgLower:find("phát hiện bot") then textLabel.TextColor3 = Color3.fromRGB(255, 120, 200) 
    elseif msgLower:find("success") or msgLower:find("thành công") or msgLower:find("sạch") then textLabel.TextColor3 = Color3.fromRGB(80, 255, 150)
    else textLabel.TextColor3 = Color3.fromRGB(225, 225, 225) end
    task.wait(); scrollingFrame.CanvasPosition = Vector2.new(0, scrollingFrame.UIListLayout.AbsoluteContentSize.Y)
end

-- --- UI Chính ---
local function createStatusGui()
    if playerGui:FindFirstChild(SERVER_HOP_GUI_NAME) then playerGui[SERVER_HOP_GUI_NAME]:Destroy() end
    statusScreenGui = Instance.new("ScreenGui"); statusScreenGui.Name = SERVER_HOP_GUI_NAME; statusScreenGui.ResetOnSpawn, statusScreenGui.ZIndexBehavior, statusScreenGui.IgnoreGuiInset = false, Enum.ZIndexBehavior.Sibling, true; statusScreenGui.Parent = playerGui
    statusFrame = Instance.new("Frame"); statusFrame.Name = "StatusFrame"; statusFrame.Size = UDim2.new(1, 0, 1, 0); statusFrame.BackgroundColor3, statusFrame.BorderSizePixel = NEON_COLORS.GREEN, 0; statusFrame.BackgroundTransparency = 1; statusFrame.ZIndex = 1; statusFrame.Parent = statusScreenGui
    local FIXED_TEXT_SIZE = 50; statusTextLabel = Instance.new("TextLabel"); statusTextLabel.Name = "StatusLabel"; statusTextLabel.Size = UDim2.new(0.9, 0, 0, FIXED_TEXT_SIZE + 40); statusTextLabel.Position = UDim2.new(0.5, 0, 0.5, 0); statusTextLabel.AnchorPoint = Vector2.new(0.5, 0.5); statusTextLabel.BackgroundTransparency = 1; statusTextLabel.TextColor3 = Color3.new(1, 1, 1); statusTextLabel.Font = Enum.Font.SourceSansSemibold; statusTextLabel.TextScaled = false; statusTextLabel.TextSize = FIXED_TEXT_SIZE; statusTextLabel.TextXAlignment, statusTextLabel.TextYAlignment = Enum.TextXAlignment.Center, Enum.TextYAlignment.Center; statusTextLabel.TextWrapped = true; statusTextLabel.Text = "..."; statusTextLabel.ZIndex = 2; statusTextLabel.Parent = statusScreenGui
end

-- --- Hàm cập nhật UI ---
local function updateDisplay(state, message)
    task.spawn(function()
        debugPrint("[UI] " .. tostring(message))
        if not statusTextLabel or not statusTextLabel.Parent then return end
        local stateColor = NEON_COLORS.GREEN; if state == "ERROR" then stateColor = NEON_COLORS.YELLOW end
        statusTextLabel.Text = tostring(message); statusTextLabel.TextColor3 = stateColor
        if SETTINGS.EnableCountdownColor then
            if statusFrame and statusFrame.Parent then
                if state == "SUCCESS" or state == "ERROR" then statusFrame.BackgroundColor3 = stateColor; statusFrame.BackgroundTransparency = 0.5 else statusFrame.BackgroundTransparency = 1 end
            end
        else
            if statusFrame then statusFrame.BackgroundTransparency = 1 end
        end
    end)
end

-- --- Các hàm tiện ích (File, Platform, View, CPU, Graphics) ---
local serverHistoryCache = {}; local function loadServerHistory() if not canAccessFiles then return {} end; local historySet = {}; local s, c = pcall(readfile_func, SERVER_HISTORY_FILENAME); if s and c then for line in string.gmatch(c,"[^".."\r\n".."]+") do local tL=line:match("^%s*(.-)%s*$") if tL and #tL>0 then historySet[tL]=true;end end end; serverHistoryCache=historySet; return historySet end
local function addJobIdToHistoryAndSave(jId) if not jId or not canAccessFiles then return end; serverHistoryCache[jId]=true; local l={}; for id in pairs(serverHistoryCache)do table.insert(l,id)end; pcall(writefile_func,SERVER_HISTORY_FILENAME,table.concat(l,"\n")) end
local function createSafePlatform() updateDisplay("INFO", "Đang tạo platform..."); if game.Workspace:FindFirstChild(AFK_PLATFORM_NAME) then updateDisplay("INFO", "Platform đã có."); return end; local p=Instance.new("Part");p.Name=AFK_PLATFORM_NAME;p.Anchored=true;p.CanCollide=true;p.Size=Vector3.new(20000,40,20000);p.Color=Color3.fromRGB(50,50,50);p.Transparency=0; local char=LocalPlayer.Character; local hum=char and char:FindFirstChildOfClass("Humanoid"); local hrp=char and char:FindFirstChild("HumanoidRootPart"); if hum and hrp then local hrpP=hrp.Position;local hrpSY=hrp.Size.Y;local hipH=hum.HipHeight;local fCIY=hrpP.Y-(hrpSY/2)-hipH;local pTTY=fCIY-PLATFORM_VERTICAL_OFFSET;local pCY=pTTY-(p.Size.Y/2);p.Position=Vector3.new(hrpP.X,pCY,hrpP.Z); else p.Position=Vector3.new(0,-30-PLATFORM_VERTICAL_OFFSET,0); end; p.Parent=game.Workspace; updateDisplay("SUCCESS", "Platform đã tạo."); end
local function setupStaticAfkView() updateDisplay("INFO", "Thiết lập view AFK tĩnh..."); local player = LocalPlayer; local character = player.Character or player.CharacterAdded:Wait(); if not character then return end; local head = character:WaitForChild("Head", 10); if not head then return end; local camera = workspace.CurrentCamera; if not camera then return end; local staticHeadAnchor = workspace:FindFirstChild(STATIC_HEAD_ANCHOR_PART_NAME) or Instance.new("Part"); staticHeadAnchor.Name=STATIC_HEAD_ANCHOR_PART_NAME; staticHeadAnchor.Size=Vector3.new(0.1,0.1,0.1); staticHeadAnchor.Transparency=1; staticHeadAnchor.CanCollide=false; staticHeadAnchor.Parent=workspace; staticHeadAnchor.CFrame = CFrame.new(head.Position); staticHeadAnchor.Anchored = true; local blackTarget = workspace:FindFirstChild(STATIC_BLACK_SCREEN_PART_NAME) or Instance.new("Part"); blackTarget.Name=STATIC_BLACK_SCREEN_PART_NAME; blackTarget.Size=Vector3.new(2500,2500,10); blackTarget.Color=Color3.new(0,0,0); blackTarget.CanCollide=false; blackTarget.Parent=workspace; local eastPositionFromAnchor = staticHeadAnchor.Position + Vector3.new(150,0,0); blackTarget.CFrame=CFrame.new(eastPositionFromAnchor); blackTarget.Anchored=true; camera.CameraType=Enum.CameraType.Scriptable; camera.CFrame=CFrame.new(staticHeadAnchor.Position,blackTarget.Position); camera.Focus=blackTarget.CFrame; updateDisplay("SUCCESS", "View AFK tĩnh đã thiết lập.") end
local function optimizeForCpu() if not SETTINGS.EnableCpuOptimization then return end; updateDisplay("INFO", "Bắt đầu tối ưu hóa CPU..."); local success, err = pcall(function() if type(setfpscap) == "function" and SETTINGS.TargetFps and SETTINGS.TargetFps > 0 then debugPrint("[CPU-Opt] Giới hạn FPS đang hoạt động ở mức: " .. tostring(SETTINGS.TargetFps)) end; if SETTINGS.SetSimulationRadiusToZero then if LocalPlayer then LocalPlayer.SimulationRadius = 0; debugPrint("[CPU-Opt] SimulationRadius đã được đặt về 0.") end end end); if success then updateDisplay("SUCCESS", "Tối ưu hóa CPU hoàn tất.") else updateDisplay("ERROR", "Lỗi khi tối ưu hóa CPU: " .. tostring(err)) end end
local function optimizeGraphics() updateDisplay("INFO", "Bắt đầu tối ưu đồ họa..."); if SETTINGS.EnableSafePlatform then createSafePlatform(); end; task.wait(0.1); local sP, eP = pcall(function() local itemsToDel={}; for _,item in pairs(game.Workspace:GetChildren()) do local keep=(LocalPlayer.Character and item.Name==LocalPlayer.Character.Name)or(item==workspace.CurrentCamera)or(SETTINGS.EnableSafePlatform and item.Name==AFK_PLATFORM_NAME)or(SETTINGS.EnableStaticAfkView and(item.Name==STATIC_HEAD_ANCHOR_PART_NAME or item.Name==STATIC_BLACK_SCREEN_PART_NAME));if not keep then table.insert(itemsToDel,item)end end; for _,item in ipairs(itemsToDel)do pcall(function()item:Destroy()end)end;Lighting.GlobalShadows,Lighting.Brightness,Lighting.Ambient,Lighting.OutdoorAmbient,Lighting.ExposureCompensation=false,0,Color3.new(0,0,0),Color3.new(0,0,0),-2;pcall(function()Lighting.Atmosphere:Destroy()end);pcall(function()Lighting.Sky:Destroy()end); if LocalPlayer.PlayerGui then for _,gui in pairs(LocalPlayer.PlayerGui:GetChildren())do if gui.Name~=SERVER_HOP_GUI_NAME and gui.Name ~= "DebugConsoleGUI" then pcall(function()gui:Destroy()end)end end end;local sO=settings();if sO and sO.Rendering then sO.Rendering.QualityLevel=Enum.QualityLevel.Level01;pcall(function()if RunService:IsClient()then RunService:Set3dRenderingEnabled(false)end end)end;SoundService.RespectFilteringEnabled,SoundService.AmbientReverb=true,Enum.ReverbType.NoReverb;for _,sound in pairs(game:GetDescendants())do if sound:IsA("Sound")then sound.Volume=0;sound:Stop()end end; updateDisplay("SUCCESS", "Đồ họa đã được tối ưu."); end); if not sP then updateDisplay("ERROR", "Lỗi khi tối ưu đồ họa.") end end

-- --- Logic Tìm Server ---
local chosenServer = nil; local serversUrlBase = "https://games.roblox.com/v1/games/" .. placeId .. "/servers/Public?sortOrder=Asc&limit=100"
function searchForServer() if not SETTINGS.EnableFileHistory then serverHistoryCache = {} else loadServerHistory() end; local histC=0;for _ in pairs(serverHistoryCache)do histC=histC+1 end; updateDisplay("INFO", string.format("Bắt đầu tìm server... (Tránh %d)",histC+1)); local sLActive=true; chosenServer=nil; while sLActive and not chosenServer do local nextCur=nil; updateDisplay("INFO", "Đang quét server..."); local allScanned=false; while not allScanned and not chosenServer do local pAtt=0;local maxAtt=4;local pFetched=false;local curRetry=baseRetryDelay; while not pFetched and pAtt<maxAtt do pAtt=pAtt+1;if pAtt>1 then updateDisplay("INFO", string.format("Thử lại (%d/%d)...",pAtt,maxAtt));task.wait(curRetry);curRetry=math.min(curRetry*2,maxRetryDelay) end; local s,d=pcall(game.HttpGet,game,serversUrlBase..(nextCur and "&cursor="..nextCur or ""),true);if s then pFetched=true;local sListD=HttpService:JSONDecode(d);if sListD and sListD.data then local pSuitS={}; for _,sInf in ipairs(sListD.data)do if not(sInf.id==currentJobId or serverHistoryCache[sInf.id])then if sInf.playing and sInf.maxPlayers and sInf.maxPlayers>0 then local pR=sInf.playing/sInf.maxPlayers if pR>=SETTINGS.MinPlayerPercentage and pR<SETTINGS.MaxPlayerPercentage and sInf.playing<sInf.maxPlayers then table.insert(pSuitS,sInf)end end end end; if #pSuitS>0 then chosenServer=pSuitS[math.random(1,#pSuitS)];allScanned=true;break end; nextCur=sListD.nextPageCursor;if not nextCur then allScanned=true;end else updateDisplay("ERROR","Dữ liệu server lỗi.")end else updateDisplay("ERROR","Lỗi API.");if pAtt>=maxAtt then allScanned=true end end end;if chosenServer or allScanned then break end;task.wait(waitTimeBetweenPageFetches) end; if chosenServer then updateDisplay("SUCCESS", "ĐÃ CHỌN SERVER!");sLActive=false elseif allScanned then updateDisplay("INFO", string.format("Không tìm thấy. Chờ %ds.",waitTimeBetweenFullScans));task.wait(waitTimeBetweenFullScans)end end; if chosenServer then updateDisplay("SUCCESS", "Chuẩn bị dịch chuyển..."); addJobIdToHistoryAndSave(currentJobId); task.wait(1); local sTP,eTP=pcall(TeleportService.TeleportToPlaceInstance,TeleportService,placeId,chosenServer.id,LocalPlayer); if not sTP then updateDisplay("ERROR", "Lỗi dịch chuyển! Thử lại..."); serverHistoryCache[chosenServer.id]=true;chosenServer=nil;task.wait(5);searchForServer() end else updateDisplay("ERROR", "Không thể tìm thấy server. Dừng lại.") end end

-- --- Quản lý Countdown và Donate ---
local countdownShouldReset = false; local currentCountdownThread = nil
function startInitialCountdown() updateDisplay("INFO", "Bắt đầu chu trình..."); if currentCountdownThread and coroutine.status(currentCountdownThread) ~= "dead" then pcall(coroutine.close, currentCountdownThread); currentCountdownThread = nil end; local function performCountdownThenSearch(minutesToWait) if not minutesToWait or minutesToWait<=0 then updateDisplay("ERROR","Thời gian chờ lỗi.");searchForServer();return end; if not SETTINGS.EnableCountdownText then if statusTextLabel then statusTextLabel.Text = "" end end; if not SETTINGS.EnableCountdownColor then if statusFrame then statusFrame.BackgroundTransparency = 1 end end; local totalS = minutesToWait * 60; for i = totalS, 0, -1 do if countdownShouldReset and SETTINGS.EnableDonateReset then countdownShouldReset = false; if statusTextLabel then statusTextLabel.Text = "" end; if statusFrame then statusFrame.BackgroundTransparency = 1 end; updateDisplay("SUCCESS", "Donate! Reset thời gian."); startInitialCountdown(); return end; if SETTINGS.EnableCountdownText then if statusTextLabel and statusTextLabel.Parent then statusTextLabel.Text = string.format("%02d:%02d", math.floor(i/60), i%60); statusTextLabel.TextColor3 = Color3.new(1,1,1) end end; if SETTINGS.EnableCountdownColor then if statusFrame and statusFrame.Parent then statusFrame.BackgroundColor3 = (i % 2 == 0) and NEON_COLORS.BLUE or NEON_COLORS.RED; statusFrame.BackgroundTransparency = 0.6 end end; task.wait(1) end; if statusTextLabel then statusTextLabel.Text = "" end; if statusFrame then statusFrame.BackgroundTransparency = 1 end; updateDisplay("SUCCESS", "Hết giờ! Bắt đầu tìm server..."); searchForServer() end; currentCountdownThread = coroutine.create(function() local s,e=pcall(performCountdownThenSearch, SETTINGS.WaitMinutes); if not s then updateDisplay("ERROR","Lỗi Coroutine. Thử lại sau 5s...");task.wait(5);if SETTINGS.EnableServerHop then startInitialCountdown()end end end); coroutine.resume(currentCountdownThread) end

-- --- Các hàm thiết lập (Reconnect, AutoReply, Webhook) ---
local function setupAutoReconnect() pcall(function() local promptOverlay = game.CoreGui:WaitForChild('RobloxPromptGui'):WaitForChild('promptOverlay'); promptOverlay.ChildAdded:Connect(function(child) if child.Name == 'ErrorPrompt' and child:IsA('Frame') then updateDisplay("ERROR", "Phát hiện lỗi! Đang thử kết nối lại..."); local success, err = pcall(function() TeleportService:Teleport(placeId, LocalPlayer) end); if not success then task.wait(2); repeat TeleportService:Teleport(placeId, LocalPlayer); task.wait(5) until false end end end); updateDisplay("SUCCESS", "Tính năng tự động kết nối lại đã được kích hoạt.") end) end
local function setupAutoReply() if not SETTINGS.EnableAutoReply then return end; local ChatChannel = TextChatService.TextChannels.RBXGeneral; local Cooldowns = {}; local function safeChat(msg) pcall(function() ChatChannel:SendAsync(msg) end) end; Players.PlayerChatted:Connect(function(_, player, message) if not SETTINGS.EnableAutoReply then return end; if player == LocalPlayer then return end; if not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") then return end; if not LocalPlayer.Character or not LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then return end; local distance = (player.Character.HumanoidRootPart.Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude; if distance > SETTINGS.ReplyRadius then return end; if Cooldowns[player] and tick() - Cooldowns[player] < SETTINGS.ReplyCooldown then return end; local lowerMsg = string.lower(message); local replied = false; for _, rule in ipairs(SETTINGS.ReplyRules) do for _, keyword in ipairs(rule.keywords) do if string.find(lowerMsg, keyword) then local reply = rule.replies[math.random(1, #rule.replies)]; task.wait(math.random(1,3)); safeChat(reply); Cooldowns[player] = tick(); replied = true; break end end; if replied then break end end end); updateDisplay("SUCCESS", "Tính năng tự động trả lời đã được kích hoạt.") end
local function setupDiscordWebhook() if not SETTINGS.EnableDiscordWebhook or not SETTINGS.WebhookURL or SETTINGS.WebhookURL == "" then debugPrint("[Webhook] Tính năng webhook bị tắt hoặc URL không hợp lệ."); return end; local leaderstats = LocalPlayer:WaitForChild("leaderstats", 30); if not leaderstats then updateDisplay("ERROR", "[Webhook] Không tìm thấy leaderstats sau 30 giây."); return end; local raised = leaderstats:WaitForChild("Raised", 30); if not raised then updateDisplay("ERROR", "[Webhook] Không tìm thấy 'Raised' trong leaderstats."); return end; local lastRaised = raised.Value; local function sendWebhook(amount, total) local pingContent = nil; if SETTINGS.EnablePingOnDonate then if amount >= (SETTINGS.PingAmount or 0) then if SETTINGS.PingUserID and SETTINGS.PingUserID ~= "" then pingContent = string.format("<@%s>", SETTINGS.PingUserID) else pingContent = "@everyone" end end end; local embed = { description = string.format("**%s**\n# +%d\nTOTAL : %d", LocalPlayer.Name, amount, total), color = SETTINGS.WebhookColor }; local payloadData = { embeds = { embed } }; if pingContent then payloadData.content = pingContent end; local payload = HttpService:JSONEncode(payloadData); local req = (syn and syn.request) or (http and http.request) or (fluxus and fluxus.request) or request; if req then pcall(function() req({ Url = SETTINGS.WebhookURL, Method = "POST", Headers = { ["Content-Type"] = "application/json" }, Body = payload }) end) else updateDisplay("ERROR", "[Webhook] Không tìm thấy hàm request để gửi webhook.") end end; raised.Changed:Connect(function(newRaisedValue) local difference = newRaisedValue - lastRaised; if difference > 0 then if SETTINGS.EnableDonateReset then countdownShouldReset = true end; sendWebhook(difference, newRaisedValue) end; lastRaised = newRaisedValue end); updateDisplay("SUCCESS", "Tính năng thông báo donate qua Discord đã được kích hoạt.") end

-- =================================================================
-- HÀM QUÉT BOT (LOGIC ĐÃ ĐIỀU CHỈNH)
-- =================================================================
local function scanForBots()
    updateDisplay("INFO", "Bắt đầu quét bot trong server...")
    task.wait(1)
    local _boothlocation
    local suc, _shuffled = pcall(function() return Workspace:WaitForChild('MapUI', 5) end)
    if not suc or not _shuffled then
        local playerGuiMap = LocalPlayer:WaitForChild("PlayerGui")
        if playerGuiMap then
            local mapUiContainer = playerGuiMap:WaitForChild('MapUIContainer', 5)
            if mapUiContainer then _boothlocation = mapUiContainer:WaitForChild('MapUI', 5) end
        end
    else
        _boothlocation = _shuffled
    end
    if not _boothlocation then
        updateDisplay("ERROR", "LỖI: Không tìm thấy MapUI để quét bot.")
        debugPrint("[Anti-Bot] Lỗi: Không thể tìm thấy 'MapUI' trong Workspace hoặc PlayerGui.")
        return 0
    end
    debugPrint("[Anti-Bot] Đã tìm thấy MapUI tại: " .. _boothlocation:GetFullName())
    local boothUI = _boothlocation:WaitForChild("BoothUI")
    if not boothUI then
        updateDisplay("ERROR", "LỖI: Không tìm thấy BoothUI bên trong MapUI.")
        debugPrint("[Anti-Bot] Lỗi: Không thể tìm thấy 'BoothUI' bên trong " .. _boothlocation:GetFullName())
        return 0
    end
    debugPrint("[Anti-Bot] Đã tìm thấy BoothUI. Tổng số phần tử con: " .. #boothUI:GetChildren())
    local currentBotCount = 0
    local scannedBooths = 0
    for _, uiFrame in ipairs(boothUI:GetChildren()) do
        scannedBooths = scannedBooths + 1
        local success, err = pcall(function()
            local ownerName = uiFrame.Details.Owner.Text
            if ownerName ~= "unclaimed" then
                local boothText = string.lower(uiFrame.Sign.TextLabel.Text)
                debugPrint("[Anti-Bot] Quét '" .. ownerName .. "': [" .. boothText .. "]")
                for _, keyword in ipairs(SETTINGS.BOT_KEYWORDS) do
                    if string.find(boothText, keyword) then
                        debugPrint("--> PHÁT HIỆN BOT! Từ khóa: '" .. keyword .. "'")
                        currentBotCount = currentBotCount + 1
                        break
                    end
                end
            end
        end)
        if not success then
            debugPrint("[Anti-Bot] Lỗi khi quét gian hàng #" .. tostring(scannedBooths) .. ": " .. tostring(err))
        end
    end
    debugPrint("[Anti-Bot] Đã quét xong " .. scannedBooths .. " gian hàng.")
    updateDisplay("INFO", "Quét xong. Phát hiện: " .. currentBotCount .. " bot.")
    return currentBotCount
end

-- =================================================================
-- LOGIC KHỞI CHẠY CHÍNH (ĐÃ VIẾT LẠI)
-- =================================================================
task.spawn(function()
    -- Chờ PlayerGui sẵn sàng
    local playerGui = LocalPlayer:WaitForChild("PlayerGui")
    
    -- Tạo các GUI cần thiết
    pcall(createDebugConsole)
    pcall(createStatusGui)
    
    debugPrint("Bắt đầu khởi tạo script V4.3...")
    updateDisplay("INFO", "Đang khởi tạo...")
    task.wait(0.5)

    -- Kích hoạt các tính năng nền
    if type(setfpscap) == "function" and SETTINGS.TargetFps and SETTINGS.TargetFps > 0 then task.spawn(function() while task.wait() do pcall(setfpscap, SETTINGS.TargetFps) end end); debugPrint("Đã kích hoạt giới hạn FPS.") end
    if SETTINGS.EnableAutoReconnect then task.spawn(setupAutoReconnect); debugPrint("Đã kích hoạt Auto Reconnect.") end
    if SETTINGS.EnableAutoReply then task.spawn(setupAutoReply); debugPrint("Đã kích hoạt Auto Reply.") end

    -- Chờ game tải
    updateDisplay("INFO", string.format("Chờ game tải trong %d giây...", SETTINGS.InitialWaitTime))
    task.wait(SETTINGS.InitialWaitTime)
    
    updateDisplay("INFO", "Bắt đầu luồng quyết định...")
    debugPrint("Bắt đầu luồng quyết định...")

    -- Luồng quyết định chính
    if SETTINGS.EnableServerHop then
        local botCount = 0
        if SETTINGS.EnableAntiBotScan then botCount = scanForBots(); task.wait(2) end

        if SETTINGS.EnableAntiBotScan and botCount >= SETTINGS.DETECTION_THRESHOLD then
            updateDisplay("ERROR", string.format("Phát hiện %d/%d bot! Đang tìm server mới...", botCount, SETTINGS.DETECTION_THRESHOLD))
            task.wait(3)
            searchForServer()
        else
            if SETTINGS.EnableAntiBotScan then updateDisplay("SUCCESS", "Server sạch. Bắt đầu AFK.") else updateDisplay("INFO", "Bỏ qua quét bot. Bắt đầu AFK.") end
            task.wait(1)
            
            if SETTINGS.EnableSafePlatform then createSafePlatform() end
            if SETTINGS.EnableStaticAfkView then setupStaticAfkView() end
            if SETTINGS.EnableCpuOptimization then optimizeForCpu() end
            if SETTINGS.EnableGraphicsOptimization then optimizeGraphics() end
            task.spawn(setupDiscordWebhook)
            startInitialCountdown()
            debugPrint("[MainInit] Server Hop và Listener đã kích hoạt.")
        end
    else
        if SETTINGS.EnableSafePlatform then createSafePlatform() end
        if SETTINGS.EnableStaticAfkView then setupStaticAfkView() end
        if SETTINGS.EnableCpuOptimization then optimizeForCpu() end
        if SETTINGS.EnableGraphicsOptimization then optimizeGraphics() end
        task.spawn(setupDiscordWebhook)
        updateDisplay("INFO", "Server Hop TẮT. Hoàn thành thiết lập.")
    end
    debugPrint("[MainInit] Script đã hoàn tất.")
end)
