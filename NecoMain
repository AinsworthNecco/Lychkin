--[[
    SCRIPT KIỂM TRA HỆ THỐNG PROXY (PHIÊN BẢN DEBUG)
    Mục đích: Script này được nâng cấp để in ra lỗi chi tiết, giúp chẩn đoán tại sao
    request thất bại và xác nhận hệ thống proxy hoạt động đúng.
]]

-- =================================================================
-- CÀI ĐẶT
-- =================================================================
local SETTINGS = {
    ["ProxyListURL"] = "https://raw.githubusercontent.com/AinsworthNecco/Lychkin/refs/heads/main/Proxy",
    ["TargetPlaceId"] = "6284583030" 
}

-- =================================================================
-- KHỞI TẠO
-- =================================================================
local HttpService = game:GetService("HttpService")
local rng = Random.new()
local proxyList = {}
local http_request_func = (syn and syn.request) or (http and http.request) or (fluxus and fluxus.request) or request

-- =================================================================
-- HỆ THỐNG PROXY
-- =================================================================
local function fetchProxyList()
    print("[Proxy] Bắt đầu tải danh sách proxy...")
    local success, response = pcall(game.HttpGet, game, SETTINGS.ProxyListURL)
    if not success or not response then
        print("[Proxy] LỖI: Không thể tải file proxy. Chi tiết: " .. tostring(response))
        return
    end
    local proxies = {}
    for line in string.gmatch(response, "[^\r\n]+") do
        local trimmed = line:match("^%s*(.-)%s*$")
        if #trimmed > 0 then
            local parts = {}
            for part in string.gmatch(trimmed, "[^:]+") do table.insert(parts, part) end
            if #parts == 4 then table.insert(proxies, { ip = parts[1], port = parts[2], user = parts[3], pass = parts[4], type = "auth" })
            elseif #parts == 2 then table.insert(proxies, { ip = parts[1], port = parts[2], type = "no_auth" }) end
        end
    end
    proxyList = proxies
    if #proxyList > 0 then print(string.format("[Proxy] Tải thành công %d proxy.", #proxyList))
    else print("[Proxy] CẢNH BÁO: Không tìm thấy proxy hợp lệ trong file.") end
end

-- Hàm in lỗi chi tiết
local function printErrorDetails(errorSource, response)
    print(string.format("[Error Details | Nguồn: %s]", errorSource))
    if type(response) == "table" then
        for k, v in pairs(response) do
            -- Nếu 'v' là một bảng khác, ta có thể lặp qua nó
            if type(v) == "table" then
                 print(string.format("  - %s:", tostring(k)))
                 for sub_k, sub_v in pairs(v) do
                     print(string.format("    - %s: %s", tostring(sub_k), tostring(sub_v)))
                 end
            else
                 print(string.format("  - %s: %s", tostring(k), tostring(v)))
            end
        end
    else
        print("  - " .. tostring(response))
    end
end

-- Hàm thực hiện request (ĐÃ NÂNG CẤP DEBUG)
local function makeRequest(url)
    -- Thử kết nối trực tiếp trước
    local success, response = pcall(function() return HttpService:JSONDecode(game:HttpGet(url, true)) end)
    if success and response.data then
        print("[Request] Quét thành công bằng IP GỐC.")
        return response
    end

    -- Kiểm tra có phải lỗi rate limit không
    local isRateLimitError = false
    if success and response and response.errors and response.errors[1] and response.errors[1].message and string.find(string.lower(response.errors[1].message), "too many requests") then
        isRateLimitError = true
    end

    if not isRateLimitError then
        print("[Request] Lỗi khi dùng IP gốc (không phải rate limit).")
        printErrorDetails("IP Gốc", response)
        print("[Request] Đang thử lại sau 3 giây...")
        task.wait(3)
        return makeRequest(url)
    end
    
    -- Nếu bị rate limit, chuyển sang proxy
    print("[Request] Bị giới hạn IP Gốc! Chuyển sang dùng proxy...")
    if #proxyList == 0 or not http_request_func then
        print("[Request] Không có proxy hoặc executor không hỗ trợ. Chờ 20 giây...")
        task.wait(20)
        return makeRequest(url)
    end

    local shuffledProxies = {}
    for _, p in ipairs(proxyList) do table.insert(shuffledProxies, p) end

    while true do
        for i = #shuffledProxies, 2, -1 do
            local j = rng:NextInteger(1, i)
            shuffledProxies[i], shuffledProxies[j] = shuffledProxies[j], shuffledProxies[i]
        end

        for i, proxyData in ipairs(shuffledProxies) do
            local proxyDisplay = proxyData.ip .. ":" .. proxyData.port
            print(string.format("[Proxy] Đang thử proxy %d/%d (%s)", i, #shuffledProxies, proxyDisplay))
            
            local proxyString = (proxyData.type == "auth") and string.format("http://%s:%s@%s:%s", proxyData.user, proxyData.pass, proxyData.ip, proxyData.port) or string.format("http://%s:%s", proxyData.ip, proxyData.port)
            
            local reqSuccess, reqResponse = pcall(http_request_func, { Url = url, Method = "GET", Proxy = proxyString })

            if reqSuccess and reqResponse and reqResponse.Success and reqResponse.Body then
                local decodeSuccess, decodedBody = pcall(HttpService.JSONDecode, HttpService, reqResponse.Body)
                if decodeSuccess and decodedBody and decodedBody.data then
                    print(string.format("[Proxy] Quét thành công bằng proxy: %s", proxyDisplay))
                    return decodedBody
                end
            else
                -- In lỗi chi tiết từ proxy request
                print(string.format("[Proxy] Proxy %s thất bại.", proxyDisplay))
                printErrorDetails("Proxy Request", reqResponse)
            end
            task.wait(0.1)
        end

        print("[Proxy] Tất cả proxy đều thất bại. Đợi 5 giây rồi thử lại bằng IP gốc...")
        task.wait(5)
        return makeRequest(url)
    end
end

-- =================================================================
-- LOGIC QUÉT CHÍNH
-- =================================================================
local function startScanning()
    local totalServersFound = 0
    local nextCursor = nil
    while true do
        local apiUrl = "https://games.roblox.com/v1/games/" .. SETTINGS.TargetPlaceId .. "/servers/Public?sortOrder=Desc&limit=100&excludeFullGames=true"
        if nextCursor then apiUrl = apiUrl .. "&cursor=" .. nextCursor end
        print("\n-------------------------------------------------")
        print(string.format("[Scanner] Đang quét trang tiếp theo (Cursor: %s)...", tostring(nextCursor)))
        local response = makeRequest(apiUrl)
        if response and response.data and #response.data > 0 then
            local count = #response.data
            totalServersFound = totalServersFound + count
            print(string.format("[Scanner] Tìm thấy %d server ở trang này. Tổng cộng: %d", count, totalServersFound))
            nextCursor = response.nextPageCursor
            if not nextCursor then print("[Scanner] Đã quét hết tất cả các server! Bắt đầu lại sau 10 giây."); task.wait(10) end
        else
            print("[Scanner] Không tìm thấy server hoặc gặp lỗi API. Chờ 10 giây rồi thử lại.")
            task.wait(10)
        end
        task.wait(1)
    end
end

-- =================================================================
-- KHỞI CHẠY
-- =================================================================
task.spawn(function()
    fetchProxyList()
    if #proxyList == 0 then print("CẢNH BÁO: Không có proxy nào được tải. Script sẽ chỉ chạy với IP gốc.") end
    startScanning()
end)
