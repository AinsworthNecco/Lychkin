--[[
    SCRIPT C∆† B·∫¢N T·ª∞ ƒê·ªòNG NH·∫¨N BOOTH TRONG ROBLOX
    M·ª•c ƒë√≠ch: T√¨m v√† t·ª± ƒë·ªông claim m·ªôt booth tr·ªëng.
    S·ª≠ d·ª•ng v·ªõi Executor.
]]

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")

local localPlayer = Players.LocalPlayer

print("--- Script T·ª± ƒê·ªông Nh·∫≠n Booth C∆° B·∫£n ƒêang Ch·∫°y ---")

-- 1. T√åM MODULE REMOTES
local Remotes
print("[Nh·∫≠n Booth] ƒêang t√¨m module Remotes...")
for _, moduleInstance in ipairs(ReplicatedStorage:GetChildren()) do
    if moduleInstance.Name:find('Remote', 1, true) and moduleInstance:IsA('ModuleScript') then
        local success, remoteMod = pcall(require, moduleInstance)
        if success and remoteMod and typeof(remoteMod.Event) == "function" then
            -- Ki·ªÉm tra s∆° b·ªô xem c√≥ ph·∫£i module Remotes kh√¥ng b·∫±ng c√°ch th·ª≠ truy c·∫≠p m·ªôt event th∆∞·ªùng c√≥
            -- (Kh√¥ng th·ª±c s·ª± Fire event ·ªü ƒë√¢y ƒë·ªÉ tr√°nh t√°c d·ª•ng ph·ª• kh√¥ng mong mu·ªën khi ch·ªâ t√¨m module)
            local couldBeRemotes = pcall(function() return remoteMod.Event(remoteMod, "ClaimBooth") end)
            if couldBeRemotes then
                 Remotes = remoteMod
                 print("[Nh·∫≠n Booth] ƒê√£ t√¨m th·∫•y module Remotes:", moduleInstance.Name)
                 break
            end
        end
    end
    task.wait(0.05)
end

if not Remotes then
    warn("[Nh·∫≠n Booth] L·ªñI: Kh√¥ng t√¨m th·∫•y module Remotes! Script kh√¥ng th·ªÉ ti·∫øp t·ª•c.")
    return
end

-- 2. C√ÅC BI·∫æN V√Ä H√ÄM H·ªñ TR·ª¢
local unclaimedBoothsList = {}
local mainCheckPosition = Vector3.new(165.161, 0, 311.636) -- V·ªã tr√≠ trung t√¢m ƒë·ªÉ t√¨m booth (gi·ªëng script g·ªëc)
local boothSearchRadius = 100 -- B√°n k√≠nh t√¨m ki·∫øm booth quanh v·ªã tr√≠ trung t√¢m

local boothLocationUI = Workspace:WaitForChild("MapUI", 10) -- N∆°i ch·ª©a UI c√°c booth trong Workspace
if not boothLocationUI then
    -- Th·ª≠ t√¨m trong PlayerGui n·∫øu kh√¥ng th·∫•y trong Workspace
    local playerGui = localPlayer and localPlayer:WaitForChild("PlayerGui", 5)
    boothLocationUI = playerGui and playerGui:WaitForChild("MapUIContainer", 5) and playerGui.MapUIContainer:FindFirstChild("MapUI")
end

if not boothLocationUI then
    warn("[Nh·∫≠n Booth] L·ªñI: Kh√¥ng t√¨m th·∫•y 'MapUI' (n∆°i ch·ª©a UI c√°c booth).")
    return
end

local boothUIDetailsContainer = boothLocationUI:FindFirstChild("BoothUI")
local boothInteractionsContainer = Workspace:FindFirstChild("BoothInteractions")

if not boothUIDetailsContainer then
    warn("[Nh·∫≠n Booth] L·ªñI: Kh√¥ng t√¨m th·∫•y 'BoothUI' b√™n trong 'MapUI'.")
    return
end
if not boothInteractionsContainer then
    warn("[Nh·∫≠n Booth] L·ªñI: Kh√¥ng t√¨m th·∫•y 'BoothInteractions' trong Workspace.")
    return
end

-- H√†m t√¨m booth tr·ªëng
local function findNearbyUnclaimedBooths()
    unclaimedBoothsList = {} -- Reset danh s√°ch
    print("[Nh·∫≠n Booth] ƒêang qu√©t t√¨m booth tr·ªëng g·∫ßn v·ªã tr√≠ trung t√¢m...")

    local mainPos2D = Vector2.new(mainCheckPosition.X, mainCheckPosition.Z)

    for _, uiFrame in ipairs(boothUIDetailsContainer:GetChildren()) do
        if uiFrame:IsA("Frame") and uiFrame:FindFirstChild("Details") and uiFrame.Details:FindFirstChild("Owner") then
            if uiFrame.Details.Owner.Text:lower() == "unclaimed" then
                local boothNumStr = uiFrame.Name:match("%d+")
                if boothNumStr then
                    local boothNum = tonumber(boothNumStr)
                    for _, interactPoint in ipairs(boothInteractionsContainer:GetChildren()) do
                        if interactPoint:GetAttribute("BoothSlot") == boothNum then
                            local boothPos2D = Vector2.new(interactPoint.Position.X, interactPoint.Position.Z)
                            if (boothPos2D - mainPos2D).Magnitude < boothSearchRadius then
                                table.insert(unclaimedBoothsList, {id = boothNum, position = interactPoint.Position})
                                print("[Nh·∫≠n Booth] T√¨m th·∫•y booth tr·ªëng ti·ªÅm nƒÉng #" .. boothNum)
                            end
                            break
                        end
                    end
                end
            end
        end
    end

    -- S·∫Øp x·∫øp c√°c booth t√¨m ƒë∆∞·ª£c theo kho·∫£ng c√°ch ƒë·∫øn ng∆∞·ªùi ch∆°i (g·∫ßn nh·∫•t tr∆∞·ªõc)
    if localPlayer.Character and localPlayer.Character:FindFirstChild("HumanoidRootPart") then
        local playerPos = localPlayer.Character.HumanoidRootPart.Position
        table.sort(unclaimedBoothsList, function(a, b)
            return (a.position - playerPos).Magnitude < (b.position - playerPos).Magnitude
        end)
    end

    if #unclaimedBoothsList > 0 then
        print("[Nh·∫≠n Booth] T√¨m th·∫•y t·ªïng c·ªông " .. #unclaimedBoothsList .. " booth tr·ªëng ph√π h·ª£p. S·∫Ω th·ª≠ claim booth g·∫ßn nh·∫•t.")
    else
        print("[Nh·∫≠n Booth] Kh√¥ng t√¨m th·∫•y booth n√†o tr·ªëng trong ph·∫°m vi.")
    end
end

-- 3. H√ÄM TH·ª∞C HI·ªÜN CLAIM BOOTH
local function attemptToClaimBooth(boothIdToClaim)
    if not boothIdToClaim then
        warn("[Nh·∫≠n Booth] L·ªñI: Kh√¥ng c√≥ booth ID ƒë·ªÉ claim.")
        return false
    end

    print("[Nh·∫≠n Booth] ƒêang g·ª≠i y√™u c·∫ßu nh·∫≠n booth #" .. boothIdToClaim .. "...")
    local successCall, result = pcall(function()
        -- T√™n RemoteEvent c√≥ th·ªÉ l√† "ClaimBooth" ho·∫∑c t∆∞∆°ng t·ª±
        Remotes.Event("ClaimBooth"):InvokeServer(boothIdToClaim)
    end)

    if not successCall then
        warn("[Nh·∫≠n Booth] L·ªñI khi g·ªçi RemoteEvent 'ClaimBooth':", tostring(result))
        return false
    end

    task.wait(1.5) -- Ch·ªù server x·ª≠ l√Ω v√† UI game c·∫≠p nh·∫≠t

    -- Ki·ªÉm tra xem ƒë√£ nh·∫≠n th√†nh c√¥ng ch∆∞a
    local claimedBoothUIFrame = boothUIDetailsContainer:FindFirstChild("BoothUI" .. boothIdToClaim)
    if claimedBoothUIFrame and claimedBoothUIFrame:FindFirstChild("Details") and claimedBoothUIFrame.Details:FindFirstChild("Owner") then
        local ownerText = claimedBoothUIFrame.Details.Owner.Text:lower()
        local playerNameLower = localPlayer.Name:lower()
        local playerDisplayNameLower = localPlayer.DisplayName:lower()

        if ownerText:find(playerDisplayNameLower) or ownerText:find(playerNameLower) then
            print("[Nh·∫≠n Booth] TH√ÄNH C√îNG! ƒê√£ nh·∫≠n ƒë∆∞·ª£c booth #" .. boothIdToClaim .. "! üéâ")
            getgenv().claimedBoothID_Basic = boothIdToClaim -- L∆∞u l·∫°i ID booth ƒë√£ claim n·∫øu c·∫ßn d√πng sau
            return true
        else
            print("[Nh·∫≠n Booth] Kh√¥ng th·ªÉ x√°c minh vi·ªác nh·∫≠n booth #" .. boothIdToClaim .. ". Owner hi·ªán t·∫°i: " .. claimedBoothUIFrame.Details.Owner.Text)
            return false
        end
    else
        warn("[Nh·∫≠n Booth] Kh√¥ng t√¨m th·∫•y UI c·ªßa booth #" .. boothIdToClaim .. " sau khi th·ª≠ nh·∫≠n ƒë·ªÉ x√°c minh.")
        return false
    end
end

-- 4. LOGIC CH√çNH ƒê·ªÇ CH·∫†Y
local function main()
    if not localPlayer or not localPlayer.Character then
        warn("[Nh·∫≠n Booth] L·ªñI: Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi ch∆°i ho·∫∑c nh√¢n v·∫≠t.")
        return
    end

    findNearbyUnclaimedBooths()

    if #unclaimedBoothsList == 0 then
        print("[Nh·∫≠n Booth] Kh√¥ng c√≥ booth n√†o ƒë·ªÉ th·ª≠ nh·∫≠n.")
        return
    end

    local claimedSuccessfully = false
    for _, boothInfo in ipairs(unclaimedBoothsList) do
        if attemptToClaimBooth(boothInfo.id) then
            claimedSuccessfully = true
            -- (T√πy ch·ªçn) Di chuy·ªÉn ƒë·∫øn booth sau khi claim th√†nh c√¥ng
            -- if localPlayer.Character and localPlayer.Character:FindFirstChild("HumanoidRootPart") and boothInfo.position then
            --     print("[Nh·∫≠n Booth] ƒêang di chuy·ªÉn ƒë·∫øn booth...")
            --     local humanoid = localPlayer.Character:FindFirstChildOfClass("Humanoid")
            --     if humanoid then
            --         humanoid:MoveTo(boothInfo.position + Vector3.new(0,0,3)) -- ƒê·ª©ng tr∆∞·ªõc booth
            --     end
            -- end
            break -- D·ª´ng l·∫°i sau khi claim th√†nh c√¥ng m·ªôt booth
        else
            print("[Nh·∫≠n Booth] Th·∫•t b·∫°i v·ªõi booth #" .. boothInfo.id .. ". Th·ª≠ booth ti·∫øp theo n·∫øu c√≥...")
            task.wait(0.5) -- ƒê·ª£i m·ªôt ch√∫t tr∆∞·ªõc khi th·ª≠ booth kh√°c
        end
    end

    if not claimedSuccessfully then
        print("[Nh·∫≠n Booth] Kh√¥ng th·ªÉ nh·∫≠n ƒë∆∞·ª£c booth n√†o trong danh s√°ch ƒë√£ t√¨m th·∫•y.")
    end
    print("--- Script T·ª± ƒê·ªông Nh·∫≠n Booth C∆° B·∫£n ƒê√£ Ch·∫°y Xong ---")
end

-- Ch·∫°y h√†m ch√≠nh
main()
