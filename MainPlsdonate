--[[
    SCRIPT RAYFIELD UI - TAB BOOTH (X√¢y d·ª±ng t·ª´ng ph·∫ßn)
    Phi√™n b·∫£n: 1 (Ch·ªâ c√≥ Tab Booth)
]]

-- T·∫£i Rayfield UI (s·ª≠ d·ª•ng link b·∫°n cung c·∫•p)
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
if not Rayfield then
    -- Th√¥ng b√°o l·ªói c∆° b·∫£n n·∫øu kh√¥ng t·∫£i ƒë∆∞·ª£c Rayfield
    local coreGui = game:GetService("CoreGui")
    local errGui = Instance.new("ScreenGui", coreGui)
    local errLabel = Instance.new("TextLabel", errGui)
    errLabel.Size = UDim2.new(1,0,1,0); errLabel.TextScaled = true
    errLabel.TextColor3 = Color3.new(1,0,0); errLabel.BackgroundColor3 = Color3.new(0,0,0)
    errLabel.Text = "L·ªñI: Kh√¥ng th·ªÉ t·∫£i Rayfield UI! Vui l√≤ng ki·ªÉm tra l·∫°i link ho·∫∑c k·∫øt n·ªëi m·∫°ng."
    if game:GetService("Players").LocalPlayer then
       game:GetService("Players").LocalPlayer:Kick("Kh√¥ng th·ªÉ t·∫£i Rayfield UI.")
    end
    return
end

-- C√°c services c·∫ßn thi·∫øt
local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local CoreGui = game:GetService("CoreGui")
if not workspace then workspace = game:GetService("Workspace") end

local localPlayer = Players.LocalPlayer
local newRaisedFormat = (localPlayer and localPlayer:WaitForChild('leaderstats', 5) and localPlayer.leaderstats:WaitForChild('Raised', 5)) or {Value = 0} -- Fallback

-- T√¨m Remotes (quan tr·ªçng cho updateBoothText)
local Remotes
pcall(function()
    for i,v_module in ipairs(ReplicatedStorage:GetChildren()) do
        if v_module.Name:find('Remote') and v_module:IsA('ModuleScript') then
            local success, remoteMod = pcall(require, v_module)
            if success and remoteMod and typeof(remoteMod.Event) == "function" then
                Remotes = remoteMod
                print("RAYFIELD_BOOTH: Remotes module found:", v_module.Name)
                break
            end
        end
        task.wait(0.05)
    end
end)

if not Remotes then
    Rayfield:Notify("L·ªói Remotes", "Kh√¥ng t√¨m th·∫•y module Remotes. M·ªôt s·ªë t√≠nh nƒÉng c√≥ th·ªÉ kh√¥ng ho·∫°t ƒë·ªông.", 7, Enum.RayfieldNotifyInfoType.Error)
end

-- ===== H·ªÜ TH·ªêNG C√ÄI ƒê·∫∂T (Cho Tab Booth) =====
local settingsLock = true -- NgƒÉn callback ch·∫°y khi kh·ªüi t·∫°o UI
getgenv().settings = getgenv().settings or {}

-- Ch·ªâ ch·ª©a c√°c settings cho Tab Booth ·ªü b∆∞·ªõc n√†y
local boothTabSettings_Names = {
    "textUpdateToggle", "textUpdateDelay", "hexBox", "goalBox",
    "customBoothText", "fontFace", "standingPosition", "boothPosition"
}
local boothTabSettings_Defaults = {
    true, 30, "#32CD32", 5,
    "‚ù§Ô∏è C·∫£m ∆°n ƒë√£ gh√© qua!\nüí≤ Donate ƒë·ªÉ ·ªßng h·ªô m√¨nh nha!\n$C/$G", "SciFi", "Front", 3
}

-- H√†m l∆∞u c√†i ƒë·∫∑t (ƒë∆°n gi·∫£n h√≥a)
local function saveSettings()
    if settingsLock then return end
    if typeof(writefile) == "function" and HttpService then
        pcall(function()
            writefile('plsdonatesettings_rayfield_booth.txt', HttpService:JSONEncode(getgenv().settings))
        end)
    else
        Rayfield:Notify("L∆∞u √Ω", "H√†m 'writefile' kh√¥ng kh·∫£ d·ª•ng. C√†i ƒë·∫∑t s·∫Ω kh√¥ng ƒë∆∞·ª£c l∆∞u.", 5, Enum.RayfieldNotifyInfoType.Warning)
    end
end

-- Load c√†i ƒë·∫∑t v√† thi·∫øt l·∫≠p gi√° tr·ªã m·∫∑c ƒë·ªãnh (ch·ªâ cho Booth Tab)
if typeof(isfile) == "function" and typeof(readfile) == "function" and HttpService then
    if isfile('plsdonatesettings_rayfield_booth.txt') then
        local sData = readfile('plsdonatesettings_rayfield_booth.txt')
        local success, decoded = pcall(HttpService.JSONDecode, HttpService, sData)
        if success and type(decoded) == "table" then
            for i, key_name in ipairs(boothTabSettings_Names) do
                if decoded[key_name] ~= nil then
                    getgenv().settings[key_name] = decoded[key_name]
                else
                    getgenv().settings[key_name] = boothTabSettings_Defaults[i] -- G√°n default n·∫øu key kh√¥ng c√≥ trong file
                end
            end
        else
            Rayfield:Notify("L·ªói Load", "L·ªói JSON khi load c√†i ƒë·∫∑t Booth. D√πng m·∫∑c ƒë·ªãnh.", 5, Enum.RayfieldNotifyInfoType.Error)
            for i, key_name in ipairs(boothTabSettings_Names) do getgenv().settings[key_name] = boothTabSettings_Defaults[i] end
        end
    else
        for i, key_name in ipairs(boothTabSettings_Names) do getgenv().settings[key_name] = boothTabSettings_Defaults[i] end
    end
else
    Rayfield:Notify("L∆∞u √Ω", "H√†m file system kh√¥ng kh·∫£ d·ª•ng. D√πng c√†i ƒë·∫∑t m·∫∑c ƒë·ªãnh cho Booth.", 5, Enum.RayfieldNotifyInfoType.Warning)
    for i, key_name in ipairs(boothTabSettings_Names) do getgenv().settings[key_name] = boothTabSettings_Defaults[i] end
end
saveSettings() -- L∆∞u l·∫°i ƒë·ªÉ t·∫°o file n·∫øu ch∆∞a c√≥ ho·∫∑c c·∫≠p nh·∫≠t key m·ªõi

-- ===== C√ÅC H√ÄM H·ªñ TR·ª¢ CHO TAB BOOTH =====
local _boothlocation -- S·∫Ω ƒë∆∞·ª£c set b·ªüi logic kh√°c (v√≠ d·ª• khi claim booth)
local unclaimed = {} -- Gi·∫£ ƒë·ªãnh `unclaimed[2]` s·∫Ω l√† ID booth ƒë√£ claim (theo logic script g·ªëc)
                     -- T·ªët h∆°n l√† d√πng m·ªôt bi·∫øn ri√™ng nh∆∞ `getgenv().claimedBoothID`
getgenv().claimedBoothID = nil -- Kh·ªüi t·∫°o bi·∫øn l∆∞u ID booth ƒë√£ claim

local fonts = {"AmaticSC","Antique","Arcade","Arial","ArialBold","Bangers","Bodoni","Cartoon","Code","Creepster","DenkOne","Fantasy","Fondamento","FredokaOne","Garamond","Gotham","GothamBlack","GothamBold","GothamMedium","GrenzeGotisch","Highway","IndieFlower","JosefinSans","Jura","Kalam","Legacy","LuckiestGuy","Merriweather","Michroma","Nunito","Oswald","PatrickHand","PermanentMarker","Roboto","RobotoCondensed","RobotoMono","Sarpanch","SciFi","SourceSans","SourceSansBold","SourceSansItalic","SourceSansLight","SourceSansSemibold","SpecialElite","TitilliumWeb","Ubuntu"}

local function formatNumber(n)
    n = tonumber(n) or 0
    if n == 420 or n == 425 then n = n + 10 end
    if n >= 1000000000 then return string.format("%.2fb", n / 1000000000)
    elseif n >= 1000000 then return string.format("%.2fm", n / 1000000)
    elseif n >= 10000 then return string.format("%.1fk", n / 1000)
    elseif n >= 1000 then return string.format("%.2fk", n / 1000)
    else return tostring(math.floor(n)) end
end

local function rgbForPayload(hex) -- D√πng cho payload g·ª≠i l√™n server game
	hex = tostring(hex):gsub("#", "")
    if #hex ~= 6 then return Color3.fromRGB(255,255,255) end -- M·∫∑c ƒë·ªãnh m√†u tr·∫Øng n·∫øu hex sai
	local r, g, b = tonumber("0x"..hex:sub(1,2)), tonumber("0x"..hex:sub(3,4)), tonumber("0x"..hex:sub(5,6))
	return Color3.fromRGB(r or 255, g or 255, b or 255)
end

local function updateBoothText()
    if not Remotes or not getgenv().settings.textUpdateToggle or not getgenv().settings.customBoothText then return end
    if not getgenv().claimedBoothID then
        Rayfield:Notify("Booth Text", "Ch∆∞a claim booth n√†o ƒë·ªÉ c·∫≠p nh·∫≠t ch·ªØ!", 3, Enum.RayfieldNotifyInfoType.Warning)
        return
    end
    if not _boothlocation then -- Th·ª≠ l·∫•y _boothlocation n·∫øu ch∆∞a c√≥
        local playerGui = localPlayer and localPlayer:WaitForChild("PlayerGui", 2)
        _boothlocation = playerGui and playerGui:FindFirstChild("MapUIContainer",2) and playerGui.MapUIContainer:FindFirstChild("MapUI",2)
        if not _boothlocation then _boothlocation = Workspace:FindFirstChild("MapUI",2) end
    end
    if not _boothlocation or not _boothlocation:FindFirstChild("BoothUI") then
         Rayfield:Notify("Booth Text", "Kh√¥ng t√¨m th·∫•y MapUI ƒë·ªÉ c·∫≠p nh·∫≠t ch·ªØ!", 3, Enum.RayfieldNotifyInfoType.Error)
        return
    end

    local currentR = tonumber(newRaisedFormat.Value) or 0
    local goalR = currentR + (tonumber(getgenv().settings.goalBox) or 0)
    local currentS = formatNumber(currentR)
    local goalS = formatNumber(goalR)
    local jprS = tostring(getgenv().settings.jumpsPerRobux or 1) -- jumpsPerRobux s·∫Ω t·ª´ tab Main

    local textToSet = getgenv().settings.customBoothText
        :gsub("%%$C", currentS) -- Escape %
        :gsub("%%$G", goalS)
        :gsub("%%$JPR", jprS)

    local boothUIFrame = _boothlocation.BoothUI:FindFirstChild("BoothUI" .. getgenv().claimedBoothID)
    if not boothUIFrame then
        Rayfield:Notify("Booth Text", "Kh√¥ng t√¨m th·∫•y UI cho booth ƒë√£ claim (#" .. getgenv().claimedBoothID .. ")", 3, Enum.RayfieldNotifyInfoType.Warning)
        return
    end
    local signLbl = boothUIFrame:FindFirstChild("Sign") and boothUIFrame.Sign:FindFirstChild("TextLabel")
    if not signLbl then return end

    if signLbl.Text == textToSet then return end

    -- Logic taggedBoothHop t·ª´ script g·ªëc (t·∫°m b·ªè qua ƒë·ªÉ ƒë∆°n gi·∫£n h√≥a cho tab n√†y)
    -- if signLbl.Text:find("##") and getgenv().settings.taggedBoothHop and nx >= 1 then if serverHop then serverHop() end; return end

    local payload = {
        textFont = Enum.Font[getgenv().settings.fontFace] or Enum.Font.SourceSans,
        richText = true,
        strokeColor = Color3.new(0,0,0), strokeOpacity = 0,
        textColor = rgbForPayload(getgenv().settings.hexBox or "#FFFFFF"),
        buttonStrokeColor = Color3.new(0,0,0), buttonTextColor = Color3.new(1,1,1),
        buttonColor = Color3.fromRGB(98, 255, 0), buttonHoverColor = Color3.fromRGB(98, 255, 0),
        buttonLayout = "", text = textToSet
    }
    local successPcall, errPcall = pcall(Remotes.Event("SetCustomization").FireServer, Remotes.Event("SetCustomization"), payload, "booth")
    if not successPcall then
        Rayfield:Notify("L·ªói Update Booth", "Kh√¥ng th·ªÉ g·ª≠i y√™u c·∫ßu: "..tostring(errPcall), 5, Enum.RayfieldNotifyInfoType.Error)
    else
        Rayfield:Notify("Booth Text", "ƒê√£ g·ª≠i y√™u c·∫ßu c·∫≠p nh·∫≠t ch·ªØ.", 2, Enum.RayfieldNotifyInfoType.Success)
    end
end


-- ===== T·∫†O C·ª¨A S·ªî RAYFIELD V√Ä TAB "BOOTH" =====
local Window = Rayfield:CreateWindow({
    Name = "Autofarm PLS DONATE (Rayfield) - Tab Booth",
    LoadingTitle = "ƒêang t·∫£i...",
    LoadingSubtitle = "B·∫Øt ƒë·∫ßu v·ªõi Tab Booth",
    ConfigurationSaving = { Enabled = false }, -- Ta d√πng h·ªá th·ªëng l∆∞u ri√™ng
    KeySystem = false
})

local BoothTab = Window:CreateTab("Booth", "rbxassetid://10749538839") -- ID Icon v√≠ d·ª•

-------------------- UI CHO TAB: BOOTH --------------------
BoothTab:CreateSection("C√†i ƒê·∫∑t Hi·ªÉn Th·ªã Booth")

BoothTab:CreateToggle({
    Name = "T·ª± C·∫≠p Nh·∫≠t Ch·ªØ Booth (Text Update)",
    CurrentValue = getgenv().settings.textUpdateToggle,
    Callback = function(Value)
        if settingsLock then return end
        getgenv().settings.textUpdateToggle = Value
        saveSettings()
        if Value then updateBoothText() end
    end,
})

BoothTab:CreateInput({
    Name = "Delay C·∫≠p Nh·∫≠t Ch·ªØ (gi√¢y)",
    DefaultText = tostring(getgenv().settings.textUpdateDelay),
    Numeric = true, Float = 0, Min = 0,
    Callback = function(Text)
        if settingsLock then return end
        local num = tonumber(Text)
        if num then
            getgenv().settings.textUpdateDelay = num
            saveSettings()
        end
    end,
})

BoothTab:CreateInput({
    Name = "M√†u Ch·ªØ Booth (M√£ Hex: #RRGGBB)",
    DefaultText = getgenv().settings.hexBox,
    PlaceholderText = "#FFFFFF",
    Callback = function(Text)
        if settingsLock then return end
        local successColor, _ = pcall(Color3.fromHex, Text) -- Ch·ªâ ki·ªÉm tra t√≠nh h·ª£p l·ªá
        if successColor and string.sub(Text,1,1) == "#" and #Text == 7 then
            getgenv().settings.hexBox = Text
            saveSettings()
            updateBoothText()
        else
            Rayfield:Notify("L·ªói M√£ Hex", "M√£ m√†u Hex kh√¥ng h·ª£p l·ªá. V√≠ d·ª•: #FF0000", 4, Enum.RayfieldNotifyInfoType.Error)
        end
    end,
})

BoothTab:CreateInput({
    Name = "M·ª•c Ti√™u Robux (Goal)",
    DefaultText = tostring(getgenv().settings.goalBox),
    Numeric = true, Float = 0, Min = 0,
    Callback = function(Text)
        if settingsLock then return end
        local num = tonumber(Text)
        if num then
            getgenv().settings.goalBox = num
            saveSettings()
            updateBoothText() -- C·∫≠p nh·∫≠t text khi goal thay ƒë·ªïi
        end
    end,
})

BoothTab:CreateLabel("Bi·∫øn cho n·ªôi dung booth: $C (Raised hi·ªán t·∫°i), $G (M·ª•c ti√™u), $JPR (Jumps/Robux)")
local customBoothTextbox_Rayfield -- Bi·∫øn ƒë·ªÉ gi·ªØ tham chi·∫øu t·ªõi textbox
customBoothTextbox_Rayfield = BoothTab:CreateTextbox({
    Name = "N·ªôi Dung Booth T√πy Ch·ªânh",
    Text = getgenv().settings.customBoothText, -- Thu·ªôc t√≠nh Text ƒë·ªÉ set gi√° tr·ªã ban ƒë·∫ßu
    PlaceholderText = "Nh·∫≠p n·ªôi dung booth c·ªßa b·∫°n ·ªü ƒë√¢y...\nV√≠ d·ª•: Donate ƒë·ªÉ th·∫•y $C/$G !",
    Callback = function(CurrentText) -- Callback n√†y th∆∞·ªùng ƒë∆∞·ª£c g·ªçi khi ng∆∞·ªùi d√πng ho√†n t·∫•t nh·∫≠p li·ªáu
        if settingsLock then return end
        if #CurrentText > 221 then
            Rayfield:Notify("L·ªói VƒÉn B·∫£n", "N·ªôi dung booth kh√¥ng ƒë∆∞·ª£c qu√° 221 k√Ω t·ª±!", 5, Enum.RayfieldNotifyInfoType.Error)
            -- C·ªë g·∫Øng c·∫Øt b·ªõt v√† c·∫≠p nh·∫≠t l·∫°i textbox n·∫øu Rayfield h·ªó tr·ª£
            if customBoothTextbox_Rayfield and customBoothTextbox_Rayfield.SetText then -- Gi·∫£ s·ª≠ c√≥ h√†m SetText
                 local trimmedText = string.sub(CurrentText, 1, 221)
                 customBoothTextbox_Rayfield:SetText(trimmedText) -- C·∫≠p nh·∫≠t UI
                 getgenv().settings.customBoothText = trimmedText -- C·∫≠p nh·∫≠t setting
            else -- N·∫øu kh√¥ng, ch·ªâ b√°o l·ªói
                 return -- Kh√¥ng l∆∞u gi√° tr·ªã qu√° d√†i
            end
        else
            getgenv().settings.customBoothText = CurrentText
        end
        saveSettings()
        updateBoothText() -- C·∫≠p nh·∫≠t ngay khi text thay ƒë·ªïi v√† h·ª£p l·ªá
    end,
})
-- N√∫t "Update" th·ªß c√¥ng t·ª´ script g·ªëc c√≥ th·ªÉ kh√¥ng c·∫ßn thi·∫øt n·∫øu callback c·ªßa Textbox ƒë√£ x·ª≠ l√Ω t·ªët.
-- Tuy nhi√™n, n·∫øu mu·ªën, b·∫°n c√≥ th·ªÉ th√™m m·ªôt n√∫t ri√™ng.
BoothTab:CreateButton({
    Name = "C·∫≠p Nh·∫≠t N·ªôi Dung Booth Ngay L·∫≠p T·ª©c",
    Callback = function()
        if settingsLock then return end
        -- L·∫•y text t·ª´ getgenv().settings v√¨ n√≥ ƒë√£ ƒë∆∞·ª£c callback c·ªßa Textbox c·∫≠p nh·∫≠t (ho·∫∑c l·∫•y tr·ª±c ti·∫øp t·ª´ customBoothTextbox_Rayfield n·∫øu c√≥ API)
        if #getgenv().settings.customBoothText > 221 then
            Rayfield:Notify("L·ªói VƒÉn B·∫£n", "N·ªôi dung booth qu√° 221 k√Ω t·ª±! S·ª≠a l·∫°i tr∆∞·ªõc khi c·∫≠p nh·∫≠t.", 5)
            return
        end
        updateBoothText()
    end,
})


local fontOptionsForDropdown = {}
for _, fontNameStr in ipairs(fonts) do table.insert(fontOptionsForDropdown, fontNameStr) end

BoothTab:CreateDropdown({
    Name = "Font Ch·ªØ Tr√™n Booth",
    Options = fontOptionsForDropdown,
    CurrentOption = getgenv().settings.fontFace,
    Callback = function(SelectedOption)
        if settingsLock then return end
        getgenv().settings.fontFace = SelectedOption
        saveSettings()
        updateBoothText()
    end,
})

BoothTab:CreateDropdown({
    Name = "V·ªã Tr√≠ ƒê·ª©ng T·∫°i Booth",
    Options = {"Front", "Left", "Right", "Behind"},
    CurrentOption = getgenv().settings.standingPosition,
    Callback = function(SelectedOption)
        if settingsLock then return end
        getgenv().settings.standingPosition = SelectedOption
        if SelectedOption == "Front" then
            getgenv().settings.boothPosition = 3
        elseif SelectedOption == "Left" then
            getgenv().settings.boothPosition = -6 -- Gi√° tr·ªã √¢m/d∆∞∆°ng t√πy theo tr·ª•c c·ªßa game
        elseif SelectedOption == "Right" then
            getgenv().settings.boothPosition = 6
        else -- Behind
            getgenv().settings.boothPosition = -5.5 -- V√≠ d·ª•, ƒë·ª©ng sau
        end
        saveSettings()
        -- Vi·ªác di chuy·ªÉn ƒë·∫øn v·ªã tr√≠ m·ªõi s·∫Ω do h√†m walkToBooth x·ª≠ l√Ω khi ƒë∆∞·ª£c g·ªçi
    end,
})

-------------------- K·∫æT TH√öC KHAI B√ÅO UI CHO TAB BOOTH --------------------
settingsLock = false -- Cho ph√©p c√°c callback ho·∫°t ƒë·ªông
Rayfield:Notify("Kh·ªüi T·∫°o Ho√†n T·∫•t", "Tab Booth ƒë√£ s·∫µn s√†ng!", 5, Enum.RayfieldNotifyInfoType.Success)

print("RAYFIELD_BOOTH: Script Tab Booth ƒë√£ ƒë∆∞·ª£c t·∫£i.")

--[[
    PH·∫¶N TI·∫æP THEO:
    - Th√™m logic t√¨m v√† claim booth (findUnclaimed, boothclaim, v√≤ng l·∫∑p claim).
    - Sau khi claim th√†nh c√¥ng, g√°n getgenv().claimedBoothID = id_booth_da_claim.
    - G·ªçi updateBoothText() v√† walkToBooth() (walkToBooth c≈©ng s·∫Ω t·ª´ tab kh√°c ho·∫∑c logic chung).
    - Th√™m c√°c tab kh√°c (Main, Chat, Webhook, v.v.) v√† c√°c ch·ª©c nƒÉng t∆∞∆°ng ·ª©ng.
]]

-- V√≠ d·ª• v·ªÅ c√°ch b·∫°n c√≥ th·ªÉ th√™m logic claim booth sau n√†y (c·∫ßn ho√†n thi·ªán):
-- function tryClaimInitialBooth()
--     if not _boothlocation then getBoothLocation() end
--     if not _boothlocation then return end
--
--     pcall(findUnclaimed) -- findUnclaimed s·∫Ω ƒëi·ªÅn v√†o table 'unclaimed'
--     if #unclaimed == 0 then
--         Rayfield:Notify("Claim", "Kh√¥ng t√¨m th·∫•y booth tr·ªëng ban ƒë·∫ßu.", 3)
--         return
--     end
--
--     -- S·∫Øp x·∫øp 'unclaimed' theo kho·∫£ng c√°ch n·∫øu findUnclaimed c√≥ tr·∫£ v·ªÅ kho·∫£ng c√°ch
--     -- table.sort(unclaimed, function(a,b) return a.distance < b.distance end)
--
--     local successClaim = pcall(boothclaim) -- boothclaim s·∫Ω th·ª≠ unclaimed[1] v√† set bclaimed, getgenv().claimedBoothID
--     if successClaim and bclaimed then
--         Rayfield:Notify("Claim", "ƒê√£ claim th√†nh c√¥ng booth #"..getgenv().claimedBoothID, 3, "success")
--         updateBoothText()
--         -- walkToBooth() -- H√†m n√†y s·∫Ω t·ª´ tab Main ho·∫∑c logic chung
--     else
--         Rayfield:Notify("Claim", "Kh√¥ng th·ªÉ claim booth ban ƒë·∫ßu.", 3, "error")
--     end
-- end
-- task.spawn(tryClaimInitialBooth) -- G·ªçi th·ª≠ khi script load
