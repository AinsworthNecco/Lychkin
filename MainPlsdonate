--[[
    SCRIPT RAYFIELD UI - TAB BOOTH (X√¢y d·ª±ng t·ª´ng ph·∫ßn)
    Phi√™n b·∫£n: 1.1 (S·ª≠a l·ªói thi·∫øu t·∫°o Window)
]]

-- T·∫£i Rayfield UI (s·ª≠ d·ª•ng link b·∫°n cung c·∫•p)
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
if not Rayfield then
    -- Th√¥ng b√°o l·ªói c∆° b·∫£n n·∫øu kh√¥ng t·∫£i ƒë∆∞·ª£c Rayfield
    local coreGui = game:GetService("CoreGui")
    local errGui = Instance.new("ScreenGui", coreGui)
    errGui.Name = "RayfieldLoadErrorGUI" -- ƒê·∫∑t t√™n ƒë·ªÉ d·ªÖ debug
    local errLabel = Instance.new("TextLabel", errGui)
    errLabel.Size = UDim2.new(1,0,1,0); errLabel.TextScaled = true
    errLabel.TextColor3 = Color3.new(1,0,0); errLabel.BackgroundColor3 = Color3.new(0,0,0)
    errLabel.BackgroundTransparency = 0.3
    errLabel.Text = "L·ªñI NGHI√äM TR·ªåNG: Kh√¥ng th·ªÉ t·∫£i Rayfield UI!\nKi·ªÉm tra l·∫°i link ('https://sirius.menu/rayfield') ho·∫∑c k·∫øt n·ªëi m·∫°ng.\nScript s·∫Ω kh√¥ng ho·∫°t ƒë·ªông."
    errLabel.ZIndex = 1000 -- ƒê·∫£m b·∫£o hi·ªÉn th·ªã tr√™n c√πng
    if game:GetService("Players").LocalPlayer then
       -- Kh√¥ng kick ngay, ƒë·ªÉ ng∆∞·ªùi d√πng c√≥ th·ªÉ th·∫•y l·ªói UI
       -- game:GetService("Players").LocalPlayer:Kick("Kh√¥ng th·ªÉ t·∫£i Rayfield UI.")
    end
    return
end

-- C√°c services c·∫ßn thi·∫øt
local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local CoreGui = game:GetService("CoreGui") -- Th√™m CoreGui n·∫øu PlayerGui ch∆∞a s·∫µn s√†ng
if not workspace then workspace = game:GetService("Workspace") end

local localPlayer = Players.LocalPlayer
-- Fallback an to√†n h∆°n cho newRaisedFormat
local newRaisedFormat
if localPlayer and localPlayer:FindFirstChild('leaderstats') and localPlayer.leaderstats:FindFirstChild('Raised') then
    newRaisedFormat = localPlayer.leaderstats.Raised
else
    newRaisedFormat = {Value = 0} -- Object gi·∫£ l·∫≠p n·∫øu kh√¥ng t√¨m th·∫•y
    warn("RAYFIELD_BOOTH: Kh√¥ng t√¨m th·∫•y leaderstats 'Raised'. Gi√° tr·ªã Raised s·∫Ω l√† 0.")
end


-- T√¨m Remotes (quan tr·ªçng cho updateBoothText)
local Remotes
pcall(function()
    for i,v_module in ipairs(ReplicatedStorage:GetChildren()) do
        if v_module.Name:find('Remote') and v_module:IsA('ModuleScript') then
            local success, remoteMod = pcall(require, v_module)
            if success and remoteMod and typeof(remoteMod.Event) == "function" then
                Remotes = remoteMod
                print("RAYFIELD_BOOTH: Remotes module found:", v_module.Name)
                break
            end
        end
        task.wait(0.05)
    end
end)

if not Remotes then
    Rayfield:Notify("L·ªói Remotes", "Kh√¥ng t√¨m th·∫•y module Remotes. M·ªôt s·ªë t√≠nh nƒÉng c√≥ th·ªÉ kh√¥ng ho·∫°t ƒë·ªông.", 7, Enum.RayfieldNotifyInfoType.Error)
end

-- ===== H·ªÜ TH·ªêNG C√ÄI ƒê·∫∂T (Cho Tab Booth) =====
local settingsLock = true
getgenv().settings = getgenv().settings or {}

local boothTabSettings_Names = {
    "textUpdateToggle", "textUpdateDelay", "hexBox", "goalBox",
    "customBoothText", "fontFace", "standingPosition", "boothPosition",
    "jumpsPerRobux" -- Th√™m setting n√†y v√¨ updateBoothText d√πng ƒë·∫øn
}
local boothTabSettings_Defaults = {
    true, 30, "#32CD32", 5,
    "‚ù§Ô∏è C·∫£m ∆°n ƒë√£ gh√© qua!\nüí≤ Donate ƒë·ªÉ ·ªßng h·ªô m√¨nh nha!\n$C/$G", "SciFi", "Front", 3,
    1 -- Default cho jumpsPerRobux
}

local function saveSettings()
    if settingsLock then return end
    if typeof(writefile) == "function" and HttpService then
        local success, err = pcall(function()
            writefile('plsdonatesettings_rayfield_booth.txt', HttpService:JSONEncode(getgenv().settings))
        end)
        if not success then
            Rayfield:Notify("L·ªói L∆∞u Setting", "Kh√¥ng th·ªÉ l∆∞u: " .. tostring(err), 5, Enum.RayfieldNotifyInfoType.Error)
        end
    else
        -- Rayfield:Notify("L∆∞u √Ω", "H√†m 'writefile' kh√¥ng kh·∫£ d·ª•ng. C√†i ƒë·∫∑t kh√¥ng ƒë∆∞·ª£c l∆∞u v√†o file.", 3, Enum.RayfieldNotifyInfoType.Warning)
        -- V·∫´n print ra console ƒë·ªÉ ng∆∞·ªùi d√πng bi·∫øt
        print("RAYFIELD_BOOTH: writefile kh√¥ng kh·∫£ d·ª•ng, c√†i ƒë·∫∑t kh√¥ng ƒë∆∞·ª£c l∆∞u v√†o file.")
    end
end

if typeof(isfile) == "function" and typeof(readfile) == "function" and HttpService then
    if isfile('plsdonatesettings_rayfield_booth.txt') then
        local sData = readfile('plsdonatesettings_rayfield_booth.txt')
        local success, decoded = pcall(HttpService.JSONDecode, HttpService, sData)
        if success and type(decoded) == "table" then
            print("RAYFIELD_BOOTH: ƒê√£ t·∫£i c√†i ƒë·∫∑t t·ª´ file.")
            for i, key_name in ipairs(boothTabSettings_Names) do
                getgenv().settings[key_name] = decoded[key_name] -- Load gi√° tr·ªã, s·∫Ω ƒë∆∞·ª£c ghi ƒë√® b·∫±ng default n·∫øu nil ·ªü v√≤ng l·∫∑p sau
            end
        else
            Rayfield:Notify("L·ªói Load Setting", "L·ªói JSON. D√πng c√†i ƒë·∫∑t m·∫∑c ƒë·ªãnh.", 5, Enum.RayfieldNotifyInfoType.Error)
        end
    end
end

-- ƒê·∫£m b·∫£o t·∫•t c·∫£ settings c·∫ßn thi·∫øt ƒë·ªÅu c√≥ gi√° tr·ªã, n·∫øu kh√¥ng th√¨ g√°n default
local settingsChanged = false
for i, key_name in ipairs(boothTabSettings_Names) do
    if getgenv().settings[key_name] == nil then
        getgenv().settings[key_name] = boothTabSettings_Defaults[i]
        settingsChanged = true
    end
end
if settingsChanged then
    print("RAYFIELD_BOOTH: M·ªôt v√†i c√†i ƒë·∫∑t ƒë∆∞·ª£c g√°n gi√° tr·ªã m·∫∑c ƒë·ªãnh.")
    saveSettings() -- L∆∞u l·∫°i ƒë·ªÉ t·∫°o file n·∫øu ch∆∞a c√≥ ho·∫∑c c·∫≠p nh·∫≠t key m·ªõi
end


-- ===== C√ÅC H√ÄM H·ªñ TR·ª¢ CHO TAB BOOTH =====
local _boothlocation
getgenv().claimedBoothID = getgenv().claimedBoothID or nil -- Gi·ªØ l·∫°i ID booth ƒë√£ claim n·∫øu script ch·∫°y l·∫°i

local fonts = {"AmaticSC","Antique","Arcade","Arial","ArialBold","Bangers","Bodoni","Cartoon","Code","Creepster","DenkOne","Fantasy","Fondamento","FredokaOne","Garamond","Gotham","GothamBlack","GothamBold","GothamMedium","GrenzeGotisch","Highway","IndieFlower","JosefinSans","Jura","Kalam","Legacy","LuckiestGuy","Merriweather","Michroma","Nunito","Oswald","PatrickHand","PermanentMarker","Roboto","RobotoCondensed","RobotoMono","Sarpanch","SciFi","SourceSans","SourceSansBold","SourceSansItalic","SourceSansLight","SourceSansSemibold","SpecialElite","TitilliumWeb","Ubuntu"}

local function formatNumber(n)
    n = tonumber(n) or 0
    if n == 420 or n == 425 then n = n + 10 end
    if n >= 1000000000 then return string.format("%.2fb", n / 1000000000)
    elseif n >= 1000000 then return string.format("%.2fm", n / 1000000)
    elseif n >= 10000 then return string.format("%.1fk", n / 1000)
    elseif n >= 1000 then return string.format("%.2fk", n / 1000)
    else return tostring(math.floor(n)) end
end

local function rgbForPayload(hex)
	hex = tostring(hex):gsub("#", "")
    if #hex ~= 6 then return Color3.fromRGB(255,255,255) end
    local r_val, g_val, b_val = tonumber("0x"..hex:sub(1,2)), tonumber("0x"..hex:sub(3,4)), tonumber("0x"..hex:sub(5,6))
	return Color3.fromRGB(r_val or 255, g_val or 255, b_val or 255)
end

local function updateBoothText()
    if not Remotes or not getgenv().settings.textUpdateToggle or not getgenv().settings.customBoothText then return end
    if not getgenv().claimedBoothID then
        -- Rayfield:Notify("Booth Text", "Ch∆∞a claim booth n√†o!", 2, Enum.RayfieldNotifyInfoType.Warning)
        print("RAYFIELD_BOOTH: updateBoothText - Ch∆∞a claim booth.")
        return
    end

    if not _boothlocation then
        local playerGui = localPlayer and localPlayer:WaitForChild("PlayerGui", 2)
        _boothlocation = playerGui and playerGui:FindFirstChild("MapUIContainer",2) and playerGui.MapUIContainer:FindFirstChild("MapUI",2)
        if not _boothlocation then _boothlocation = Workspace:FindFirstChild("MapUI",2) end
    end
    if not _boothlocation or not _boothlocation:FindFirstChild("BoothUI") then
        Rayfield:Notify("Booth Text", "Kh√¥ng t√¨m th·∫•y MapUI!", 3, Enum.RayfieldNotifyInfoType.Error)
        return
    end

    local currentR = tonumber(newRaisedFormat.Value) or 0
    local goalR = currentR + (tonumber(getgenv().settings.goalBox) or 0)
    local currentS = formatNumber(currentR)
    local goalS = formatNumber(goalR)
    local jprS = tostring(getgenv().settings.jumpsPerRobux or 1)

    local textToSet = getgenv().settings.customBoothText
        :gsub("%%$C", currentS) :gsub("%%$G", goalS) :gsub("%%$JPR", jprS)

    local boothUIFrame = _boothlocation.BoothUI:FindFirstChild("BoothUI" .. getgenv().claimedBoothID)
    if not boothUIFrame then
        Rayfield:Notify("Booth Text", "Kh√¥ng t√¨m th·∫•y UI booth #" .. getgenv().claimedBoothID, 3, Enum.RayfieldNotifyInfoType.Warning)
        return
    end
    local signLbl = boothUIFrame:FindFirstChild("Sign", true) and boothUIFrame.Sign:FindFirstChild("TextLabel")
    if not signLbl then print("RAYFIELD_BOOTH: Kh√¥ng t√¨m th·∫•y Sign Label cho booth #"..getgenv().claimedBoothID); return end

    if signLbl.Text == textToSet then return end

    local payload = {
        textFont = Enum.Font[getgenv().settings.fontFace] or Enum.Font.SourceSans, richText = true,
        strokeColor = Color3.new(0,0,0), strokeOpacity = 0,
        textColor = rgbForPayload(getgenv().settings.hexBox or "#FFFFFF"),
        buttonStrokeColor = Color3.new(0,0,0), buttonTextColor = Color3.new(1,1,1),
        buttonColor = Color3.fromRGB(98, 255, 0), buttonHoverColor = Color3.fromRGB(98, 255, 0),
        buttonLayout = "", text = textToSet
    }
    local successPcall, errPcall = pcall(Remotes.Event("SetCustomization").FireServer, Remotes.Event("SetCustomization"), payload, "booth")
    if not successPcall then
        Rayfield:Notify("L·ªói Update Booth", "Kh√¥ng th·ªÉ g·ª≠i y√™u c·∫ßu: "..tostring(errPcall), 5, Enum.RayfieldNotifyInfoType.Error)
    else
        -- Rayfield:Notify("Booth Text", "ƒê√£ g·ª≠i y√™u c·∫ßu c·∫≠p nh·∫≠t ch·ªØ.", 1.5, Enum.RayfieldNotifyInfoType.Success) -- C√≥ th·ªÉ h∆°i nhi·ªÅu th√¥ng b√°o
        print("RAYFIELD_BOOTH: Y√™u c·∫ßu c·∫≠p nh·∫≠t ch·ªØ booth ƒë√£ g·ª≠i.")
    end
end

-- ===== T·∫†O C·ª¨A S·ªî RAYFIELD V√Ä TAB "BOOTH" =====
-- D√íNG N√ÄY ƒê√É ƒê∆Ø·ª¢C S·ª¨A:
local Window = Rayfield:CreateWindow({
    Name = "Autofarm PLS DONATE (Rayfield) - Tab Booth",
    LoadingTitle = "ƒêang t·∫£i...",
    LoadingSubtitle = "B·∫Øt ƒë·∫ßu v·ªõi Tab Booth",
    ConfigurationSaving = { Enabled = false },
    KeySystem = false
})

local BoothTab = Window:CreateTab("Booth", "rbxassetid://10749538839") -- ID Icon v√≠ d·ª•

-------------------- UI CHO TAB: BOOTH --------------------
BoothTab:CreateSection("C√†i ƒê·∫∑t Hi·ªÉn Th·ªã Ch·ªØ Tr√™n Booth")

BoothTab:CreateToggle({
    Name = "T·ª± C·∫≠p Nh·∫≠t Ch·ªØ Booth",
    CurrentValue = getgenv().settings.textUpdateToggle, -- L·∫•y gi√° tr·ªã t·ª´ settings
    Callback = function(Value)
        if settingsLock then return end
        getgenv().settings.textUpdateToggle = Value
        saveSettings()
        if Value then updateBoothText() end
    end,
})

BoothTab:CreateInput({
    Name = "Delay C·∫≠p Nh·∫≠t Ch·ªØ (gi√¢y)",
    DefaultText = tostring(getgenv().settings.textUpdateDelay), -- Gi√° tr·ªã ban ƒë·∫ßu
    Numeric = true, Float = 0, Min = 0,
    Callback = function(Text)
        if settingsLock then return end
        local num = tonumber(Text)
        if num then
            getgenv().settings.textUpdateDelay = num
            saveSettings()
        end
    end,
})

BoothTab:CreateInput({
    Name = "M√†u Ch·ªØ Booth (M√£ Hex: #RRGGBB)",
    DefaultText = getgenv().settings.hexBox,
    PlaceholderText = "#FFFFFF",
    Callback = function(Text)
        if settingsLock then return end
        local successColor, _ = pcall(Color3.fromHex, Text)
        if successColor and string.sub(Text,1,1) == "#" and #Text == 7 then
            getgenv().settings.hexBox = Text
            saveSettings()
            updateBoothText()
        else
            Rayfield:Notify("L·ªói M√£ Hex", "M√£ m√†u Hex kh√¥ng h·ª£p l·ªá. V√≠ d·ª•: #FF0000", 4, Enum.RayfieldNotifyInfoType.Error)
        end
    end,
})

BoothTab:CreateInput({
    Name = "M·ª•c Ti√™u Robux (Goal)",
    DefaultText = tostring(getgenv().settings.goalBox),
    Numeric = true, Float = 0, Min = 0,
    Callback = function(Text)
        if settingsLock then return end
        local num = tonumber(Text)
        if num then
            getgenv().settings.goalBox = num
            saveSettings()
            updateBoothText()
        end
    end,
})

BoothTab:CreateLabel("Bi·∫øn cho n·ªôi dung booth: $C (Raised hi·ªán t·∫°i), $G (M·ª•c ti√™u), $JPR (Jumps/Robux)")
local customBoothTextbox_Rayfield
customBoothTextbox_Rayfield = BoothTab:CreateTextbox({
    Name = "N·ªôi Dung Booth T√πy Ch·ªânh",
    Text = getgenv().settings.customBoothText,
    PlaceholderText = "Nh·∫≠p n·ªôi dung booth c·ªßa b·∫°n ·ªü ƒë√¢y...",
    Callback = function(CurrentText)
        if settingsLock then return end
        if #CurrentText > 221 then
            Rayfield:Notify("L·ªói VƒÉn B·∫£n", "N·ªôi dung booth kh√¥ng ƒë∆∞·ª£c qu√° 221 k√Ω t·ª±!", 5, Enum.RayfieldNotifyInfoType.Error)
            if customBoothTextbox_Rayfield and customBoothTextbox_Rayfield.SetText then
                 local trimmedText = string.sub(CurrentText, 1, 221)
                 customBoothTextbox_Rayfield:SetText(trimmedText)
                 getgenv().settings.customBoothText = trimmedText
            else
                 return
            end
        else
            getgenv().settings.customBoothText = CurrentText
        end
        saveSettings()
        updateBoothText()
    end,
})
BoothTab:CreateButton({
    Name = "C·∫≠p Nh·∫≠t N·ªôi Dung Booth Ngay",
    Callback = function()
        if settingsLock then return end
        if #getgenv().settings.customBoothText > 221 then
            Rayfield:Notify("L·ªói VƒÉn B·∫£n", "N·ªôi dung booth qu√° 221 k√Ω t·ª±!", 5)
            return
        end
        updateBoothText()
        Rayfield:Notify("Booth Text", "ƒê√£ y√™u c·∫ßu c·∫≠p nh·∫≠t n·ªôi dung.", 2)
    end,
})

local fontOptionsForDropdown = {}
for _, fontNameStr in ipairs(fonts) do table.insert(fontOptionsForDropdown, fontNameStr) end
BoothTab:CreateDropdown({
    Name = "Font Ch·ªØ Tr√™n Booth",
    Options = fontOptionsForDropdown,
    CurrentOption = getgenv().settings.fontFace,
    Callback = function(SelectedOption)
        if settingsLock then return end
        getgenv().settings.fontFace = SelectedOption
        saveSettings()
        updateBoothText()
    end,
})

BoothTab:CreateDropdown({
    Name = "V·ªã Tr√≠ ƒê·ª©ng T·∫°i Booth",
    Options = {"Front", "Left", "Right", "Behind"},
    CurrentOption = getgenv().settings.standingPosition,
    Callback = function(SelectedOption)
        if settingsLock then return end
        getgenv().settings.standingPosition = SelectedOption
        if SelectedOption == "Front" then getgenv().settings.boothPosition = 3
        elseif SelectedOption == "Left" then getgenv().settings.boothPosition = -6
        elseif SelectedOption == "Right" then getgenv().settings.boothPosition = 6
        else getgenv().settings.boothPosition = -5.5 end
        saveSettings()
    end,
})

-------------------- K·∫æT TH√öC KHAI B√ÅO UI CHO TAB BOOTH --------------------
settingsLock = false -- Cho ph√©p c√°c callback ho·∫°t ƒë·ªông
Rayfield:Notify("Kh·ªüi T·∫°o Ho√†n T·∫•t", "Tab Booth ƒë√£ s·∫µn s√†ng!", 5, Enum.RayfieldNotifyInfoType.Success)
print("RAYFIELD_BOOTH: Script Tab Booth ƒë√£ ƒë∆∞·ª£c t·∫£i v√† UI ƒë√£ t·∫°o.")

--[[
    PH·∫¶N TI·∫æP THEO S·∫º L√Ä:
    - Th√™m logic t√¨m v√† claim booth (findUnclaimed, boothclaim, v√≤ng l·∫∑p claim).
      Sau khi claim th√†nh c√¥ng, g√°n getgenv().claimedBoothID = id_booth_da_claim.
    - G·ªçi updateBoothText() v√† walkToBooth() sau khi claim.
    - Th√™m c√°c tab kh√°c (Main, Chat, Webhook, v.v.) v√† c√°c ch·ª©c nƒÉng t∆∞∆°ng ·ª©ng c·ªßa ch√∫ng.
]]

-- T·∫°m th·ªùi, ƒë·ªÉ b·∫°n test UI c·ªßa Tab Booth, t√¥i s·∫Ω kh√¥ng t·ª± ƒë·ªông claim booth.
-- B·∫°n c√≥ th·ªÉ k√≠ch ho·∫°t ch·ª©c nƒÉng updateBoothText() th·ªß c√¥ng b·∫±ng c√°ch thay ƒë·ªïi c√†i ƒë·∫∑t trong UI.
-- ƒê·ªÉ n√≥ th·ª±c s·ª± c·∫≠p nh·∫≠t ch·ªØ tr√™n booth, b·∫°n c·∫ßn claim m·ªôt booth tr∆∞·ªõc (b·∫±ng tay ho·∫∑c b·∫±ng script kh√°c)
-- v√† ƒë·∫∑t getgenv().claimedBoothID = [s·ªë ID booth c·ªßa b·∫°n] trong console executor.
-- V√≠ d·ª•: getgenv().claimedBoothID = 15 (n·∫øu booth c·ªßa b·∫°n l√† s·ªë 15)
