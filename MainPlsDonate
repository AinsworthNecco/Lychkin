-- =================================================================
-- Phần 2: CORE LOGIC (LƯU Ở GITHUB)
-- Chứa toàn bộ logic, bao gồm cả trình tải và xử lý lỗi.
-- =================================================================

return function(SETTINGS)
    -- Các service cần thiết
    local HttpService = game:GetService("HttpService")
    local Players = game:GetService("Players")
    local LocalPlayer = Players.LocalPlayer
    local CoreGui = game:GetService("CoreGui")
    local Lighting = game:GetService("Lighting")
    local SoundService = game:GetService("SoundService")
    local RunService = game:GetService("RunService")
    local TeleportService = game:GetService("TeleportService")

    -- Hàm hiển thị thông báo lỗi trên màn hình (đã được chuyển vào đây)
    local function showErrorNotification(errorMessage)
        local errorGui = Instance.new("ScreenGui", CoreGui)
        errorGui.Name = "ScriptErrorNotification"
        errorGui.ResetOnSpawn = false
        errorGui.ZIndexBehavior = Enum.ZIndexBehavior.Global

        CreateInstance("Frame", {
            ["Name"] = "Background",
            ["BackgroundColor3"] = Color3.fromRGB(40, 40, 40),
            ["BorderColor3"] = Color3.fromRGB(255, 70, 70),
            ["BorderSizePixel"] = 2,
            ["Position"] = UDim2.fromScale(0.5, 0.1),
            ["AnchorPoint"] = Vector2.new(0.5, 0),
            ["Size"] = UDim2.new(0, 400, 0, 80),
            ["Parent"] = errorGui,
            ["Children"] = {
                CreateInstance("TextLabel", {
                    ["Name"] = "Title",
                    ["Text"] = "SCRIPT ERROR",
                    ["TextColor3"] = Color3.fromRGB(255, 70, 70),
                    ["Font"] = Enum.Font.SourceSansBold,
                    ["TextSize"] = 18,
                    ["Size"] = UDim2.new(1, 0, 0, 30),
                    ["BackgroundColor3"] = Color3.fromRGB(60, 60, 60),
                }),
                CreateInstance("TextLabel", {
                    ["Name"] = "Message",
                    ["Text"] = errorMessage,
                    ["TextColor3"] = Color3.new(1, 1, 1),
                    ["Font"] = Enum.Font.SourceSans,
                    ["TextSize"] = 14,
                    ["TextWrapped"] = true,
                    ["Position"] = UDim2.new(0, 10, 0, 35),
                    ["Size"] = UDim2.new(1, -20, 1, -40),
                    ["TextXAlignment"] = Enum.TextXAlignment.Left,
                })
            }
        })
        task.delay(15, function() if errorGui then errorGui:Destroy() end end)
    end

    -- Bọc toàn bộ script trong pcall để bắt lỗi và hiển thị
    local success, err = pcall(function()
        -- Cấu hình Script (Lấy từ SETTINGS)
        local placeId = game.PlaceId
        local currentJobId = game.JobId

        local DEFAULT_WAIT_MINUTES = SETTINGS["DEFAULT_WAIT_MINUTES"]
        local minPlayerPercentage = SETTINGS["minPlayerPercentage"]
        local maxPlayerPercentageLimit = SETTINGS["maxPlayerPercentageLimit"]
        local waitTimeBetweenFullScans = 7
        local waitTimeBetweenPageFetches = 0.75
        local baseRetryDelay = 1
        local maxRetryDelay = 16

        local PLATFORM_VERTICAL_OFFSET = 0
        local SERVER_HISTORY_FILENAME = "server_hop_history.txt"
        local SERVER_HOP_GUI_NAME = "ServerHopStatusGUI"
        local AFK_PLATFORM_NAME = "MySafeAFKPlatform"
        local STATIC_HEAD_ANCHOR_PART_NAME = "AFK_HeadAnchor_StaticCam"
        local STATIC_BLACK_SCREEN_PART_NAME = "AFK_BlackScreen_StaticCam"

        -- Bảng màu Neon (viết lại theo style yêu cầu)
        local NEON_COLORS = {
            ["GREEN"] = Color3.fromRGB(10, 255, 20),
            ["YELLOW"] = Color3.fromRGB(255, 255, 0),
            ["BLUE"] = Color3.fromRGB(0, 150, 255),
            ["RED"] = Color3.fromRGB(255, 20, 20)
        }

        -- Hàm tiện ích để tạo Instance
        function CreateInstance(className, properties)
            local instance = Instance.new(className)
            local children = properties["Children"]
            properties["Children"] = nil
            properties["Parent"] = nil

            for property, value in pairs(properties) do
                instance[property] = value
            end
            
            if children then
                for _, child in ipairs(children) do
                    child.Parent = instance
                end
            end

            if properties.Parent then
                instance.Parent = properties.Parent
            end
            return instance
        end

        -- Logic kiểm tra quyền ghi file
        local canAccessFiles = false
        local writefile_func, readfile_func
        if SETTINGS["enableFileHistory"] then
            pcall(function()
                if writefile and readfile then
                    canAccessFiles, writefile_func, readfile_func = true, writefile, readfile
                else
                    print("[FileIO] Quyền file KHÔNG có sẵn.")
                end
            end)
        else
            print("[FileIO] Lịch sử file bị TẮT.")
        end

        -- Tạo UI chính
        local playerGui = LocalPlayer:WaitForChild("PlayerGui")
        if playerGui:FindFirstChild(SERVER_HOP_GUI_NAME) then
            playerGui:FindFirstChild(SERVER_HOP_GUI_NAME):Destroy()
        end

        local statusScreenGui = CreateInstance("ScreenGui", {
            ["Name"] = SERVER_HOP_GUI_NAME,
            ["ResetOnSpawn"] = false,
            ["ZIndexBehavior"] = Enum.ZIndexBehavior.Sibling,
            ["IgnoreGuiInset"] = true,
            ["Parent"] = playerGui
        })

        local statusFrame = CreateInstance("Frame", {
            ["Name"] = "StatusFrame",
            ["Size"] = UDim2.new(1, 0, 1, 0),
            ["BackgroundColor3"] = NEON_COLORS["GREEN"],
            ["BorderSizePixel"] = 0,
            ["BackgroundTransparency"] = 1,
            ["ZIndex"] = 1,
            ["Parent"] = statusScreenGui
        })

        local FIXED_TEXT_SIZE = 50
        local statusTextLabel = CreateInstance("TextLabel", {
            ["Name"] = "StatusLabel",
            ["Size"] = UDim2.new(0.9, 0, 0, FIXED_TEXT_SIZE + 40),
            ["Position"] = UDim2.new(0.5, 0, 0.5, 0),
            ["AnchorPoint"] = Vector2.new(0.5, 0.5),
            ["BackgroundTransparency"] = 1,
            ["TextColor3"] = Color3.new(1, 1, 1),
            ["Font"] = Enum.Font.SourceSansSemibold,
            ["TextScaled"] = false,
            ["TextSize"] = FIXED_TEXT_SIZE,
            ["TextXAlignment"] = Enum.TextXAlignment.Center,
            ["TextYAlignment"] = Enum.TextYAlignment.Center,
            ["TextWrapped"] = true,
            ["Text"] = "...",
            ["ZIndex"] = 2,
            ["Parent"] = statusScreenGui
        })

        -- Toàn bộ các hàm logic còn lại (updateDisplay, searchForServer, etc.)
        -- ... (Phần này giữ nguyên logic như trước)
        local function updateDisplay(state, message)
            print("[UI] ("..tostring(state)..") " .. tostring(message))
            local stateColor = NEON_COLORS["GREEN"]
            if state == "ERROR" then stateColor = NEON_COLORS["YELLOW"] end
            if statusTextLabel and statusTextLabel.Parent then
                statusTextLabel.Text = tostring(message)
                statusTextLabel.TextColor3 = stateColor
            end
            if SETTINGS["enableCountdownColor"] then
                if statusFrame and statusFrame.Parent then
                     if state == "SUCCESS" or state == "ERROR" then
                        statusFrame.BackgroundColor3 = stateColor
                        statusFrame.BackgroundTransparency = 0.5
                     else
                        statusFrame.BackgroundTransparency = 1
                     end
                end
            else
                if statusFrame then statusFrame.BackgroundTransparency = 1 end
            end
        end

        local serverHistoryCache = {}
        local function loadServerHistory()
            if not canAccessFiles then return {} end
            local historySet = {}
            local success, content = pcall(readfile_func, SERVER_HISTORY_FILENAME)
            if success and content then
                for line in string.gmatch(content, "[^" .. "\r\n" .. "]+") do
                    local trimmedLine = line:match("^%s*(.-)%s*$")
                    if trimmedLine and #trimmedLine > 0 then
                        historySet[trimmedLine] = true
                    end
                end
            end
            serverHistoryCache = historySet
            return historySet
        end

        local function addJobIdToHistoryAndSave(jobId)
            if not jobId or not canAccessFiles then return end
            serverHistoryCache[jobId] = true
            local lines = {}
            for id in pairs(serverHistoryCache) do table.insert(lines, id) end
            pcall(writefile_func, SERVER_HISTORY_FILENAME, table.concat(lines, "\n"))
        end

        local function createSafePlatform()
            updateDisplay("INFO", "Đang tạo platform...")
            if workspace:FindFirstChild(AFK_PLATFORM_NAME) then
                updateDisplay("INFO", "Platform đã có.")
                return
            end
            local platformPart = CreateInstance("Part", {
                ["Name"] = AFK_PLATFORM_NAME,
                ["Anchored"] = true,
                ["CanCollide"] = true,
                ["Size"] = Vector3.new(20000, 40, 20000),
                ["Color"] = Color3.fromRGB(50, 50, 50),
                ["Transparency"] = 0,
                ["Parent"] = workspace
            })
            local char = LocalPlayer.Character
            local hum = char and char:FindFirstChildOfClass("Humanoid")
            local hrp = char and char:FindFirstChild("HumanoidRootPart")
            if hum and hrp then
                local hrpPos = hrp.Position
                local hrpSizeY = hrp.Size.Y
                local hipHeight = hum.HipHeight
                local floorCenterY = hrpPos.Y - (hrpSizeY / 2) - hipHeight
                local platformTopY = floorCenterY - PLATFORM_VERTICAL_OFFSET
                local platformCenterY = platformTopY - (platformPart.Size.Y / 2)
                platformPart.Position = Vector3.new(hrpPos.X, platformCenterY, hrpPos.Z)
            else
                platformPart.Position = Vector3.new(0, -30 - PLATFORM_VERTICAL_OFFSET, 0)
            end
            updateDisplay("SUCCESS", "Platform đã tạo.")
        end

        local function setupStaticAfkView()
            updateDisplay("INFO", "Thiết lập view AFK tĩnh...")
            local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
            if not character then return end
            local head = character:WaitForChild("Head", 10)
            if not head then return end
            local camera = workspace.CurrentCamera
            if not camera then return end
            local staticHeadAnchor = workspace:FindFirstChild(STATIC_HEAD_ANCHOR_PART_NAME) or CreateInstance("Part", {
                ["Name"] = STATIC_HEAD_ANCHOR_PART_NAME,
                ["Size"] = Vector3.new(0.1, 0.1, 0.1),
                ["Transparency"] = 1,
                ["CanCollide"] = false,
                ["Anchored"] = true,
                ["Parent"] = workspace
            })
            staticHeadAnchor.CFrame = CFrame.new(head.Position)
            local blackTarget = workspace:FindFirstChild(STATIC_BLACK_SCREEN_PART_NAME) or CreateInstance("Part", {
                ["Name"] = STATIC_BLACK_SCREEN_PART_NAME,
                ["Size"] = Vector3.new(2500, 2500, 10),
                ["Color"] = Color3.new(0, 0, 0),
                ["CanCollide"] = false,
                ["Anchored"] = true,
                ["Parent"] = workspace
            })
            local eastPositionFromAnchor = staticHeadAnchor.Position + Vector3.new(150, 0, 0)
            blackTarget.CFrame = CFrame.new(eastPositionFromAnchor)
            camera.CameraType = Enum.CameraType.Scriptable
            camera.CFrame = CFrame.new(staticHeadAnchor.Position, blackTarget.Position)
            camera.Focus = blackTarget.CFrame
            updateDisplay("SUCCESS", "View AFK tĩnh đã thiết lập.")
        end

        local function optimizeGraphics()
            updateDisplay("INFO", "Bắt đầu tối ưu đồ họa...")
            if SETTINGS["enableSafePlatform"] then createSafePlatform() end
            task.wait(0.1)
            local success, err = pcall(function()
                local itemsToDelete = {}
                for _, item in ipairs(workspace:GetChildren()) do
                    local keep = (LocalPlayer.Character and item.Name == LocalPlayer.Character.Name) or (item == workspace.CurrentCamera) or (SETTINGS["enableSafePlatform"] and item.Name == AFK_PLATFORM_NAME) or (SETTINGS["enableStaticAfkView"] and (item.Name == STATIC_HEAD_ANCHOR_PART_NAME or item.Name == STATIC_BLACK_SCREEN_PART_NAME))
                    if not keep then table.insert(itemsToDelete, item) end
                end
                for _, item in ipairs(itemsToDelete) do pcall(function() item:Destroy() end) end
                Lighting.GlobalShadows = false
                Lighting.Brightness = 0
                Lighting.Ambient = Color3.new(0, 0, 0)
                Lighting.OutdoorAmbient = Color3.new(0, 0, 0)
                Lighting.ExposureCompensation = -2
                pcall(function() if Lighting.Atmosphere then Lighting.Atmosphere:Destroy() end end)
                pcall(function() if Lighting.Sky then Lighting.Sky:Destroy() end end)
                if LocalPlayer.PlayerGui then
                    for _, gui in ipairs(LocalPlayer.PlayerGui:GetChildren()) do
                        if gui.Name ~= SERVER_HOP_GUI_NAME then pcall(function() gui:Destroy() end) end
                    end
                end
                local settingsObj = settings()
                if settingsObj and settingsObj.Rendering then
                    settingsObj.Rendering.QualityLevel = Enum.QualityLevel.Level01
                    pcall(function() if RunService:IsClient() then RunService:Set3dRenderingEnabled(false) end end)
                end
                SoundService.RespectFilteringEnabled = true
                SoundService.AmbientReverb = Enum.ReverbType.NoReverb
                for _, sound in ipairs(game:GetDescendants()) do
                    if sound:IsA("Sound") then
                        sound.Volume = 0
                        sound:Stop()
                    end
                end
                updateDisplay("SUCCESS", "Đồ họa đã được tối ưu.")
            end)
            if not success then updateDisplay("ERROR", "Lỗi khi tối ưu đồ họa: " .. tostring(err)) end
        end

        local chosenServer = nil
        local serversUrlBase = "https://games.roblox.com/v1/games/" .. placeId .. "/servers/Public?sortOrder=Asc&limit=100"
        local function searchForServer()
            if not SETTINGS["enableFileHistory"] then serverHistoryCache = {} else loadServerHistory() end
            local historyCount = 0
            for _ in pairs(serverHistoryCache) do historyCount = historyCount + 1 end
            updateDisplay("INFO", string.format("Bắt đầu tìm server... (Tránh %d)", historyCount + 1))
            local searchLoopActive = true
            chosenServer = nil
            while searchLoopActive and not chosenServer do
                local nextCursor = nil
                updateDisplay("INFO", "Đang quét server...")
                local allScanned = false
                while not allScanned and not chosenServer do
                    local attempt = 0
                    local maxAttempts = 4
                    local pageFetched = false
                    local currentRetryDelay = baseRetryDelay
                    while not pageFetched and attempt < maxAttempts do
                        attempt = attempt + 1
                        if attempt > 1 then
                            updateDisplay("INFO", string.format("Thử lại (%d/%d)...", attempt, maxAttempts))
                            task.wait(currentRetryDelay)
                            currentRetryDelay = math.min(currentRetryDelay * 2, maxRetryDelay)
                        end
                        local success, data = pcall(HttpService.GetAsync, HttpService, serversUrlBase .. (nextCursor and "&cursor=" .. nextCursor or ""))
                        if success then
                            pageFetched = true
                            local successDecode, serverListData = pcall(HttpService.JSONDecode, HttpService, data)
                            if successDecode and serverListData and serverListData.data then
                                local suitableServers = {}
                                for _, serverInfo in ipairs(serverListData.data) do
                                    if not (serverInfo.id == currentJobId or serverHistoryCache[serverInfo.id]) then
                                        if serverInfo.playing and serverInfo.maxPlayers and serverInfo.maxPlayers > 0 then
                                            local playerRatio = serverInfo.playing / serverInfo.maxPlayers
                                            if playerRatio >= minPlayerPercentage and playerRatio < maxPlayerPercentageLimit and serverInfo.playing < serverInfo.maxPlayers then
                                                table.insert(suitableServers, serverInfo)
                                            end
                                        end
                                    end
                                end
                                if #suitableServers > 0 then
                                    chosenServer = suitableServers[math.random(1, #suitableServers)]
                                    allScanned = true
                                    break
                                end
                                nextCursor = serverListData.nextPageCursor
                                if not nextCursor then allScanned = true end
                            else updateDisplay("ERROR", "Dữ liệu server lỗi hoặc không thể giải mã.") end
                        else updateDisplay("ERROR", "Lỗi API: " .. tostring(data))
                            if attempt >= maxAttempts then allScanned = true end
                        end
                    end
                    if chosenServer or allScanned then break end
                    task.wait(waitTimeBetweenPageFetches)
                end
                if chosenServer then
                    updateDisplay("SUCCESS", "ĐÃ CHỌN SERVER!")
                    searchLoopActive = false
                elseif allScanned then
                    updateDisplay("INFO", string.format("Không tìm thấy. Chờ %ds.", waitTimeBetweenFullScans))
                    task.wait(waitTimeBetweenFullScans)
                end
            end
            if chosenServer then
                updateDisplay("SUCCESS", "Chuẩn bị dịch chuyển...")
                addJobIdToHistoryAndSave(currentJobId)
                task.wait(1)
                local success, err = pcall(TeleportService.TeleportToPlaceInstance, TeleportService, placeId, chosenServer.id, LocalPlayer)
                if not success then
                    updateDisplay("ERROR", "Lỗi dịch chuyển! Thử lại...")
                    serverHistoryCache[chosenServer.id] = true
                    chosenServer = nil
                    task.wait(5)
                    searchForServer()
                end
            else
                updateDisplay("ERROR", "Không thể tìm thấy server. Dừng lại.")
            end
        end

        local countdownShouldReset = false
        local currentCountdownThread = nil
        local function performCountdownThenSearch(minutesToWait)
            if not minutesToWait or minutesToWait <= 0 then
                updateDisplay("ERROR", "Thời gian chờ lỗi.")
                searchForServer()
                return
            end
            if not SETTINGS["enableCountdownText"] and statusTextLabel then statusTextLabel.Text = "" end
            if not SETTINGS["enableCountdownColor"] and statusFrame then statusFrame.BackgroundTransparency = 1 end
            local totalSeconds = minutesToWait * 60
            for i = totalSeconds, 0, -1 do
                if countdownShouldReset and SETTINGS["enableDonateResetCountdown"] then
                    countdownShouldReset = false
                    if statusTextLabel then statusTextLabel.Text = "" end
                    if statusFrame then statusFrame.BackgroundTransparency = 1 end
                    updateDisplay("SUCCESS", "Donate! Reset thời gian.")
                    startInitialCountdown()
                    return
                end
                if SETTINGS["enableCountdownText"] and statusTextLabel and statusTextLabel.Parent then
                    statusTextLabel.Text = string.format("%02d:%02d", math.floor(i / 60), i % 60)
                    statusTextLabel.TextColor3 = Color3.new(1, 1, 1)
                end
                if SETTINGS["enableCountdownColor"] and statusFrame and statusFrame.Parent then
                    statusFrame.BackgroundColor3 = (i % 2 == 0) and NEON_COLORS["BLUE"] or NEON_COLORS["RED"]
                    statusFrame.BackgroundTransparency = 0.6
                end
                task.wait(1)
            end
            if statusTextLabel then statusTextLabel.Text = "" end
            if statusFrame then statusFrame.BackgroundTransparency = 1 end
            updateDisplay("SUCCESS", "Hết giờ! Bắt đầu tìm server...")
            searchForServer()
        end

        local function startInitialCountdown()
            updateDisplay("INFO", "Bắt đầu chu trình...")
            if currentCountdownThread and coroutine.status(currentCountdownThread) ~= "dead" then
                pcall(coroutine.close, currentCountdownThread)
                currentCountdownThread = nil
            end
            currentCountdownThread = coroutine.create(function()
                local success, err = pcall(performCountdownThenSearch, DEFAULT_WAIT_MINUTES)
                if not success then
                    updateDisplay("ERROR", "Lỗi Coroutine: " .. tostring(err) .. ". Thử lại sau 5s...")
                    task.wait(5)
                    if SETTINGS["enableServerHopLogic"] then startInitialCountdown() end
                end
            end)
            coroutine.resume(currentCountdownThread)
        end

        -- --- Khởi chạy Script ---
        updateDisplay("INFO", "Script chính đã được tải và đang khởi chạy...")
        task.wait(0.2)
        if type(setfpscap) == "function" and SETTINGS["targetFps"] and SETTINGS["targetFps"] > 0 then
            task.spawn(function()
                while task.wait() do pcall(setfpscap, SETTINGS["targetFps"]) end
            end)
        end

        updateDisplay("INFO", "Chờ game tải trong 10 giây...")
        task.wait(10)
        updateDisplay("INFO", "Hết thời gian chờ. Bắt đầu thiết lập...")

        if SETTINGS["enableSafePlatform"] then createSafePlatform() end
        if SETTINGS["enableStaticAfkView"] then setupStaticAfkView() end
        if SETTINGS["enableGraphicsOptimization"] then optimizeGraphics() end

        if SETTINGS["enableServerHopLogic"] then
            startInitialCountdown()
            if SETTINGS["enableDonateResetCountdown"] then
                local leaderstats = LocalPlayer:WaitForChild("leaderstats", 15)
                if leaderstats then
                    local raised = leaderstats:WaitForChild("Raised", 15)
                    if raised then
                        local lastRaised = raised.Value
                        raised.Changed:Connect(function(newValue)
                            if newValue > lastRaised then
                                lastRaised = newValue
                                countdownShouldReset = true
                            end
                        end)
                    end
                end
            end
        else
            updateDisplay("INFO", "Logic Server Hop TẮT. Script đã hoàn thành.")
        end

        print("[MainLogic] Script đã hoàn tất khởi chạy chính.")
    end)

    if not success then
        showErrorNotification("Lỗi nghiêm trọng khi thực thi script chính: " .. tostring(err))
    end
end
